{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":14263652783076643142,"abi":{"parameters":[{"name":"partial_data","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"partial_hash","type":{"kind":"array","length":8,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"full_data_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"base64_decode_offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"jwt_pubkey_modulus_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"public"},{"name":"jwt_pubkey_redc_params_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"private"},{"name":"jwt_signature_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"private"},{"name":"domain","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},{"name":"position","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":128,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},{"name":"salary","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},{"name":"work_life_balance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"culture_values","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"career_growth","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"compensation_benefits","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"leadership_quality","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"operational_efficiency","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"header","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":1504,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"pubkey","type":{"kind":"struct","path":"zkemail::dkim::RSAPubkey","fields":[{"name":"modulus","type":{"kind":"array","length":9,"type":{"kind":"field"}}},{"name":"redc","type":{"kind":"array","length":9,"type":{"kind":"field"}}}]},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":9,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_header_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":null,"error_types":{"1745191622261247408":{"error_kind":"string","string":"rating must be at least 1"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4128061241751547076":{"error_kind":"string","string":"Position can not be found in email body"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5634341720269277520":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"integer","sign":"unsigned","width":8},{"kind":"integer","sign":"unsigned","width":32}]},"5675127253506927136":{"error_kind":"string","string":"utils::search could not find needle in haystack"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6314603625877298116":{"error_kind":"string","string":"haystack length of size 0 not supported"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6543056410826478903":{"error_kind":"string","string":"incorrect value for claim"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7788270038095378938":{"error_kind":"string","string":"substring not present in main text (match found if a padding text included. is main text correctly formatted?)"},"8397817944888091498":{"error_kind":"string","string":"rating must be at most 5"},"9281715815618326061":{"error_kind":"string","string":"invalid domain"},"10713088778935619315":{"error_kind":"string","string":"char before domain is not '@'"},"13815800804469369678":{"error_kind":"string","string":"partial_data length is too long"},"14044520943542572812":{"error_kind":"string","string":"Salary can not be found in email body"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15412340888643424233":{"error_kind":"string","string":"needle length of size 0 not supported"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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XMEVXMEVXMEVXMEVXMEVXMEVXMEVXKPCIbiCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCa1Q4BFdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwjQqH4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4AquUeEQXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXME1KhyCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7hGhUNwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBdeocAiu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4BoVDsEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXKPCIbiCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCK7iCa1Q4BFdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwjQqH4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4Aqu4AquUeEQXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXMEVXENwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBVdwBff/Ye9ecuO4zjAMy4A3kFmGWcJHsi/kzFuxYmoLGWXvUaragKBkIOLTP/jh5wUCzx5Vmt11PecUl8vlcrlcLpfL5XK53B+Iy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6X+5G4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul9vF5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL/UhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+3icrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XG4Xl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6X+9vjvyn79F1cLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy/1YXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLvfH43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrk/HpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpf7v/0U+/nt7ZdvzL//67t/5Jef+3/k6b//wJ/WS26Xy/v9+f3p5en3r1vy+fWay/Xz7fXp9en6ev3j+fXl5f318np/+/x2z9vT5eX96cv17eXLA/v1q/G3r//79Ztt/cen/9/P2f7ny4z78jTkZpf7/E+fw6Rrh8rlcrlc7l/J/Yn263FN8O9Pn+b+jcvQefbtOuQOnb/fn2fc56Hv3WXoc7gNXRfc3obclyF36Ps7dd2VP4bc32fc633GHfu7Df2Ot+3Ptn2+96m/29R+cttxc9n+9zZ0vjP2/Z06P/uy63OY2t7bbZm77Txqanu3nf8Oufehz3fsdzz1PZvaP7wPucv2D2Pnk0PXLWPH46n92dD39z50HrXtfsnY+eTQ93fddcvU93fq9zb0dxv7ng0dh+7broem7htNHTenrt9eZ9xt96vvQ5/DZej4Nra9Q+fVY9+HZdcBU+c7U8f556HjxdT34eq8+shx8+Euuw8zdt3iOc65vUPPIcfuG039LqbuR23b3qH92dj+d+o+zLLzvm3PIbd9DmPnZ9ue827bTy67bln3PVv2/HjqvtHYdYBxTEdj90u27Se3XW9OfQ7XXe7Y8WLZdfe2/c592birsfupU89bXB8fGed4Nnacn9rvTJ3/bps3M/U9mzr/3TaOdGo8wbbzh6Hr2Pu276/j/Ok6zp/bu2yc7thxaOh51n3bfYJl92Gm1g+aGq+xbl6ocSCnu+y82vnOY3ud75yu851ze6fmqb3vcu/L5jVvGyc2Ng972zzLbfv1ZfM3jSOddY0jPZv6HKwrO+taV3bWXXcffNs40m3rVUzt15etb+R+9ZnxyrPb67r7sb3W3zlat/7O1PFi2/pyU/P9p+ahuB91ulP7s6nfxdS8xanPYdlzHOMRzzzXO1t33uf55rm9y/YPt23r5k/NJ3McOrd32biVsetN87BPd9nxwvPCx/YuW69tzJ3a70zd3zE+6nSHfm9j+3XrlB1Zp+yxvcaXjLrrzqOm7tsvW2fEuKCzdeuDb3uf2rb9r/EPR2O/i6n5x9a7Ohq7fvPc/8j664/tXXYdu+358X3ZuIqx+w/ex3q61k892jYuc2z/MHUc2nZ9sW2dvW3PpZf93daN31l2vu59amfep3Y2Nr9l2Tqn667njVM43W3rI065n2dc6xCdXafugw/tz96HfhevQ/vJt23vKXZ+djT1/sJt75+/G/97ZP7FmfPJs7H1ireNYzJO7Mi8/LN143emPl/zko7MZ3i42z7fZff71t1/MI7paGy9Qe9/O7fX9dCR+ehn255fmJd05vrtsb3brt+m5qktux66b/tdmM97bu+y8b/r3j+/bV7otuvNZfMDtp33rbuO3Xb+u23c9tR74pc97173HMd199G679nUffCp49C2+WTmXxytG8c/dBxyH+axvcYrn67xJUee856te8/V1Pd32Xn1uvV/rcN5tG4+77brC+MJzu01LvPI+6XPrEN/5v3SZ+vWX5/6uy2bL2Ie4Nm2eYBjzwuXrZc5tY6A5xdn655fWA/kaN3nu+350NB+53loex2Pz9aNX5/6nnl+fLq+Z+f2Tr03atl7MrftJy/b3s87dV/OuMGji/Xtj8bGkU793pYdN7ddZ607/902/21qPtm25zjLnrdct93vmxpfPXX+6/ri3F7nUUfb5t1aH3zWnfq9uY49m1rH8DL1fH5qe5eNE7ssOy8ZG68x9Plu2z+sey49Nd5z2XiY27LxXJdt7/OZei697Ph2W7Y+gXE2f8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXO63cblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfLbeJyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+V+JC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vldnG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrnclHG5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlpozL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwuN2VcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuSnjcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy00Zl8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XG7KuFwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XJTxuVyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpebMi6Xy+VyuVwul8vlcrlcLpfL5XI/EpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+Vyu7hcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6X28XlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+X+9vhvyj59F5fL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVxuyrhcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyU8blcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6XmzIul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK53JRxuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5aaMy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLjdlXC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrkp43K5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8tNGZfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyPxaXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL/fG4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlclPG5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul5syLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyudyUcblcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+WmjMvlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5XC43ZVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfL5XK5KeNyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcLpfLTRmXy+VyuVwul8vlcrlcLpfL5XK5XC6Xy+VyuVwul8vlcrlcbsq4XC6X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","debug_symbols":"","file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"10":{"source":"pub struct Vec<T> {\n    pub(crate) slice: [T],\n}\n// A mutable vector type implemented as a wrapper around immutable slices.\n// A separate type is technically not needed but helps differentiate which operations are mutable.\nimpl<T> Vec<T> {\n    pub fn new() -> Self {\n        Self { slice: &[] }\n    }\n\n    // Create a Vec containing each element from the given slice.\n    // Mutations to the resulting Vec will not affect the original slice.\n    pub fn from_slice(slice: [T]) -> Self {\n        Self { slice }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index\n    /// points beyond the end of the vector.\n    pub fn get(self, index: u32) -> T {\n        self.slice[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        self.slice[index] = value;\n    }\n\n    /// Push a new element to the end of the vector, returning a\n    /// new vector with a length one greater than the\n    /// original unmodified vector.\n    pub fn push(&mut self, elem: T) {\n        self.slice = self.slice.push_back(elem);\n    }\n\n    /// Pop an element from the end of the given vector, returning\n    /// a new vector with a length of one less than the given vector,\n    /// as well as the popped element.\n    /// Panics if the given vector's length is zero.\n    pub fn pop(&mut self) -> T {\n        let (popped_slice, last_elem) = self.slice.pop_back();\n        self.slice = popped_slice;\n        last_elem\n    }\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    pub fn insert(&mut self, index: u32, elem: T) {\n        self.slice = self.slice.insert(index, elem);\n    }\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the removed element\n    pub fn remove(&mut self, index: u32) -> T {\n        let (new_slice, elem) = self.slice.remove(index);\n        self.slice = new_slice;\n        elem\n    }\n\n    /// Returns the number of elements in the vector\n    pub fn len(self) -> u32 {\n        self.slice.len()\n    }\n}\n\nmod tests {\n    use crate::collections::vec::Vec;\n\n    #[test]\n    fn set_updates_values_properly() {\n        let mut vec = Vec { slice: &[0, 0, 0, 0, 0] };\n\n        vec.set(0, 42);\n        assert_eq(vec.slice, &[42, 0, 0, 0, 0]);\n\n        vec.set(1, 43);\n        assert_eq(vec.slice, &[42, 43, 0, 0, 0]);\n\n        vec.set(2, 44);\n        assert_eq(vec.slice, &[42, 43, 44, 0, 0]);\n\n        vec.set(1, 10);\n        assert_eq(vec.slice, &[42, 10, 44, 0, 0]);\n\n        vec.set(0, 0);\n        assert_eq(vec.slice, &[0, 10, 44, 0, 0]);\n    }\n\n    #[test(should_fail)]\n    fn panics_when_writing_elements_past_end_of_vec() {\n        let mut vec = Vec::new();\n        vec.set(0, 42);\n\n        // Need to use println to avoid DIE removing the write operation.\n        crate::println(vec.get(0));\n    }\n}\n","path":"std/collections/vec.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    // Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        // Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        // Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        // Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"mod tests;\nmod utils;\n\nuse jwt::JWT;\n\nuse zkemail::{\n    headers::{body_hash::get_body_hash, email_address::get_email_address},\n    MAX_EMAIL_ADDRESS_LENGTH, partial_hash::partial_sha256_var_end,\n    dkim::RSAPubkey, Sequence,\n    KEY_LIMBS_1024,\n    KEY_LIMBS_2048\n};\n\nuse utils::position_and_salary_extractor::{\n    extract_position_from_email_body, // @dev - extract_position_from_email_body() function\n    extract_salary_from_email_body    // @dev - extract_salary_from_body() function\n}; \nuse utils::email_dkim_verifier::{\n    MAX_EMAIL_HEADER_LENGTH, MAX_EMAIL_BODY_LENGTH, \n    //verify_email_2048_bit_dkim,                       // @dev - verify_email_2048_bit_dkim() function\n    verify_email_1024_bit_dkim_without_body_hash_check  // @dev - verify_email_1024_bit_dkim_without_body_hash_check() function\n    //verify_email_2048_bit_dkim_without_body_hash_check  // @dev - verify_email_2048_bit_dkim_without_body_hash_check() function\n};\n\n// @dev - [NOTE]: The following imported-variables are temporary variables. They are stored into the \"test_header\" and \"test_body\" for passing the verify_email_2048_bit_dkim() function. Thus, this should be removed once appropreate implementation will be done in the future.\nuse tests::test_inputs::{\n    EmailLarge::{\n        HEADER, BODY,\n    },\n    EmploymentOfferEmailLarge::{\n        EMPLOYMENT_OFFER_EMAIL_HEADER, EMPLOYMENT_OFFER_EMAIL_BODY,\n        POSITION_BODY, SALARY_BODY,\n    },\n};\n\nglobal MAX_PARTIAL_DATA_LENGTH: u32 = 640; // signed data length after partial SHA\nglobal MAX_DOMAIN_LENGTH: u32 = 64;\nglobal MAX_EMAIL_LENGTH: u32 = 128;\nglobal MAX_POSITION_LENGTH: u32 = 128;\nglobal MAX_SALARY_LENGTH: u32 = 32;\n\n// Rating must be between 1 and 5\nfn verify_rating(rating: u8) {\n    assert(rating >= 1, \"rating must be at least 1\");\n    assert(rating <= 5, \"rating must be at most 5\");\n}\n\n/**\n * @brief Verify JWT signature (RSA/SHA256 only) and validate domain field\n * Also verify position and salary claims\n *\n * @param partial_data: OIDC JWT (id_token) base64 data (`$header.$payload`) as byte array of ascii characters\n *                      We do partial SHA on the data up to hd field outside of the circuit, to reduce constraints\n *                      This field only contains the bytes after partial SHA; padded to MAX_PARTIAL_DATA_LENGTH\n * @param partial_hash: The 256-bit partial hash of the `data`\n * @param full_data_length: The full length of the `data` (before partial SHA)\n * @param base64_decode_offset: Offset needed in `partial_data` to make the payloadB64 a multiple of 4\n *                    Signed data is $header.$payload. $payload might not be a multiple of 4 in `partial_data`, so we need to offset\n *                    Not attack-able by giving an incorrect offset, as string match of domain will fail\n * @param jwt_pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n * @param jwt_pubkey_redc_params_limbs: RSA reduction parameters limbs\n * @param jwt_signature_limbs: RSA signature limbs\n * @param domain: Domain name (`hd` key) as a byte array of ascii characters padded to MAX_DOMAIN_LENGTH\n * @param position: Position at the company as a byte array of ascii characters padded to MAX_POSITION_LENGTH\n * @param salary: Salary at the company as a byte array of ascii characters padded to MAX_SALARY_LENGTH\n * @param work_life_balance: Work-life balance rating (1-5)\n * @param culture_values: Culture and values rating (1-5)\n * @param career_growth: Career growth rating (1-5)\n * @param compensation_benefits: Compensation and benefits rating (1-5)\n * @param leadership_quality: Leadership quality rating (1-5)\n * @param operational_efficiency: Operational efficiency rating (1-5)\n **/\nfn main(\n    partial_data: BoundedVec<u8, MAX_PARTIAL_DATA_LENGTH>,\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    base64_decode_offset: u32,\n    jwt_pubkey_modulus_limbs: pub [u128; 18],\n    jwt_pubkey_redc_params_limbs: [u128; 18],\n    jwt_signature_limbs: [u128; 18],\n    domain: pub BoundedVec<u8, MAX_DOMAIN_LENGTH>,\n    position: pub BoundedVec<u8, MAX_POSITION_LENGTH>,   // Position, which is part of Email Body-extracted from the Entire Email Body.\n    salary: pub BoundedVec<u8, MAX_SALARY_LENGTH>,       // Salary, which is part of Email Body-extracted from the Entire Email Body.\n    work_life_balance: pub u8,\n    culture_values: pub u8,\n    career_growth: pub u8,\n    compensation_benefits: pub u8,\n    leadership_quality: pub u8,\n    operational_efficiency: pub u8,\n\n    // @dev - Input parameters for email verification /w ZKEmail.nr\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,  // Entire Email Header\n    //body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>,    // Entire Email Body\n    pubkey: RSAPubkey<KEY_LIMBS_1024>,\n    //pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_1024],\n    //signature: [Field; KEY_LIMBS_2048],\n    //body_hash_index: u32,\n    dkim_header_sequence: Sequence\n) {\n    // Init JWT struct and verify signature\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        jwt_pubkey_modulus_limbs,\n        jwt_pubkey_redc_params_limbs,\n        jwt_signature_limbs,\n    );\n    jwt.verify();\n\n    // Assert email_verified claim\n    jwt.assert_claim_bool(\"email_verified\".as_bytes(), true);\n\n    // Get email claim\n    let email: BoundedVec<u8, MAX_EMAIL_LENGTH> = jwt.get_claim_string(\"email\".as_bytes());\n\n    // Get domain start_index from email claim - unconstrained, but we verify the domain bytes below\n    // Safety: This function is unconstrained but its output is verified by the domain check below\n    let domain_start_index = unsafe { get_domain_start_index_in_email(email) };\n\n    // Verify domain passed is present in the email claim after the @\n    assert(email.storage()[domain_start_index - 1] == 64, \"char before domain is not '@'\");\n    for i in 0..MAX_DOMAIN_LENGTH {\n        assert(email.storage()[domain_start_index + i] == domain.storage()[i], \"invalid domain\");\n    }\n\n    // Verify position and salary claims\n    // These are separate inputs, NOT from the JWT\n    let position_claim: BoundedVec<u8, MAX_POSITION_LENGTH> = position;\n    for i in 0..MAX_POSITION_LENGTH {\n        assert(position_claim.storage()[i] == position.storage()[i], \"invalid position\");\n    }\n\n    let salary_claim: BoundedVec<u8, MAX_SALARY_LENGTH> = salary;\n    for i in 0..MAX_SALARY_LENGTH {\n        assert(salary_claim.storage()[i] == salary.storage()[i], \"invalid salary\");\n    }\n\n    // Verify ratings are valid (1-5)\n    verify_rating(work_life_balance);\n    verify_rating(culture_values);\n    verify_rating(career_growth);\n    verify_rating(compensation_benefits);\n    verify_rating(leadership_quality);\n    verify_rating(operational_efficiency);\n\n    // @dev - [TODO]: The following variables are temporary variables. They are just for passing the verify_email_2048_bit_dkim() function. Thus, this should be replaced with a given \"header\" and \"body\" going forward.\n    let test_header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH> = HEADER;\n    //let test_body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH> = BODY;\n\n    // @dev - Verify an arbitrary email, which is signed by a 2048-bit RSA DKIM signature - without (skipping) body hash check\n    let return_value: [Field; 2] = verify_email_1024_bit_dkim_without_body_hash_check(\n    //let return_value: [Field; 2] = verify_email_2048_bit_dkim_without_body_hash_check(\n        test_header,  // [TODO]: Should be replaced with a given \"header\" in the future.\n        //header,\n        pubkey,\n        signature,\n        dkim_header_sequence\n    );\n    // let return_value: [Field; 2] = verify_email_2048_bit_dkim(\n    //     //test_header,  // [TODO]: Should be replaced with a given \"header\" in the future.\n    //     header,\n    //     //test_body,    // [TODO]: Should be replaced with a given \"body\" in the future.\n    //     body,\n    //     pubkey,\n    //     signature,\n    //     body_hash_index,\n    //     dkim_header_sequence\n    // );\n\n    // @dev - [TODO]: The following variables are temporary variables. They are just for passing the is_position_found_in_email_body() and is_salary_found_in_email_body() function. Thus, this should be replaced with a given \"body\"/\"position\"/\"salary\" going forward.\n    let test_email_body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH> = EMPLOYMENT_OFFER_EMAIL_BODY;\n    let test_position: BoundedVec<u8, MAX_POSITION_LENGTH> = POSITION_BODY;\n    let test_salary: BoundedVec<u8, MAX_SALARY_LENGTH> = SALARY_BODY;\n\n    /// @dev - Validate to check whether a given \"position\" is included in the entire email body or not.\n    /// @dev - Compare a given \"position\" (BoundedVec<u8, MAX_POSITION_LENGTH>) and a given \"body\" (BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>)\n    let is_position_found_in_email_body: bool = unsafe { is_position_found_in_email_body(test_position, test_email_body) };\n    //let is_position_found_in_email_body: bool = unsafe { is_position_found_in_email_body(position, body) };\n    assert(is_position_found_in_email_body == true, \"Position can not be found in email body\");\n\n    /// @dev - Validate to check whether a given \"salary\" is included in the entire email body or not.\n    /// @dev - Compare a given \"salary\" (BoundedVec<u8, MAX_SALARY_LENGTH>) and a given \"body\" (BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>)\n    let is_salary_found_in_email_body: bool = unsafe { is_salary_found_in_email_body(test_salary, test_email_body) };\n    //let is_salary_found_in_email_body: bool = unsafe { is_salary_found_in_email_body(salary, body) };\n    assert(is_salary_found_in_email_body == true, \"Salary can not be found in email body\");\n}\n\n\n/**\n * @notice - Get (Identify) a start index of domain in email\n */\nunconstrained fn get_domain_start_index_in_email(email: BoundedVec<u8, MAX_EMAIL_LENGTH>) -> u32 {\n    let mut domain_start_index = 0;\n    for i in 0..MAX_EMAIL_LENGTH {\n        if email.storage()[i] == (\"@\".as_bytes())[0] {\n            domain_start_index = i + 1;\n            break;\n        }\n    }\n\n    domain_start_index\n}\n\n/**\n * @dev - Validate to check whether a given \"position\" is included in the entire email body or not.\n * @dev - Compare a given \"position\" (BoundedVec<u8, MAX_POSITION_LENGTH>) and a given \"body\" (BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>)\n */\nunconstrained fn is_position_found_in_email_body(\n    position: BoundedVec<u8, MAX_POSITION_LENGTH>, \n    body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>\n) -> bool {\n    /// @dev - Logging\n    let position_storage = position.storage(); \n    let body_storage = body.storage(); \n    println(f\"position.storage(): {position_storage}\\n\");\n    println(f\"body.storage(): {body_storage}\\n\");\n\n    /// @dev - Look for \"position\" in \"email_body\"\n    let mut is_position_found_in_email_body: bool = false;\n    for i in 0..body.len() {\n        if (position.storage()[0] == body.storage()[i]) {\n            if (position.len() == 1) { // @dev - The position and the sentence in the Email Body would completely be matched - In the case that the number of vectors of \"position\" is \"1\". \n                is_position_found_in_email_body = true;\n                break;\n            }\n\n            let mut position_array: Vec<u8> = Vec::new();\n            //let mut position_array: BoundedVec<Field, position.len()> = BoundedVec::new();\n            for j in 1..position.len() {\n                if (position.storage()[j] == body.storage()[i+j]) {\n                    position_array.push(position.storage()[j]);\n                    println(f\"position_array: {position_array}\\n\");\n\n                    /// @dev - Logging\n                    let position_len = position.len() - 1;\n                    let position_array_len = position_array.len();\n                    println(f\"position.len() - 1: {position_len}\\n\");\n                    println(f\"position_array.len(): {position_array_len}\\n\");\n\n                    /// @dev - The position and the sentence in the Email Body would completely be matched - In the case that the number of vectors of \"position\" is \"many\" (Not \"1\"). \n                    if ((j == position.len() - 1) & (position_array.len() == position.len() - 1)) { /// @dev - Since \"j\" get started from \"1\", \"1\" should be subtracted from the position.len()\n                        is_position_found_in_email_body = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    is_position_found_in_email_body\n}\n\n/** \n * @dev - Validate to check whether a given \"salary\" is included in the entire email body or not.\n * @dev - Compare a given \"salary\" (BoundedVec<u8, MAX_SALARY_LENGTH>) and a given \"body\" (BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>)\n * @dev - In the following implementation, the maximum number of sequences-matched is 5. (\"5\" is enuough for judging whether a given salary is included in the email body or not)\n */\nunconstrained fn is_salary_found_in_email_body(\n    salary: BoundedVec<u8, MAX_SALARY_LENGTH>, \n    body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>\n) -> bool {\n    let mut is_salary_found_in_email_body: bool = false;\n    for i in 0..body.len() {\n        if (salary.storage()[0] == body.storage()[i]) {\n            if (salary.len() == 1) {\n                // @dev - Salary is found in the email body\n                is_salary_found_in_email_body = true;\n                break;\n            }\n\n            let mut salary_array: Vec<u8> = Vec::new();\n            //let mut salary_array: BoundedVec<Field, salary.len()> = BoundedVec::new();\n            for j in 1..salary.len() {\n                if (salary.storage()[j] == body.storage()[i+j]) {\n                    salary_array.push(salary.storage()[j]);\n                    println(f\"salary_array: {salary_array}\\n\");\n\n                    /// @dev - Logging\n                    let salary_len = salary.len() - 1;\n                    let salary_array_len = salary_array.len();\n                    println(f\"salary.len() - 1: {salary_len}\\n\");\n                    println(f\"position_array.len(): {salary_array_len}\\n\");\n\n                    // @dev - The position and the sentence in the Email Body would completely be matched - In the case that the number of vectors of \"position\" is \"many\" (Not \"1\"). \n                    if ((j == salary.len() - 1) & (salary_array.len() == salary.len() - 1)) { /// @dev - Since \"j\" get started from \"1\", \"1\" should be subtracted from the position.len()\n                        is_salary_found_in_email_body = true;\n                        break;\n                    }\n                }\n            }\n         }\n    }\n\n    is_salary_found_in_email_body\n}","path":"/Users/unomasanori/Projects/DEMO_MVP/【Noir】NoirHack - OpenBands (zkGlassdoor 👓)/actual-impl/OpenBands/circuit/src/main.nr"},"64":{"source":"use std::{collections::bounded_vec::BoundedVec, hash::{pedersen_hash, sha256_var}};\nuse zkemail::{\n    dkim::RSAPubkey, \n    headers::body_hash::get_body_hash, \n    KEY_LIMBS_1024,\n    KEY_LIMBS_2048, \n    Sequence\n};\n\nglobal MAX_EMAIL_HEADER_LENGTH: u32 = 1504;\n//global MAX_EMAIL_HEADER_LENGTH: u32 = 512;\nglobal MAX_EMAIL_BODY_LENGTH: u32 = 32000;\n//global MAX_EMAIL_BODY_LENGTH: u32 = 1024;\n\n\n/**\n * Verify an arbitrary email signed by a 2048-bit RSA DKIM signature\n * @dev TOTAL CONSTRAINTS: ~222,783\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param body - The email body, 0-padded at end to the MAX_EMAIL_BODY_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param body_hash_index - The index of the body hash in the partial hash array\n * @param dkim_header_sequence - The index and length of the DKIM header field\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\nfn verify_email_1024_bit_dkim(\n//fn verify_email_2048_bit_dkim(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_1024>,\n    //pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_1024],\n    //signature: [Field; KEY_LIMBS_2048],\n    body_hash_index: u32,\n    dkim_header_sequence: Sequence,\n) -> pub [Field; 2] {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n    assert(body.len() <= MAX_EMAIL_BODY_LENGTH);\n\n    // ~ 86,553 constraints\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // ~ 6,289 constraints\n    // extract the body hash from the header\n    let signed_body_hash = get_body_hash(header, dkim_header_sequence, body_hash_index);\n\n    // ~ 113,962 constraints\n    // hash the asserted body\n    let computed_body_hash: [u8; 32] = sha256_var(body.storage, body.len() as u64);\n\n    // compare the body hashes\n    assert(\n        signed_body_hash == computed_body_hash,\n        \"SHA256 hash computed over body does not match body hash found in DKIM-signed header\",\n    );\n\n    // ~ 10,255 constraints\n    // hash the pubkey and signature for the standard outputs\n    let email_nullifier = pedersen_hash(signature);\n    [pubkey.hash(), email_nullifier]\n}\n\n\n/**\n * Verify an arbitrary email signed by a 2048-bit RSA DKIM signature - without (skipping) body hash check\n * @dev TOTAL CONSTRAINTS: ~222,783\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param dkim_header_sequence - The index and length of the DKIM header field\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\nfn verify_email_2048_bit_dkim_without_body_hash_check(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n    dkim_header_sequence: Sequence,\n) -> pub [Field; 2] {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    // ~ 86,553 constraints\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // ~ 10,255 constraints\n    // hash the pubkey and signature for the standard outputs\n    let email_nullifier = pedersen_hash(signature);\n    [pubkey.hash(), email_nullifier]\n}\n\n\n/**\n * Verify an arbitrary email signed by a 1024-bit RSA DKIM signature - without (skipping) body hash check\n * @dev TOTAL CONSTRAINTS: ~222,783\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param dkim_header_sequence - The index and length of the DKIM header field\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\nfn verify_email_1024_bit_dkim_without_body_hash_check(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_1024>,\n    signature: [Field; KEY_LIMBS_1024],\n    dkim_header_sequence: Sequence,\n) -> pub [Field; 2] {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    // ~ 86,553 constraints\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // ~ 10,255 constraints\n    // hash the pubkey and signature for the standard outputs\n    let email_nullifier = pedersen_hash(signature);\n    [pubkey.hash(), email_nullifier]\n}","path":"/Users/unomasanori/Projects/DEMO_MVP/【Noir】NoirHack - OpenBands (zkGlassdoor 👓)/actual-impl/OpenBands/circuit/src/utils/email_dkim_verifier.nr"},"67":{"source":"mod partial_hash;\n\nuse base64::BASE64_URL_DECODER;\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse nodash::str_to_u64;\nuse partial_hash::partial_sha256_var_end;\nuse rsa::rsa::verify_sha256_pkcs1v15;\nuse sha256::sha256_var;\nuse string_search::{StringBody, SubString};\n\n/**\n * @brief Struct representing a JWT. Use the init functions to create an instance\n *        Currently only supports RSA 2048/SHA256 signatures\n **/\npub struct JWT<let MAX_DATA_LENGTH: u32> {\n    data: BoundedVec<u8, MAX_DATA_LENGTH>,\n    pubkey_modulus_limbs: [u128; 18],\n    redc_params_limbs: [u128; 18],\n    signature_limbs: [u128; 18],\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    base64_decode_offset: u32,\n    is_partial_hash: bool, // compile time variable used internally\n}\n\nimpl<let MAX_DATA_LENGTH: u32> JWT<MAX_DATA_LENGTH> {\n    /**\n    * @brief Initialize JWT struct\n    *\n    * @param data: Signed JWT data (base64 encoded `$header.$payload`) as byte array of ascii characters\n    * @param base64_decode_offset: The offset from which we will start base64 decoding the data.\n    *                                   Any 4x multiple from the payload start index.\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs (2048-bit split into 18 limbs)\n    * @param signature_limbs: RSA signature limbs (2048-bit split into 18 limbs)\n    **/\n    pub fn init(\n        data: BoundedVec<u8, MAX_DATA_LENGTH>,\n        base64_decode_offset: u32,\n        pubkey_modulus_limbs: [u128; 18],\n        redc_params_limbs: [u128; 18],\n        signature_limbs: [u128; 18],\n    ) -> JWT<MAX_DATA_LENGTH> {\n        assert(data.len() <= MAX_DATA_LENGTH, \"data length is too long\");\n\n        JWT {\n            data,\n            base64_decode_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            // below fields are not relevant unless for partial hash\n            full_data_length: MAX_DATA_LENGTH,\n            partial_hash: [0; 8],\n            is_partial_hash: false,\n        }\n    }\n\n    /**\n    * @brief Initialize JWT with partial SHA256 hash'ed input\n    *        Since SHA hash is expensive to compute in circuit, we can optimize by pre-hashing up to a certain block outside the circuit,\n    *        and verify for correctness in the circuit. This is possible since SHA works in incremental blocks.\n    *        You can pre-hash up to the SHA-256 block from where you want to extract a claim.\n    *\n    * @param partial_data: Signed JWT data (base64 encoded `$header.$payload`) after partial hashed block\n    * @param partial_hash: The 256-bit partial hash of the `partial_data` up to a certain block\n    * @param full_data_length: The full length of the `data` (before partial SHA)\n    * @param base64_decode_offset: The offset from which we will start base64 decoding the data.\n    *                                   Trimming `offset` nubmer of bytes from the data should it base64 decode-able.\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs\n    * @param signature_limbs: RSA signature limbs\n    **/\n    pub fn init_with_partial_hash(\n        partial_data: BoundedVec<u8, MAX_DATA_LENGTH>,\n        partial_hash: [u32; 8],\n        full_data_length: u32,\n        base64_decode_offset: u32,\n        pubkey_modulus_limbs: [u128; 18],\n        redc_params_limbs: [u128; 18],\n        signature_limbs: [u128; 18],\n    ) -> JWT<MAX_DATA_LENGTH> {\n        assert(partial_data.len() <= MAX_DATA_LENGTH, \"partial_data length is too long\");\n\n        JWT {\n            data: partial_data,\n            full_data_length,\n            partial_hash,\n            base64_decode_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            is_partial_hash: true,\n        }\n    }\n\n    /**\n    * @brief Verify JWT signature with RSA 2048/SHA256\n    **/\n    pub fn verify(mut self) {\n        let mut data_hash: [u8; 32] = [0; 32];\n\n        if (!self.is_partial_hash) {\n            // this is a compile time conditional\n            // Hash the data using SHA256\n            data_hash = sha256_var(self.data.storage(), self.data.len() as u64);\n        } else {\n            // Compute the full SHA256 hash with the given partial hash\n            data_hash = partial_sha256_var_end(\n                self.partial_hash,\n                self.data.storage(),\n                self.data.len() as u64,\n                self.full_data_length as u64,\n            );\n        }\n\n        // Verify RSA signature\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(false, self.pubkey_modulus_limbs, self.redc_params_limbs);\n\n        let signature = RuntimeBigNum { params, limbs: self.signature_limbs };\n\n        assert(verify_sha256_pkcs1v15(data_hash, signature, 65537));\n    }\n\n    /**\n    * @brief Get a string claim from the JWT payload\n    *\n    * @param KEY_LENGTH: The length of the claim key\n    * @param MAX_VALUE_LENGTH: The maximum length of the claim value\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_string<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        self.get_claim::<KEY_LENGTH, MAX_VALUE_LENGTH>(claim_key, true)\n    }\n\n    /**\n    * @brief Assert a string claim in the JWT payload.\n    *        Refer to `get_claim_string` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_string<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: BoundedVec<u8, MAX_VALUE_LENGTH>,\n    ) {\n        let value: BoundedVec<u8, MAX_VALUE_LENGTH> =\n            self.get_claim_string::<KEY_LENGTH, MAX_VALUE_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Get a number (u64) claim from the JWT payload\n    *        Refer to `get_claim_string` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_number<let KEY_LENGTH: u32>(self, claim_key: [u8; KEY_LENGTH]) -> u64 {\n        let claim = self.get_claim::<KEY_LENGTH, 20>(claim_key, false);\n        str_to_u64(claim.storage())\n    }\n\n    /**\n    * @brief Assert a number (u64) claim in the JWT payload.\n    *        Refer to `get_claim_number` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_number<let KEY_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: u64,\n    ) {\n        let value = self.get_claim_number::<KEY_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Get a boolean claim from the JWT payload\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_bool<let KEY_LENGTH: u32>(self, claim_key: [u8; KEY_LENGTH]) -> bool {\n        let value = self.get_claim::<KEY_LENGTH, 5>(claim_key, false);\n        let mut is_true = true;\n        for i in 0..4 {\n            is_true = is_true & (value.storage()[i] == \"true\".as_bytes()[i]);\n        }\n        let is_false = value.storage() == \"false\".as_bytes();\n\n        assert(is_true | is_false, \"incorrect value for claim\");\n        is_true\n    }\n\n    /**\n    * @brief Assert a boolean claim in the JWT payload.\n    *        Refer to `get_claim_bool` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_bool<let KEY_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: bool,\n    ) {\n        let value = self.get_claim_bool::<KEY_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Internal function to get claim bytes from the JWT payload\n    **/\n    fn get_claim<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        is_value_quoted: bool,\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        //Safety: extract the value in unconstrained mode, and verify later\n        let value: BoundedVec<u8, MAX_VALUE_LENGTH> = unsafe {\n            self.extract_claim_unconstrained::<KEY_LENGTH, MAX_VALUE_LENGTH>(\n                claim_key,\n                is_value_quoted,\n            )\n        };\n\n        // constrain the extracted value is present in the payload using string_search lib\n        // haystack is the base64 decoded payload;\n        let haystack = self.prepare_haystack();\n\n        // needle is the key with quotes around it - searching for just the key string might return false positives from elsewhere\n        // Note: key length is known at compile time as this lib doesn't support runtime keys\n        let mut key_with_quote: [u8; KEY_LENGTH + 2] = [0; KEY_LENGTH + 2];\n        key_with_quote[0] = 34; // ascii for quote\n        for i in 0..KEY_LENGTH {\n            key_with_quote[i + 1] = claim_key[i];\n        }\n        key_with_quote[KEY_LENGTH + 1] = 34; // ascii for quote\n\n        let mut needle: SubString<(((KEY_LENGTH + 2) + 31) / 31) * 31, (KEY_LENGTH + 2) / 31, (KEY_LENGTH + 2)> =\n            SubString::new(key_with_quote, key_with_quote.len());\n\n        let (result, position): (bool, u32) = haystack.substring_match(needle);\n        assert(result, \"key not found in the payload\");\n\n        // assert value after quoted key is a colon\n        let colon_index = position + KEY_LENGTH + 2; // +2 for the quotes around the key\n        assert(haystack.body[colon_index] == 58); // :\n\n        // assert the value is correct - string have quotes around them, numbers and booleans don't\n        let mut value_start_index = colon_index + 1; // Value starts after the colon\n        let mut index_after_value = value_start_index + value.len(); // Index after the value, quoted or otherwise\n\n        if (is_value_quoted) {\n            // adjust start index for the quotes around the value\n            value_start_index = value_start_index + 1; // Adjust for the quote before the value\n            index_after_value = index_after_value + 2; // Adjust for the quotes around the value\n\n            // assert the char before and after the value is a quote\n            assert(haystack.body[value_start_index - 1] == 34); // \"\n            assert(haystack.body[index_after_value - 1] == 34); // \"\n        }\n\n        // assert the value is correct\n        for i in 0..MAX_VALUE_LENGTH {\n            if (i < value.len()) {\n                assert(haystack.body[value_start_index + i] == value.storage()[i]);\n            }\n        }\n\n        // assert the char after the value is a comma or a closing brace (last claim in the payload)\n        let char_after_value = haystack.body[index_after_value];\n        assert((char_after_value == 44) | (char_after_value == 125)); // , or }\n\n        value\n    }\n\n    /**\n    * @brief Internal function to prepare the haystack for string search (base64 decoded payload with offset applied)\n    **/\n    fn prepare_haystack(\n        self,\n    ) -> StringBody<((((MAX_DATA_LENGTH / 4) * 3) + 31) / 31) * 31, (((MAX_DATA_LENGTH / 4) * 3) + 31) / 31, ((MAX_DATA_LENGTH / 4) * 3)> {\n        // We need to decode the payload from the payload_b64_offset; i.e. data.slice(0, base64_decode_offset)\n        let mut data_to_b64_decode: [u8; MAX_DATA_LENGTH] = [0; MAX_DATA_LENGTH];\n\n        // Conditional inside the for loop blows up the constraint size\n        // So we fill the full MAX_DATA_LENGTH (rotate on overflow) and prepare a BoundedVec with the correct length later\n        for i in 0..MAX_DATA_LENGTH {\n            data_to_b64_decode[i] =\n                self.data.storage()[(i + self.base64_decode_offset) % self.data.len()];\n        }\n\n        let data_to_decode_bv: BoundedVec<u8, MAX_DATA_LENGTH> = BoundedVec::from_parts(\n            data_to_b64_decode,\n            self.data.len() - self.base64_decode_offset,\n        );\n\n        // Decode the payload\n        let payload: BoundedVec<u8, ((MAX_DATA_LENGTH / 4) * 3)> =\n            BASE64_URL_DECODER::decode_var(data_to_decode_bv); // b64 decoded length is ceil(MAX_DATA_LENGTH / 3) * 4\n\n        // Create the haystack\n        let haystack: StringBody<((((MAX_DATA_LENGTH / 4) * 3) + 31) / 31) * 31, (((MAX_DATA_LENGTH / 4) * 3) + 31) / 31, ((MAX_DATA_LENGTH / 4) * 3)> =\n            StringBody::new(payload.storage(), payload.len());\n\n        haystack\n    }\n\n    /**\n    * @brief Unconstrained function to extract claim bytes from the JWT payload\n    **/\n    pub unconstrained fn extract_claim_unconstrained<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        key: [u8; KEY_LENGTH],\n        is_value_quoted: bool,\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        let haystack = self.prepare_haystack();\n\n        let mut key_with_quote: [u8; KEY_LENGTH + 2] = [0; KEY_LENGTH + 2];\n        key_with_quote[0] = 34; // ascii for quote\n        for i in 0..KEY_LENGTH {\n            key_with_quote[i + 1] = key[i];\n        }\n        key_with_quote[KEY_LENGTH + 1] = 34; // ascii for quote\n\n        let mut needle: SubString<(((KEY_LENGTH + 2) + 31) / 31) * 31, (KEY_LENGTH + 2) / 31, (KEY_LENGTH + 2)> =\n            SubString::new(key_with_quote, key_with_quote.len());\n\n        let (result, position): (bool, u32) = haystack.substring_match(needle);\n        assert(result, \"key not found in the payload\");\n\n        // Get the value after the key\n        let mut value_start_idx = position + key.len() + 3; // +3 for the quote around the key and the colon\n        if (is_value_quoted) {\n            value_start_idx += 1; // +1 for the quote before the value\n        }\n\n        let mut value: BoundedVec<u8, MAX_VALUE_LENGTH> = BoundedVec::new();\n\n        for i in 0..MAX_VALUE_LENGTH {\n            let val = haystack.body[value_start_idx + i];\n            if ((val == 34) | (val == 44) | (val == 125)) {\n                break;\n            }\n            value.push(haystack.body[value_start_idx + i]);\n        }\n\n        value\n    }\n}\n\n#[test]\nfn test_verify() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n}\n\n#[test]\nfn test_verify_partial_hash() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let partial_data: BoundedVec<u8, 256> = BoundedVec::from_array([\n        106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69,\n        77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100,\n        109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109,\n        53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73,\n        122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108,\n        106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104,\n        100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89,\n        88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106,\n        81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54,\n        77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 1;\n    let partial_hash = [\n        2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610,\n        4160738201,\n    ];\n    let full_data_length = 268;\n\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n}\n\n#[test]\nfn test_get_claim_string() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email: BoundedVec<u8, 100> = jwt.get_claim_string(\"email\".as_bytes());\n    let expected_email: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    assert(email == expected_email);\n}\n\n#[test]\nfn test_get_claim_string_partial_hash() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let partial_data: BoundedVec<u8, 256> = BoundedVec::from_array([\n        106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69,\n        77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100,\n        109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109,\n        53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73,\n        122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108,\n        106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104,\n        100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89,\n        88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106,\n        81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54,\n        77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 1;\n    let partial_hash = [\n        2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610,\n        4160738201,\n    ];\n    let full_data_length = 268;\n\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email: BoundedVec<u8, 100> = jwt.get_claim_string(\"email\".as_bytes());\n    let expected_email: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    assert(email == expected_email);\n}\n\n#[test]\nfn test_assert_claim_string() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let value: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    jwt.assert_claim_string(\"email\".as_bytes(), value);\n}\n\n#[test]\nfn test_get_claim_number() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let iat: u64 = jwt.get_claim_number(\"iat\".as_bytes());\n    let expected_iat: u64 = 1737642217;\n    assert(iat == expected_iat);\n}\n\n#[test]\nfn test_assert_claim_number() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let expected_iat: u64 = 1737642217;\n    jwt.assert_claim_number(\"iat\".as_bytes(), expected_iat);\n}\n\n#[test]\nfn test_get_claim_bool() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email_verified: bool = jwt.get_claim_bool(\"email_verified\".as_bytes());\n    assert(email_verified);\n}\n\n#[test]\nfn test_assert_claim_bool() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    jwt.assert_claim_bool(\"email_verified\".as_bytes(), true);\n}\n\n#[test]\nfn test_get_last_claim() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let exp: u64 = jwt.get_claim_number(\"exp\".as_bytes()); // exp is the last claim in the test payload\n    let expected_exp: u64 = 1799999999;\n    assert(exp == expected_exp);\n}\n","path":"/Users/unomasanori/nargo/github.com/saleel/noir-jwt/v0.4.4/src/lib.nr"},"68":{"source":"// Copied form https://raw.githubusercontent.com/zkemail/zkemail.nr/refs/heads/main/lib/src/partial_hash.nr\n// Use dependency one zkemail.nr is updated to bignum 0.6.0\n\nuse std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L23\n// Convert 64-byte array to array of 16 u32s\npub fn msg_u8_to_u32(msg: [u8; BLOCK_SIZE]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L38\nunconstrained fn build_msg_block_iter<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> ([u8; BLOCK_SIZE], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L59\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32,\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE: u32 = 64;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L86-L116\n/**\n * Partially computes a SHA256 hash of a message but does not finalize\n * @notice can be used for post-partial hashing where client proves part of hash and relies on server to finish\n * \n *\n * @param N: the length of the message to hash.\n *  --- WARNING: N must be divisible by BLOCK_SIZE such that N % BLOCK_SIZE == 0 \n *      otherwise the remaining bytes will not be inputted when computing the initial hash\n * @param msg: the preimage to begin hashing\n * @return the intermediate hash state\n */\npub fn partial_sha256_var_start<let N: u32>(msg: [u8; N]) -> [u32; 8] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe { build_msg_block_iter(msg, N, msg_start) };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n/**\n * Given some state of a partially computed sha256 hash and part of the preimage, continue hashing\n * @notice used for complex/ recursive offloading of post-partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the preimage to hash\n * @param message_size - the actual length of the preimage to hash\n * @return the intermediate hash state after compressing in msg to h\n */\npub fn partial_sha256_var_interstitial<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u32,\n) -> [u32; 8] {\n    assert(message_size % BLOCK_SIZE == 0, \"Message size must be a multiple of the block size\");\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe { build_msg_block_iter(msg, N, msg_start) };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) & (msg_start < message_size) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L85\n/**\n * Given some state of a partially computed sha256 hash and remaining preimage, complete the hash\n * @notice used for traditional partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the remaining preimage to hash\n * @param message_size - the size of the remaining preimage\n * @param real_message_size -= the total size of the preimage\n * @return finalized sha256 hash\n */\npub fn partial_sha256_var_end<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u64,\n    real_message_size: u64,\n) -> [u8; 32] {\n    let message_size = message_size as u32; // noir stdlib uses u64\n    let real_message_size = real_message_size as u32; // noir stdlib uses u64\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block_iter(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block_iter(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, real_message_size) };\n\n    if !is_unconstrained() {\n        for i in 0..56 {\n            if i < msg_byte_ptr {\n                assert_eq(msg_block[i], last_block[i]);\n            } else {\n                assert_eq(msg_block[i], zero);\n            }\n        }\n\n        let len = 8 * real_message_size;\n        let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n        for i in 56..64 {\n            assert_eq(msg_block[i], len_bytes[i - 56]);\n        }\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32,\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32,\n    message_size: u32,\n) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n","path":"/Users/unomasanori/nargo/github.com/saleel/noir-jwt/v0.4.4/src/partial_hash.nr"},"70":{"source":"unconstrained fn __boundary_check<let Range: u32>(limit: u32) -> [Field; Range] {\n    let mut r: [Field; Range] = [0; Range];\n    for i in limit..Range {\n        r[i] = 1;\n    }\n    r\n}\n\n/**\n * @brief Return a size-Range array of values that describe whether an index `i` is in the range `0<=i<limit`\n * @details When evaluating variable-length loops of size `limit`, it is neccessary to iterate over a maximum bound defined at compile-time\n *          Any constraints or evaluations that occur where `i >= limit` must be discarded.\n *          This is most efficiently performed by using predicate `Field` values, where `predicate[i] = 0` if `i < limit`, otherwise `predicate[i] = 1`.\n *          This method efficiently generates such predicate values more efficiently than querying whether `i <= limit` at every iteration.\n *          Gate cost is 3 * Range\n **/\npub fn boundary_check<let Range: u32>(limit: u32) -> [Field; Range] {\n    let r = unsafe {\n        //@safety r contains claims about whether `r[i] >= limit`. the rest of this function checks this claim is correct\n        __boundary_check(limit)\n    };\n\n    let mut transition_index = 0;\n    // **\n    // We have an array of Field elements `r` such that:\n    // if i < limit, `r = 0`\n    // if i >= limit, `r = 1`\n    // We validate the predicate list `r` is correct by checking:\n    // 1. every r[i] element is 0 or 1\n    // 2. if r[i] = 1, r[i+1] must also be 1\n    // 3. if r[i] = 0 and r[i+1] = 1, then i == limit\n    // we check point 3 by tracking a `transition_index` variable, where\n    // transition_index += (1 - r[i]) * (r[i+1]) * i\n    // i.e. if r[i] == 0 and r[i+1] == 1, transition_index += i\n    //      else transition_index += 0\n    // NOTE: total constraint cost is 3 gates per iteration\n    // **\n    if Range > 0 {\n        for i in 0..Range - 1 {\n            assert_eq(r[i] * r[i], r[i]);\n            assert_eq(r[i] * r[i + 1], r[i]);\n            let idx = (r[i + 1] * (1 - r[i])) * (i as Field + 1);\n            transition_index = transition_index + idx;\n            std::as_witness(transition_index);\n        }\n        assert_eq(r[Range - 1] * r[Range - 1], r[Range - 1]);\n        transition_index = transition_index + (1 - r[Range - 1]) * limit as Field;\n        assert(transition_index == limit as Field);\n        r\n    } else {\n        [0; Range]\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_base64/v0.4.0/src/boundary_check.nr"},"71":{"source":"use super::defaults::{\n    BASE64_ELEMENTS_PER_CHUNK, BASE64_PADDING_CHAR, BYTES_PER_CHUNK, INVALID_DECODE_VALUE,\n};\n\npub use crate::boundary_check::boundary_check;\nuse crate::tables::{\n    BASE64_DECODE_BE_TABLE, BASE64_DECODE_BE_URL_TABLE, BASE64_DECODE_BE_URL_VAR_TABLE,\n    BASE64_DECODE_BE_VAR_TABLE,\n};\n\n/// Decoder methods that use the standard Base64 Alphabet (base64) specified in RFC 4648\n/// (https://datatracker.ietf.org/doc/html/rfc4648#section-4)\npub mod Base64DecodeBE {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 1, 0>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 1, 0>(input)\n    }\n}\n\n/// Decoder methods that use the standard Base64 Alphabet (base64) specified in RFC 4648\n/// (https://datatracker.ietf.org/doc/html/rfc4648#section-4), but WITHOUT padding\npub mod Base64DecodeBENoPad {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 0, 0>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 0, 0>(input)\n    }\n}\n\n/// Decoder methods that use the URL and Filename Safe Alphabet specified in RFC 4648\n/// https://datatracker.ietf.org/doc/html/rfc4648#section-5\npub mod Base64DecodeBEUrlSafe {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 0, 1>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 0, 1>(input)\n    }\n}\n\n/// Decoder methods that use the URL and Filename Safe Alphabet specified in RFC 4648\n/// https://datatracker.ietf.org/doc/html/rfc4648#section-5, but WITH padding added\npub mod Base64DecodeBEUrlSafeWithPad {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 1, 1>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 1, 1>(input)\n    }\n}\n\n/**\n * @brief Return a human-readable error if the input is invalid Base64\n * @details We constrain the decoding to be correct by using a lookup table to decode Base64.\n *          Validation is performed by batch-checking that no lookups returned an error state.\n *          This produces unhelpful error messages so we put this sanitised check in an unconstrained fn\n **/\nunconstrained fn __validate_decoded(decoded: Field, input_byte: u8, offset: u32) {\n    assert(\n        decoded != INVALID_DECODE_VALUE,\n        f\"DecodeError: invalid symbol {input_byte}, offset {offset}.\",\n    );\n}\n\n/**\n * @brief Given a variable-sized number of Base64 encoded characters, return a *claim* about how many are padding chars\n * @note The returned value is only a claim and must be validated\n **/\nunconstrained fn __get_num_padding_chars_var<let InputElements: u32>(\n    input: BoundedVec<u8, InputElements>,\n) -> (bool, bool) {\n    let len = input.len();\n    let r1 = if len > 1 {\n        input.get(len - 2) == BASE64_PADDING_CHAR\n    } else {\n        false\n    };\n    let r2 = if len > 0 {\n        input.get(len - 1) == BASE64_PADDING_CHAR\n    } else {\n        false\n    };\n    (r1, r2)\n}\n\n/**\n * @brief Take an array of Base64 values and convert back into ASCII\n *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n **/\nfn decode<let InputElements: u32, let OutputBytes: u32, let Pad: u1, let UseURLTable: u1>(\n    input: [u8; InputElements],\n) -> [u8; OutputBytes] {\n    let rem = OutputBytes % 3;\n    // Calculate the number of padding characters and the length of the input without padding\n    let num_padding_chars = if rem == 1 {\n        2\n    } else if rem == 2 {\n        1\n    } else {\n        0\n    };\n\n    // Assert that the output length & input length are correct\n    // Every 3 output chars will be encoded as 4 base64 input chars\n    let encoded_length = (OutputBytes + 2) / 3 * 4; // ceil(input * 4 / 3)\n    if Pad != 0 {\n        assert(\n            encoded_length == InputElements,\n            f\"DecodeError: invalid input length for specified output length. Expected {encoded_length} input elements, but got {InputElements}.\",\n        );\n        // enforce Base64 padding is valid\n        if num_padding_chars == 2 {\n            let offset = InputElements - 1;\n            assert(\n                input[offset] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n            let offset = InputElements - 2;\n            assert(\n                input[offset] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n        } else if num_padding_chars == 1 {\n            let offset = InputElements - 1;\n            assert(\n                input[InputElements - 1] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n        }\n    } else {\n        let expected = encoded_length - num_padding_chars;\n        assert(\n            encoded_length - num_padding_chars == InputElements,\n            f\"DecodeError: invalid input length for specified output length. Expected {expected} input elements, but got {InputElements}.\",\n        );\n    }\n\n    let mut result: [u8; OutputBytes] = [0; OutputBytes];\n    let num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n        + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    // validity_check = accumulator value that we add every output from BASE64_DECODE_BE_TABLE into.\n    // Invalid error states will return a lookup value of -2^32 , which will cause `validity_check` to fail a 32-bit range check.\n    // This batch-validation technique is more efficient than asserting every returned token is valid.\n    let mut validity_check: Field = 0;\n    if num_chunks > 0 {\n        let final_chunk = num_chunks - 1;\n\n        for i in 0..final_chunk {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                let input_byte = input[offset];\n                let decoded = if UseURLTable == 1 {\n                    BASE64_DECODE_BE_URL_TABLE[input_byte]\n                } else {\n                    BASE64_DECODE_BE_TABLE[input_byte]\n                };\n                validity_check += decoded;\n                slice += decoded as Field;\n                unsafe {\n                    //@safety get a sensible error message out if the decoding is invalid.\n                    // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                    // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                    // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                    // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                    __validate_decoded(decoded, input_byte, offset);\n                }\n            }\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n\n        // process the final chunk, which may contain padding\n        let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n        let byte_offset = final_chunk * BYTES_PER_CHUNK;\n        let base64_elements_in_final_chunk = if Pad != 0 {\n            InputElements - base64_offset - num_padding_chars\n        } else {\n            InputElements - base64_offset\n        };\n\n        // pack the base64 values into the field element\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            let offset = base64_offset + j;\n            let input_byte = input[offset];\n            let decoded = if UseURLTable == 1 {\n                BASE64_DECODE_BE_URL_TABLE[input_byte]\n            } else {\n                BASE64_DECODE_BE_TABLE[input_byte]\n            };\n            validity_check += decoded;\n            slice += decoded as Field;\n            unsafe {\n                //@safety get a sensible error message out if the decoding is invalid.\n                // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                __validate_decoded(decoded, input_byte, offset);\n            }\n        }\n\n        // If any lookups returned an error state, this 32-bit range check will fail.\n        validity_check.assert_max_bit_size::<32>();\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n        for i in 0..num_bytes_in_final_chunk {\n            result[byte_offset + i] = slice_bytes[i];\n        }\n    }\n\n    result\n}\n\n/**\n * @brief Take a variable-length vector of Base64 values and convert back into ASCII\n *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n **/\npub fn decode_var<let InputElements: u32, let OutputBytes: u32, let Pad: u1, let UseURLTable: u1>(\n    input: BoundedVec<u8, InputElements>,\n) -> BoundedVec<u8, OutputBytes> {\n    // We don't know how many padding bytes the input string contains - we use an unconstrained fn to return a *claim* that we will later validate\n    let (has_first_padding_byte_claim, has_second_padding_byte_claim) = if (Pad == 1) {\n        unsafe {\n            //@safety get claims about whether the bytes input[input.len() - 2] and input[input.len() - 1] are padding chars\n            // we validate this later on by requiring these characters equal BASE64_PADDING_CHAR by looking up BASE64_DECODE_BE_VAR_TABLE\n            crate::decoder::__get_num_padding_chars_var::<InputElements>(input)\n        }\n    } else {\n        (false, false)\n    };\n\n    // num_padding_chars is a claim that depends on has_first_padding_byte_claim and has_second_padding_byte_claim being correct\n    let num_padding_chars: u32 = if Pad == 1 {\n        has_first_padding_byte_claim as u32 + has_second_padding_byte_claim as u32\n    } else {\n        0\n    };\n\n    let input_length = input.len();\n    let input = input.storage();\n\n    // boundary_flags = array of Field elements.\n    // if `i < input_length, boundary_flags[i] = 0`\n    // if `i >= input_length, boundary_flags[i+1] = 1`\n    // used as cheap(ish) predicates when iterating over bounded vector elements\n    let boundary_flags: [Field; InputElements] = boundary_check(input_length);\n    let mut result: [u8; OutputBytes] = [0; OutputBytes];\n\n    let max_num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n        + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    let mut validity_check: Field = 0;\n    // if statement should be known at compile time\n    if max_num_chunks > 0 {\n        let final_chunk: u32 = max_num_chunks - 1;\n\n        for i in 0..final_chunk {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                let input_byte = input[offset];\n\n                let mut decode_index: Field = 0;\n                if Pad == 1 {\n                    let mut might_be_second_padding_char = 0;\n                    let mut might_be_first_padding_char = 0;\n                    // These if statements should not cost extra gates as the condition is known at compile time\n                    if (offset + 2 < InputElements) {\n                        might_be_first_padding_char = (1 - boundary_flags[offset])\n                            * (1 - boundary_flags[offset + 1])\n                            * boundary_flags[offset + 2];\n                        might_be_second_padding_char =\n                            (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                    } else if (offset + 1 < InputElements) {\n                        // might_be_second_padding_char = (1 - boundary_flags[offset]) + (boundary_flags[offset + 1]);\n                        might_be_first_padding_char =\n                            (1 - boundary_flags[offset]) * (1 - boundary_flags[offset + 1]);\n                        might_be_second_padding_char =\n                            (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                    } else // last character\n                    {\n                        might_be_first_padding_char = 0;\n                        might_be_second_padding_char = (1 - boundary_flags[offset]);\n                    }\n\n                    // Cases where we need to require a padding character is present:\n                    // Case 1: we are at byte position `input.len() - 2` and `has_first_padding_byte_claim = true`\n                    // Case 2: we are at byte position `input.len() - 1` and `has_second_padding_byte_claim = true`\n                    let require_padding = might_be_first_padding_char\n                        * has_first_padding_byte_claim as Field\n                        + (might_be_second_padding_char * has_second_padding_byte_claim as Field);\n\n                    // The `decode_index` is used to map the input Base64 character into an output decoded character.\n                    // We know `input_byte` is in the range 0-255 , so we use a size 768 lookup to handle the following 3 cases:\n                    // Case 1 (index range 0-255): No special cases. We decode the Base64 ASCII char into an ASCII char\n                    // Case 2 (index range 256-511): We have exceeded the length of the input. The only valid input is 0, which decodes to 0 (all other byte values return an error state)\n                    // Case 3 (index range 512-767): A claim has been made that a padding byte is present, and we are at the appropriate byte location to check this.\n                    //                               The only valid input is BASE64_PADDING_CHAR, which decodes to 0. All other inputs return an error state\n                    decode_index =\n                        input_byte as Field + boundary_flags[offset] * 256 + require_padding * 512;\n                } else {\n                    decode_index = input_byte as Field + boundary_flags[offset] * 256;\n                }\n                let decoded = if UseURLTable == 1 {\n                    BASE64_DECODE_BE_URL_VAR_TABLE[decode_index]\n                } else {\n                    BASE64_DECODE_BE_VAR_TABLE[decode_index]\n                };\n\n                validity_check += decoded;\n                slice += decoded;\n                unsafe {\n                    //@safety get a sensible error message out if the decoding is invalid.\n                    // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                    // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                    // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                    // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                    __validate_decoded(decoded, input_byte, offset);\n                }\n            }\n            // convert the decoded slice into bytes and populate result array\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n        // process the final chunk\n        let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n        let byte_offset = final_chunk * BYTES_PER_CHUNK;\n        // might include padding characters\n        let base64_elements_in_final_chunk = InputElements - base64_offset;\n\n        // pack the base64 values into the field element\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            let offset = base64_offset + j;\n            let input_byte = input[offset];\n\n            let mut decode_index: Field = 0;\n            if Pad == 1 {\n                let mut might_be_second_padding_char = 0;\n                let mut might_be_first_padding_char = 0;\n                // These if statements should not cost extra gates as the condition is known at compile time\n                if (offset + 2 < InputElements) {\n                    might_be_first_padding_char = (1 - boundary_flags[offset])\n                        * (1 - boundary_flags[offset + 1])\n                        * boundary_flags[offset + 2];\n                    might_be_second_padding_char =\n                        (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                } else if (offset + 1 < InputElements) {\n                    // might_be_second_padding_char = (1 - boundary_flags[offset]) + (boundary_flags[offset + 1]);\n                    might_be_first_padding_char =\n                        (1 - boundary_flags[offset]) * (1 - boundary_flags[offset + 1]);\n                    might_be_second_padding_char =\n                        (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                } else // last character\n                {\n                    might_be_first_padding_char = 0;\n                    might_be_second_padding_char = (1 - boundary_flags[offset]);\n                }\n\n                let require_padding = might_be_first_padding_char\n                    * has_first_padding_byte_claim as Field\n                    + (might_be_second_padding_char * has_second_padding_byte_claim as Field);\n                decode_index =\n                    input_byte as Field + boundary_flags[offset] * 256 + require_padding * 512;\n            } else {\n                decode_index = input_byte as Field + boundary_flags[offset] * 256;\n            }\n            let decoded = if UseURLTable == 1 {\n                BASE64_DECODE_BE_URL_VAR_TABLE[decode_index]\n            } else {\n                BASE64_DECODE_BE_VAR_TABLE[decode_index]\n            };\n            unsafe {\n                //@safety get a sensible error message out if the decoding is invalid.\n                // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                __validate_decoded(decoded, input_byte, offset);\n            }\n            validity_check += decoded;\n            slice += decoded as Field;\n        }\n\n        validity_check.assert_max_bit_size::<32>();\n\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n        for i in 0..num_bytes_in_final_chunk {\n            result[byte_offset + i] = slice_bytes[i];\n        }\n    }\n\n    if Pad == 1 {\n        assert(input_length % 4 == 0, \"base64 encoded strings must be a multiple of 4 bytes\");\n    }\n\n    assert_eq(\n        has_first_padding_byte_claim,\n        has_second_padding_byte_claim * has_first_padding_byte_claim,\n        \"if first byte contains padding so must the second\",\n    );\n    let output_length = ((input_length * 3) / 4) - num_padding_chars;\n    BoundedVec::from_parts_unchecked(result, output_length)\n}\n\n#[test]\nfn test_decode_empty() {\n    let input: [u8; 0] = [];\n    let expected: [u8; 0] = [];\n    let result = Base64DecodeBE::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_padding() {\n    // f\n    let input: [u8; 4] = [90, 103, 61, 61];\n    let expected: [u8; 1] = [102];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 4] = [90, 109, 56, 61];\n    let expected: [u8; 2] = [102, 111];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard_no_pad() {\n    // f\n    let input: [u8; 2] = [90, 103];\n    let expected: [u8; 1] = [102];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 3] = [90, 109, 56];\n    let expected: [u8; 2] = [102, 111];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_max_byte() {\n    let expected: [u8; 1] = [255];\n\n    let input: [u8; 4] = [47, 119, 61, 61]; // \"/w==\"\n    let result: [u8; 1] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [47, 119]; // \"/w\"\n    let result: [u8; 1] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 4] = [95, 119, 61, 61]; // \"_w==\"\n    let result: [u8; 1] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [95, 119]; // \"_w\"\n    let result: [u8; 1] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 255, offset 0\")]\nfn test_decode_invalid() {\n    let input: [u8; 2] = [255, 255];\n    let _: [u8; 1] = Base64DecodeBENoPad::decode(input);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_standard_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 95, offset 0\")]\nfn test_decode_underscore_with_standard() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let _: [u8; 2] = Base64DecodeBE::decode(input);\n}\n\n#[test]\nfn test_decode_url_safe_with_pad() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafeWithPad::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 47, offset 0\")]\nfn test_decode_slash_with_url_safe() {\n    // test decoding / and +\n    let input: [u8; 3] = [47, 43, 65];\n    let _: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n}\n\n#[test]\nfn test_decode_url_safe() {\n    // test decoding _ and -\n    let input: [u8; 3] = [95, 45, 65];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_url_safe_no_pad_fail_with_padding() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_ascii() {\n    // base64: SGVsbG8gV29ybGQh\n    let input: [u8; 16] = [83, 71, 86, 115, 98, 71, 56, 103, 86, 50, 57, 121, 98, 71, 81, 104];\n    // \"Hello World!\"\n    let expected: [u8; 12] = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];\n\n    // all configurations should decode the same way\n    let result: [u8; 12] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_utf8() {\n    // base64: 44GT44KT44Gr44Gh44Gv44CB5LiW55WM77yB\n    let input: [u8; 36] = [\n        52, 52, 71, 84, 52, 52, 75, 84, 52, 52, 71, 114, 52, 52, 71, 104, 52, 52, 71, 118, 52, 52,\n        67, 66, 53, 76, 105, 87, 53, 53, 87, 77, 55, 55, 121, 66,\n    ];\n    // non-ascii utf-8: \"Hello, World!\" in Japanese\n    let expected: [u8; 27] = [\n        227, 129, 147, 227, 130, 147, 227, 129, 171, 227, 129, 161, 227, 129, 175, 227, 128, 129,\n        228, 184, 150, 231, 149, 140, 239, 188, 129,\n    ];\n\n    // all configurations should decode the same way\n    let result: [u8; 27] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_multi_chunks() {\n    // \"The quick brown fox jumps over the lazy dog.\"\n    let expected: [u8; 44] = [\n        84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32,\n        106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121,\n        32, 100, 111, 103, 46,\n    ];\n\n    let input: [u8; 60] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52, 61,\n    ];\n    let result: [u8; 44] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 59] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52,\n    ];\n    let result = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_with_padding() {\n    // Raw bh: GxMlgwLiypnVrE2C0Sf4yzhcWTkAhSZ5+WERhKhXtlU=\n    // Translated directly to ASCII\n    let input: [u8; 44] = [\n        71, 120, 77, 108, 103, 119, 76, 105, 121, 112, 110, 86, 114, 69, 50, 67, 48, 83, 102, 52,\n        121, 122, 104, 99, 87, 84, 107, 65, 104, 83, 90, 53, 43, 87, 69, 82, 104, 75, 104, 88, 116,\n        108, 85, 61,\n    ];\n\n    let result: [u8; 32] = Base64DecodeBE::decode(input);\n    let expected: [u8; 32] = [\n        27, 19, 37, 131, 2, 226, 202, 153, 213, 172, 77, 130, 209, 39, 248, 203, 56, 92, 89, 57, 0,\n        133, 38, 121, 249, 97, 17, 132, 168, 87, 182, 85,\n    ];\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_empty() {\n    let input: BoundedVec<u8, 0> = BoundedVec::new();\n    let expected: BoundedVec<u8, 0> = BoundedVec::new();\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_padding() {\n    // f\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 103, 61, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102]);\n    let result = Base64DecodeBE::decode_var(input);\n    println(f\"result {result}\");\n    println(f\"expected {expected}\");\n\n    assert(result == expected);\n\n    // fo\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 56, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111]);\n    let result = Base64DecodeBE::decode_var(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: BoundedVec<u8, 8> = BoundedVec::from_array([90, 109, 57, 118]);\n    let expected: BoundedVec<u8, 6> = BoundedVec::from_array([102, 111, 111]);\n    let result = Base64DecodeBE::decode_var(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_standard_no_pad() {\n    // f\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 103]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    // fo\n    println(f\"result {result}, expected {expected}\");\n\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 56]);\n\n    assert(result == expected);\n\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 57, 118]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111, 111]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 61, offset 3\")]\nfn test_decode_var_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([47, 43, 65, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([255, 224]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var() {\n    // base64: \"SGVsbG8sIFdvcmxkIQ==\"\n    let input: BoundedVec<u8, 24> = BoundedVec::from_array([\n        83, 71, 86, 115, 98, 71, 56, 115, 73, 70, 100, 118, 99, 109, 120, 107, 73, 81, 61, 61,\n    ]);\n    // base64: \"SGVsbG8sIFdvcmxkIQ\"\n    let input_no_pad: BoundedVec<u8, 24> = BoundedVec::from_array([\n        83, 71, 86, 115, 98, 71, 56, 115, 73, 70, 100, 118, 99, 109, 120, 107, 73, 81,\n    ]);\n    // \"Hello, World!\"\n    let expected: BoundedVec<u8, 16> =\n        BoundedVec::from_array([72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]);\n\n    // all configurations should decode the same way\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBENoPad::decode_var(input_no_pad);\n    println(f\"result {result}, expected {expected}\");\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafeWithPad::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafe::decode_var(input_no_pad);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_multi_chunks() {\n    // base64: \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"\n    let input: BoundedVec<u8, 64> = BoundedVec::from_array([\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52, 61,\n    ]);\n    // base64: \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"\n    let input_no_pad: BoundedVec<u8, 64> = BoundedVec::from_array([\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52,\n    ]);\n    // \"The quick brown fox jumps over the lazy dog.\"\n    let expected: BoundedVec<u8, 48> = BoundedVec::from_array([\n        84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32,\n        106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121,\n        32, 100, 111, 103, 46,\n    ]);\n\n    // all configurations should give the same encoding\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBENoPad::decode_var(input_no_pad);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafeWithPad::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafe::decode_var(input_no_pad);\n    assert(result == expected);\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_base64/v0.4.0/src/decoder.nr"},"109":{"source":"use crate::constants::TWO_POW_120;\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> Field {\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0] as Field\n    } else if N == 2 {\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n        (limbs[0] + limbs[1] * TWO_POW_120) as Field\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        (\n            limbs[0] as Field\n                + limbs[1] as Field * TWO_POW_120 as Field\n                + limbs[2] as Field * TWO_POW_120 as Field * TWO_POW_120 as Field\n        )\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(field: Field) -> [u128; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result: [u128; N] = unsafe { __from_field::<N>(field) };\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<_, N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let TWO_POW_120_FIELD = TWO_POW_120 as Field;\n        let field_val = if N < 2 {\n            result[0] as Field\n        } else if N == 2 {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field + result[1] as Field * TWO_POW_120_FIELD\n        } else {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field\n                + result[1] as Field * TWO_POW_120_FIELD\n                + result[2] as Field * TWO_POW_120_FIELD * TWO_POW_120_FIELD\n        };\n        assert_eq(field_val, field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\n\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[u128; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [u128; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: u128 = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as u128 + (1 - need_more_bytes as u128));\n                limb += byte as u128 * need_more_bytes as u128;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [u128; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, _, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [u128; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        // result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n    predicate: bool,\n) -> [u128; N] {\n    let mut result: [u128; N] = lhs;\n    for i in 0..N {\n        // (lhs[i] - rhs[i]) * predicate + rhs[i]\n        // in case lhs < rhs, this will underflow so we have to do one extra multiplication to prevent it\n        result[i] = lhs[i] * predicate as u128 + rhs[i] * (1 - predicate as u128);\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120 as Field;\n        r *= TWO_POW_120 as Field;\n        modulus_mod_n *= TWO_POW_120 as Field;\n        l += lhs[N - i - 1] as Field;\n        r += rhs[N - i - 1] as Field;\n        modulus_mod_n += params.modulus[N - i - 1] as Field;\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [u128; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [u128; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = (modulus[i] as Field - val[i] as Field);\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += (borrow_flags[0] as Field * TWO_POW_120 as Field);\n    for i in 1..N - 1 {\n        p_minus_self[i] +=\n            (borrow_flags[i] as Field * TWO_POW_120 as Field - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= (borrow_flags[N - 2] as Field);\n    validate_in_range::<_, _, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<T, let N: u32, let MOD_BITS: u32>(limbs: [T; N])\nwhere\n    T: Into<Field>,\n{\n    for i in 0..(N - 1) {\n        limbs[i].into().assert_max_bit_size::<120>();\n    }\n\n    limbs[N - 1].into().assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [u128; N]) {\n    for i in 0..(N) {\n        (limbs[i] as Field).assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    (limbs[N - 1] as Field).assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [u128; N], rhs: [u128; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, _, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] as Field - rhs[0] as Field + addend[0] - result[0] as Field - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120 as Field;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] as Field - rhs[i] as Field + addend[i]\n            - result[i] as Field\n            - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] as Field - rhs[N - 1] as Field + addend[N - 1]\n        - result[N - 1] as Field\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb = modulus[0] + (borrow_flags[0] as u128 * TWO_POW_120) - val[0] - result[0];\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] + (borrow_flags[i] as u128 * TWO_POW_120)\n                - val[i]\n                - result[i]\n                - borrow_flags[i - 1] as u128;\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as u128;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            // __add_u128(params, lhs, rhs)\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [u128; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] as Field + rhs[0] as Field\n            - subtrahend[0] as Field\n            - result[0] as Field\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] as Field + rhs[i] as Field\n                - subtrahend[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120 as Field;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = lhs[N - 1] as Field + rhs[N - 1] as Field\n            - subtrahend[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [u128; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n            + addend[0] as Field\n            + lhs[0] as Field\n            - rhs[0] as Field\n            - result[0] as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n                + addend[i] as Field\n                + lhs[i] as Field\n                - rhs[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = addend[N - 1] as Field + lhs[N - 1] as Field\n            - rhs[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/constrained_ops.nr"},"110":{"source":"use crate::utils::split_bits;\n\nuse crate::constants::{TWO_POW_120, TWO_POW_126, TWO_POW_246};\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\n\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, MOD_BITS, params.modulus);\n    assert(remainder == [0; N]);\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] as Field * params.modulus[j] as Field;\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = TWO_POW_246; // 2^{246}\n    let borrow_carry: Field = TWO_POW_126; // 2^{246 - 120} = 2^{126}\n    let downshift: Field = 1 / (TWO_POW_120 as Field);\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits =\n        (mulout_p[0] - mulout_n[0] + (borrow_flags[0] as Field * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n    flags: [bool; M],\n) -> ([u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [u128; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [u128; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + (modulus2[j] as Field - x[i][j] as Field) as u128;\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [u128; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] as Field * rhs[k][j] as Field);\n            }\n        }\n        mulout[i] += add[i] as Field;\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout: [Field; (N * 2)] = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, k, params.modulus);\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([u128; N], [u128; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [u128; N] = params.double_modulus;\n\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i] as Field;\n                    t0[k][i] += double_modulus[i] as Field;\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i] as Field;\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i] as Field;\n                    t1[k][i] += double_modulus[i] as Field;\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i] as Field;\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i] as Field;\n                t4[i] += double_modulus[i] as Field;\n            } else {\n                t4[i] += linear_terms[j][i] as Field;\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term =\n                        t0[k][i] * t1[k][j] - quotient[i] as Field * params.modulus[j] as Field;\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j] as Field;\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] as Field * params.modulus[j] as Field;\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] as Field * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/expressions.nr"},"112":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [u128; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result: [u128; N] = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: u128 = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as u128;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: u128 = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as u128;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [u128; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = (val[i] as Field).to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = (val[N - 1] as Field).to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/serialization.nr"},"113":{"source":"use crate::constants::{TWO_POW_119, TWO_POW_120, TWO_POW_60};\nuse crate::fns::unconstrained_ops::{__add, __gte, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\nuse crate::utils::msb::get_msb64;\nuse crate::utils::split_bits::__normalize_limbs;\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [u128; N] {\n    let mut x = field;\n    let x_first_u128 = (x as u128);\n    let first: u128 = x_first_u128 % TWO_POW_120;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_120 as Field);\n    let x_second_u128 = (x as u128);\n    let second = x_second_u128 % TWO_POW_120;\n    x = (x - (second as Field)) / (TWO_POW_120 as Field);\n    let x_third_u128 = (x as u128);\n    let third = x_third_u128 % TWO_POW_120;\n    let mut result: [u128; N] = [0; N];\n    if N > 2 {\n        result[0] = first;\n        result[1] = second;\n        result[2] = third;\n    }\n    if N == 2 {\n        result[0] = first;\n        result[1] = second;\n    }\n    if N == 1 {\n        result[0] = first;\n    }\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [u128; N] = params.modulus;\n    flags[0] = modulus[0] < val[0];\n    for i in 1..N - 1 {\n        flags[i] = modulus[i] < val[i] + flags[i - 1] as u128;\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N]) {\n    let mut a = lhs;\n    let mut b = rhs;\n    let underflow = !__gte(lhs, rhs);\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 1;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = a[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = b[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = (borrow * TWO_POW_120 + add_term - sub_term);\n\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> ([u128; N], [bool; N]) {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow_in: u128 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let sub_term = val[i] + borrow_in;\n        let borrow = (sub_term > params.modulus[i]) as u128;\n        result[i] = borrow * TWO_POW_120 + params.modulus[i] - sub_term;\n\n        borrow_in = borrow;\n        borrow_flags[i] = borrow as bool;\n    }\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N], bool) {\n    let add_res = __helper_add(lhs, rhs);\n    let overflow = __gte(add_res, params.modulus);\n\n    let mut subtrahend: [u128; N] = [0; N];\n    let mut result: [u128; N] = [0; N];\n\n    if overflow {\n        subtrahend = params.modulus;\n    }\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term = lhs[i] + rhs[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry as u128;\n\n        let sub_term = subtrahend[i] + borrow_in;\n\n        let mut borrow: u128 = (sub_term > add_term) as u128;\n        result[i] = borrow * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow as u128;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N], bool) {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let underflow = !__gte(lhs, rhs);\n    let addend: [u128; N] = if underflow { params.modulus } else { [0; N] };\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = lhs[i] + addend[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = rhs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = borrow as u128 * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [u128; 2 * N],\n    redc_param: [u128; N],\n    k: u32,\n    modulus: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mulout_field: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout_field[i + j] += x[i] as Field * redc_param[j] as Field;\n        }\n    }\n\n    let mulout: [u128; 3 * N] = __normalize_limbs(mulout_field, 3 * N - 1);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient = __shr(mulout, (k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n    // the quotient has bunch of zero limbs now, so we can just take the first N limbs as a result\n    let mut smaller_quotient = [0; N];\n    for i in 0..N {\n        smaller_quotient[i] = quotient[i] as u128;\n    }\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = __into_field_array(quotient);\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] +=\n                partial_quotient_full[i] * modulus[j] as Field;\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    let long_quotient_mul_modulus_normalized: [u128; 2 * N] =\n        __normalize_limbs(quotient_mul_modulus_normalized, 2 * N);\n    let mut quotient_mul_modulus_normalized: [u128; N] = [0; N];\n    for i in 0..N {\n        quotient_mul_modulus_normalized[i] = long_quotient_mul_modulus_normalized[i];\n    }\n\n    let mut long_remainder = __helper_sub(x, long_quotient_mul_modulus_normalized);\n    // ugly but have to remove a bunch of zeros from this\n    let mut remainder = [0; N];\n    for i in 0..N {\n        remainder[i] = long_remainder[i];\n    }\n    // barrett reduction is quirky so might need to remove a few modulus from the remainder\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n\n    (smaller_quotient, remainder)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let mut target = __helper_sub(params.modulus, one);\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target = __shr1(target);\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [u128; N],\n    p_minus_one_over_two: [u128; N],\n) -> (bool, [u128; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [u128; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = exped == neg_one;\n    let mut result: (bool, [u128; N]) = (found, target);\n    if (!found) {\n        let _target: [u128; N] = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [u128; N] {\n    let mut target: [u128; N] = __one();\n    let p_minus_one_over_two = __shr1(__helper_sub(params.modulus, __one()));\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [u128; N],\n    i: u32,\n) -> u32 {\n    let one: [u128; N] = __one();\n    let is_one = t2m == one;\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n\npub(crate) unconstrained fn __increment<let N: u32>(val: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 1;\n    for i in 0..N {\n        let mut add_term = (val[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift = (120 - limb_shift) as u8;\n    let mask: u128 = (((1 as u128) << limb_shift) - 1) << remainder_shift;\n    result[0] = (input[0 + num_shifted_limbs] >> limb_shift);\n    for i in 1..(N - num_shifted_limbs) {\n        let value = input[i + num_shifted_limbs];\n        result[i] = value >> limb_shift;\n        let remainder: u128 = (value << remainder_shift) & mask;\n        result[i - 1] = result[i - 1] + remainder;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shl<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift: u8 = 120 - limb_shift as u8;\n\n    // 83\n    // limb shift = 1\n    // inside shift = 19 bits to the left\n    // meaning we have 19 carry bits and 41 remainder bits\n    let mask: u128 = (1 as u128 << 120) - 1;\n    //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n    let value = input[0];\n\n    let mut remainder = (value >> remainder_shift);\n    result[num_shifted_limbs] = (value << limb_shift) & mask;\n\n    // shift 84. num shifted = 1\n    for i in 1..((N) - num_shifted_limbs) {\n        let value = input[i];\n        let upshift = ((value << limb_shift) + remainder) & mask;\n        result[i + num_shifted_limbs] = upshift;\n        remainder = (value >> remainder_shift);\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_sub<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    for i in 0..N {\n        borrow = ((rhs[i] + borrow_in) > lhs[i]) as u128;\n        let sub = (borrow << 120) + lhs[i] as u128 - rhs[i] as u128 - borrow_in;\n        result[i] = sub;\n        borrow_in = borrow;\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_add<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr1<let N: u32>(mut input: [u128; N]) -> [u128; N] {\n    let value = input[N - 1];\n    input[N - 1] = value >> 1;\n\n    let mut remainder = (value & 1) << 119;\n\n    for i in 1..N {\n        let value = input[N - 1 - i];\n        input[N - 1 - i] = (value >> 1) + remainder;\n        remainder = (value << 119) & TWO_POW_119;\n    }\n    input\n}\n\npub(crate) unconstrained fn __get_msb<let N: u32>(val: [u128; N]) -> u32 {\n    let mut count = 0;\n    for i in 0..N {\n        let v = val[((N) - 1 - i)];\n        let v_low = v as u64 % TWO_POW_60 as u64;\n        let v_high = ((v - v_low as u128) / TWO_POW_60) as u64;\n        if (v_high > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2)) + get_msb64(v_high);\n            break;\n        }\n        if (v_low > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2 + 1)) + get_msb64(v_low);\n            break;\n        }\n    }\n    count\n}\n\npub(crate) fn __get_bit<let N: u32>(input: [u128; N], bit: u32) -> bool {\n    let segment_index: u32 = bit / 120;\n    let uint_index = bit % 120;\n    let limb: u128 = input[segment_index];\n    let value = (limb >> uint_index as u8) & 1;\n    value == 1\n}\n\npub(crate) fn __into_field_array<let N: u32>(input: [u128; N]) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        result[i] = input[i] as Field;\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/unconstrained_helpers.nr"},"114":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __get_bit, __get_msb, __helper_add, __helper_sub, __increment,\n    __multiplicative_generator, __primitive_root_log_size, __shl, __shr,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse super::unconstrained_helpers::__shr1;\n\npub(crate) unconstrained fn __one<let N: u32>() -> [u128; N] {\n    let mut limbs: [u128; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [u128; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> [u128; N] {\n    let f: [u128; N] = limbs;\n    __helper_sub(params.modulus, f)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    // check if the result is greater than the modulus\n    if __gte(result, params.modulus) {\n        __helper_sub(result, params.modulus)\n    } else {\n        result\n    }\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += (lhs[i] as Field * rhs[j] as Field);\n        }\n    }\n    let to_reduce: [u128; (N * 2)] = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(to_reduce, params.redc_param, MOD_BITS, params.modulus);\n    // ([0; N], [0; N])\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    let inv_divisor: [u128; N] = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut quotient: [u128; N] = [0; N];\n    let mut remainder: [u128; N] = numerator;\n\n    let b = divisor;\n    let numerator_msb = __get_msb(numerator);\n    let divisor_msb = __get_msb(divisor);\n    if divisor_msb > numerator_msb {\n        ([0; N], numerator)\n    } else {\n        let mut bit_difference = __get_msb(remainder) - __get_msb(divisor);\n        let mut accumulator: [u128; N] = __one();\n        let mut divisor = __shl(divisor, bit_difference);\n        accumulator = __shl(accumulator, bit_difference);\n\n        if (__gte(divisor, __increment(remainder))) {\n            divisor = __shr1(divisor);\n            accumulator = __shr1(accumulator);\n        }\n\n        for _ in 0..(N * 120) {\n            if (__gte(remainder, b) == false) {\n                break;\n            }\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (__gte(remainder, divisor)) {\n                remainder = __helper_sub(remainder, divisor);\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient = __helper_add(quotient, accumulator);\n            }\n            divisor = __shr1(divisor); // >>= 1;\n            accumulator = __shr1(accumulator); //  >>= 1;\n        }\n\n        (quotient, remainder)\n    }\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    let one = __one();\n    let exp = __helper_sub(params.modulus, __helper_add(one, one));\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n    exponent: [u128; N],\n) -> [u128; N] {\n    let x = exponent;\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [u128; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if __get_bit(x, num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n) -> [[u128; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]; M] = std::mem::zeroed();\n\n    for i in 0..M {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]; M] = [[0; N]; M];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..M {\n        let idx = M - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]],\n) -> [[u128; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]] = [];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result = result.push_front(T0);\n        } else {\n            result = result.push_front([0; N]);\n        };\n    }\n\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [u128; N],\n) -> std::option::Option<[u128; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one = __one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let Q = __shr(\n        __helper_sub(params.modulus, one),\n        primitive_root_log_size - 1,\n    );\n    let two = __helper_add(one, one);\n    let Q_minus_one_over_two = __shr(__helper_sub(Q, two), 2);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [u128; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __gte<let N: u32, let MOD_BITS: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let mut result = false;\n    let mut early_exit = false;\n    for i in 0..(N) {\n        let idx = (N) - 1 - i;\n        if (rhs[idx] == lhs[idx]) {\n            continue;\n        }\n\n        result = rhs[idx] < lhs[idx];\n        early_exit = true;\n        break;\n    }\n    if early_exit {\n        result\n    } else {\n        lhs[0] == rhs[0]\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/unconstrained_ops.nr"},"116":{"source":"pub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [u128; N],\n\n    // @brief double_modulus: used when performing negations and subtractions\n    // @note we borrow 1 from the last limb. This is for easing up the operations that might underflow\n    pub double_modulus: [u128; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [u128; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [u128; N],\n        redc_param: [u128; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [u128; N]) -> [u128; N] {\n    let TWO_POW_120: u128 = 0x1000000000000000000000000000000;\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (modulus[i] + modulus[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/params.nr"},"117":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::Neg;\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [u128; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {\n\n    pub fn zero(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [u128; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::zero(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [u128]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [u128; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    pub fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    pub fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    pub fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    pub fn get_limbs(self) -> [u128; N] {\n        self.limbs\n    }\n\n    pub fn get_limb(self, idx: u32) -> u128 {\n        self.limbs[idx]\n    }\n\n    pub fn set_limb(&mut self, idx: u32, value: u128) {\n        self.limbs[idx] = value;\n    }\n\n    pub unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    pub unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    pub unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    pub fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    pub fn validate_in_range(self) {\n        validate_in_range::<_, _, MOD_BITS>(self.limbs);\n    }\n\n    pub fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    pub fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    pub fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    pub fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/runtime_bignum.nr"},"124":{"source":"use crate::constants::TWO_POW_120;\n\nunconstrained fn split_120_bits(mut x: Field) -> (u128, u128) {\n    // Here we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low = (x as u128) % TWO_POW_120;\n    let high = ((x - low as Field) / TWO_POW_120 as Field) as u128;\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [u128; N] {\n    let mut normalized: [u128; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n        normalized[i] = lo as u128;\n        next = input[i + 1] + hi as Field;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo as u128;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/utils/split_bits.nr"},"135":{"source":"use dep::bignum::RuntimeBigNum;\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\nmod tests {\n\n    use crate::types::RBN2048;\n    use super::verify_sha256_pkcs1v15;\n    use bignum::params::BigNumParams;\n    use bignum::RuntimeBigNum;\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_1024() {\n        // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170, 193,\n            96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n        ];\n\n        let params: BigNumParams<9, 1024> = BigNumParams::new(\n            false,\n            [\n                0xab238ad9cb37979a43aefbf10be8fb,\n                0x31347febe45fe8c2dac1dd30900704,\n                0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n                0x5eac6390f7873fe97ff9bb14a173ea,\n                0xbc41f700c91fd733a2c63177bbdbd4,\n                0x41442bd58769a3595b659a2ec9c6be,\n                0x4ddc91395f330382aa2e2d3fbe147,\n                0x3d008ff255a0bc71c7887f5728ba1,\n                0xb640c3a8f511c64e,\n            ],\n            [\n                0x5d53d2634c6a0918266043968ce263,\n                0x5dd4be3dce0323a492ee9340aec4db,\n                0xf82d0e2e5c8319f01a460c72c01854,\n                0x236e6fc6e62e8a1d522acda5fb3892,\n                0xdaf755619d66e580901aa224d03174,\n                0x8366291616480e7e1f202dbcedda87,\n                0x40ba1202537d1e94561ccc05265586,\n                0x69b993d857ba89ea5de9822aeb4b93,\n                0x167968c0000761a273,\n            ],\n        );\n\n        let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xc3850e84ea02da3f028ff422f4d6a9,\n                0x9761f0bd9021f76d45c60df0670a19,\n                0xc1ede421a43607ab623ed4d5a17fc8,\n                0x86197b4315206f4d53200b42555831,\n                0xe95783b69db28c26a83706f39d04cd,\n                0x18b178dc1a9ec76fb22b57e4dfa703,\n                0xdd0e19cd5a09ab48e7af4d0e3470e3,\n                0x10004dfab1cf91304e80e6baa4dfc7,\n                0x241c3fd77b90adef,\n            ],\n        };\n\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n    }\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_2048() {\n        // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131, 166,\n            79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n        ];\n\n        let params: BigNumParams<18, 2048> = BigNumParams::new(\n            false,\n            [\n                0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n                0xbfb937fc4d3cf02cc0af780f3cab44,\n                0xd20637ef7adcf5d238ee87bccc9bca,\n                0xb9db4f2663108e2f8b673f7612ae8b,\n                0x85f894ef669b36bfd3d86b0a28873,\n                0xdcc70e1884e38b8229cce3b884121d,\n                0x35488d1138e0b03e1676f7f5d8a5b3,\n                0xe1a97820e7dcbb4eab35c9b71bb273,\n                0x97d19eb3c63249ddbfcff915863f54,\n                0x3a78c7af6da0f6af0d67b1ca4b6065,\n                0xd7a3c433c020f624821e5e678c7d69,\n                0x52d5b53240feae82ffea3d2a3d9b09,\n                0xb8aad5e19e2163f68997c6fdd71906,\n                0x5db432d06e8b0bf59511100c7894e2,\n                0xadc0bbc4c54da10d1cc88438ea3127,\n                0xece1cf6a1501109cd2734d5893c8d9,\n                0x7196b90acdf06c31b1288064fd0c27,\n                0xc8,\n            ],\n            [\n                0x1b1deccf4dbde852c34a5d6908a0f,\n                0xbc9e5bdab22f023fbcca58692bccf5,\n                0x1f65439685623e45396ff55751c3bf,\n                0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n                0x5ca2e8e3048243c16c708a8030ab0d,\n                0x30079bfeb1fa51e5501581173ca19c,\n                0xff8d5f6bea485fdcc2716327f69ab4,\n                0x36b599d81589416b5b5f037986b999,\n                0x75612e34a4ff29f0a19a7823512f58,\n                0x288b6897929b54c3b26a5faa07c00f,\n                0x4b5675fa13ab7444f1f047d3eb1bbe,\n                0x6ba0ac610ef9f267ab30fe25bb1c84,\n                0xa386b48ee03168d5cea3ecb9dc901f,\n                0xacf1a01f7dba44e050c976142fb1f6,\n                0x97a63b5cb7efc60d3502946aec63cf,\n                0x12cc1d5cab10a1e9e2398d29b9e3ef,\n                0x4635cf25c66e76bba8034df46204fb,\n                0x146f,\n            ],\n        );\n\n        let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xad29e07d16a278de49a371b9760a27,\n                0x86311920cc0e17a3c20cdff4c56dbb,\n                0x863556c6c5247dd83668dd825716ae,\n                0xc247c960945f4485b46c33b87425ca,\n                0x7326463c5c4cd5b08e21b938d9ed9a,\n                0x4f89fe0c82da08a0259eddb34d0da1,\n                0x43a74e76d4e1bd2666f1591889af0d,\n                0x240f7b80f0ff29f4253ee3019f832d,\n                0xc6edd131fbaaf725fd423dac52b362,\n                0x85f9732679242163e8afff44f6104d,\n                0xd3c3bbcb1757013fd6fb80f31dd9a6,\n                0x9008633f15df440e6df6d21ee585a2,\n                0x324df3425ed256e283be5b6b761741,\n                0xc60c1302929bd0e07caa4aeff4e8fd,\n                0x600d804ff13ba8d0e1bc9508714212,\n                0x50f7e75e5751d7edd61167027926be,\n                0x0db41d39442023e1420a8a84fe81d9,\n                0xab,\n            ],\n        };\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n    }\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n        // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132, 239,\n            227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n        ];\n\n        let params: BigNumParams<18, 2048> = BigNumParams::new(\n            false,\n            [\n                0xe40ee47801326543c8e84b85d567c1,\n                0x5b54ea87f0ce29de1995697b0696fd,\n                0x457078f8fdce68b437cac0970b2452,\n                0x473ec776fee3731b6ab06e35875ddc,\n                0x62dedd594e5f12c80c3ccb5791a6cd,\n                0xecb934b9d8272c5e3a418145345499,\n                0xd1af643b3d785470ed0c6cd633f706,\n                0xb58a57b9e96eccbdfc7c17f0333d4,\n                0x2ebd34b5039fc596504927c282c60d,\n                0x3a44928a74f25fc1043bb37ce4dfa8,\n                0x91448459f9617fac33a2816162ac9e,\n                0x70cb910d9f3e1a78864640ec6c8240,\n                0x9aed33f6b31f1c9de67248a98c180,\n                0x7f1416e032c79488c94b311e87bd9c,\n                0x7191b4ebb1b3fffa949fa48ed01e5,\n                0x350a75cbaeca6bfdd71ca83cdbcae9,\n                0xfb1d274fa207457c6814d42c09f9cf,\n                0xd4,\n            ],\n            [\n                0x803bf4d38110a7d37fdd05f590dee9,\n                0xa68d317c933f37cab5ab4e7c00a3b9,\n                0x476a05a536bf5f2aa1b8850146cba7,\n                0xca297ea8b5528d91d4836ff27c30ab,\n                0x75cf2eaab76eefa12bbd570f1aea9f,\n                0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n                0xd497db1f6ebe83decacaa647fabea6,\n                0x686b27ca330e25e7a7cf197f6433ef,\n                0xfde04d2225c8308b07580af0058a0f,\n                0xa29fb69777c0e916976243b2b09855,\n                0xf983592285852e7e1c2cb3ae968323,\n                0x673608017f9f5acf67a01b73728d70,\n                0xeeff82521c0bc432a05f4b7444fac0,\n                0x85a89c4d229f60aaa3aa7ac7dac1e2,\n                0xcfecff93bc9fbfe0d6dff6091f2db8,\n                0xf20f047dcb224b4447bd098c07f8c2,\n                0x554bb53cadeb3eaab911a189f90227,\n                0x133b,\n            ],\n        );\n\n        let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xa250eff812c63eaaeaa3f04641c05f,\n                0xecc09613cb8b289c1f37c8f92e6a05,\n                0x2c0a0510058360c07af65d46f594fd,\n                0x943d67513363d3de430c94a1dafe7c,\n                0x511ec8e9b10bc6c6ff0d6c232ccf92,\n                0x50ffd07b3c093b3f5fc027de847731,\n                0xc268e1489449943fdafdf89ff168c3,\n                0x0b8b7f9f49b492f78fda58d252f23a,\n                0x491c6c4ef836a6a8730b7bf81e865e,\n                0x8746c75fb079d014e419543f56d7f0,\n                0x65804c417d6168a8bc0025d255cebf,\n                0xf695e91b77890b8e3fd775fa56e627,\n                0x5e90001c0218550f4083ae28025a2f,\n                0x526bd4eff34f25f62a698f0470e0a6,\n                0x7f224306a7d9daf536b1559434c6c6,\n                0x88809f16fe1fcea3c87511d9319735,\n                0x7694685fee0bfab4a9196b92ec6f2e,\n                0xa7,\n            ],\n        };\n\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n    }\n\n    #[test]\n    fn smoke_test() {\n        // Output of `cargo run -- --msg \"hello world\"` in the `signature_gen` directory\n        // Create runtime params:\n        let modulus_limbs = [\n            0x65af46d235241cf0e8fbe8cff4abb7,\n            0xeead39ba3f377ddd5ccb2ef2085190,\n            0xe483f94c0a98e8b618d92fb926f596,\n            0x1fa8c1b2c62cca6db090cd74a29db2,\n            0xc38e22042fcb74585a7e535301f50f,\n            0xcbc4378e5212752743ae78a75a44a9,\n            0xf5acc41788d9a346a0f75630a8b2b6,\n            0xf7a741bb3ecf1aadd5a327f362abd8,\n            0x4d5f24e815db43a1b2cc2ba40f8715,\n            0xe501f1a01305cb198475a4bff0da2e,\n            0xd541b78cfbc2b314083c340840c82c,\n            0xa0ab069c26b2a0458f4c642bf72526,\n            0x2ccb676d8f22517116fee0d2340533,\n            0x7cf2a7cf772025c0a83747bbc18228,\n            0xf9475f17988a56f17b3bdf88dc72dc,\n            0x4ff228bee24415fae7a7c05771e830,\n            0x55acd96b485515c38906106cf0d189,\n            0xb9,\n        ];\n        let redc_limbs = [\n            0x172c8f156f020ad88d30fa3ba47f03,\n            0x1740a43a67cb9a7be1ac1422d77246,\n            0x2d967be1edf369834317e04856e591,\n            0x65d9fa0de5fdab598c04d9a515156a,\n            0xc6791a661ea7621db7e6c4ec48f466,\n            0xa4a1a7c06d3e8a0bcbc540c6af6788,\n            0xdcaffeb149f5bf646caa00d7355715,\n            0xb75471630a9d0fefb5cb61e66991a1,\n            0x97c041a0fc30fdff3d5ed16997da02,\n            0xbfbe7d217694b269e1ed37819c2f17,\n            0x1b44ffc3180531e2ab8bdf7848a3a9,\n            0x9f004af11132cb68bb55998ed7616a,\n            0x1b15dbbb96ce80f479724bbd768a0c,\n            0x59ba1419093ae6ed2592ffb3065867,\n            0xa35b69affa3bb3f4713f315e50b584,\n            0xa873210f83a6de0d8cbb816af3e37,\n            0xbe4fe7cf98da87ec87638030797e92,\n            0x1619,\n        ];\n\n        let signature_limbs = [\n            0x2f397c4611d4a4271453e1e50e1578,\n            0xe506a7f47c721a4943783e8ad459e6,\n            0x6cc4ae1d91cb381cba9673470999fb,\n            0x1e127364d07f94e58227f50fbf5687,\n            0xf64a2579c7189f882d68832d16faa4,\n            0x3b014b74c6c6f76f2f8af170fa0fe4,\n            0x7df41e68c86815a6fdc33968c66b67,\n            0x6a57ac06282527242fddb6ed08dbdc,\n            0xac40d37b819c4b6193f90a634e4fc7,\n            0x96606ed166a7f032d858cd40ac73a5,\n            0x8eb7d4351159a46733f92610d5c597,\n            0xc8e8e9faa9738e82dbe774a3f5cf07,\n            0x89ca84fd54ee3d5cca87c9f178375e,\n            0xdb7a1465fc76507ea498a351af70dd,\n            0x6ac6fe14f51c711f983125c776f712,\n            0x3254c17fef51bf4194a8a1674634e3,\n            0xee38c83c77c6e1ff7b70a5d9d1dd0f,\n            0x26,\n        ];\n\n        let hash: [u8; 32] = [\n            0xb9, 0x4d, 0x27, 0xb9, 0x93, 0x4d, 0x3e, 0x08, 0xa5, 0x2e, 0x52, 0xd7, 0xda, 0x7d,\n            0xab, 0xfa, 0xc4, 0x84, 0xef, 0xe3, 0x7a, 0x53, 0x80, 0xee, 0x90, 0x88, 0xf7, 0xac,\n            0xe2, 0xef, 0xcd, 0xe9,\n        ];\n\n        let has_multiplicative_inverse = false;\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(has_multiplicative_inverse, modulus_limbs, redc_limbs);\n\n        let signature: RBN2048 = RBN2048::from_array(params, signature_limbs);\n\n        assert(verify_sha256_pkcs1v15(hash, signature, 65537));\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_rsa/v0.7.0/src/rsa.nr"},"141":{"source":"mod utils;\n\npub use utils::{conditional_select, DebugRandomEngine, lt_f};\nuse std::collections::bounded_vec::BoundedVec;\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"haystack\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @details the \"body\" parameter contains some input bytes, zero-padded to the nearest multiple of 31\n *          We pack \"bytes\" into 31-byte \"chunks\", as this is the maximum number of bytes we can fit\n *          into a field element without overflowing.\n *          TODO: once we can derive generics via arithmetic on other generics, we want this \"31\" parameter\n *          to be defined by the backend being used instead of being hardcoded to 31\n *\n * @note We perform this 31-byte packing because it dramatically reduces the number of constraints required for substring matching. See (chicken)\n *\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunks: the number of 31-byte chunks needed to represent MaxPaddedBytes\n **/\npub struct StringBody<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    chunks: [Field; PaddedChunks],\n    pub byte_length: u32,\n}\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"needle\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunksMinusOne: the number of 31-byte chunks needed to represent MaxPaddedBytes minus one!\n *\n * @note PaddedChunksMinusOne is because we are going to do the following:\n *                            1. align the SubString bytes according to the StringBody bytes being matched against\n *                            2. split the aligned bytes into 31-byte chunks. The 1st and last chunks might contain\n *                               fewer than 31 bytes due to the above alignment\n *                            3. validate the aligned-byte-chunks match the StringBody byte chunks\n *       To account for the fact that the 1st and last chunks might have fewer bytes we treat those separately\n *       The param PaddedChunksMinusOne is the number of 31-byte chunks required to represent SubString *EXCLUDING* the initial and final chunks\n */\npub struct SubString<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    pub byte_length: u32,\n}\n\npub type StringBody32 = StringBody<62, 2, 32>;\npub type StringBody64 = StringBody<93, 3, 64>;\npub type StringBody128 = StringBody<155, 5, 128>;\npub type StringBody256 = StringBody<279, 9, 256>;\npub type StringBody512 = StringBody<527, 17, 512>;\npub type StringBody1024 = StringBody<1054, 34, 1024>;\npub type StringBody2048 = StringBody<2077, 67, 2048>;\npub type StringBody4096 = StringBody<4123, 133, 4096>;\npub type StringBody8192 = StringBody<8215, 265, 8192>;\npub type StringBody16384 = StringBody<16399, 529, 16384>;\n\npub type SubString32 = SubString<62, 1, 32>;\npub type SubString64 = SubString<93, 2, 64>;\npub type SubString128 = SubString<155, 4, 128>;\npub type SubString256 = SubString<279, 8, 256>;\npub type SubString512 = SubString<527, 16, 512>;\npub type SubString1024 = SubString<1054, 33, 1024>;\n\npub trait SubStringTrait {\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        num_bytes_in_first_chunk: Field,\n        body_chunk_offset: Field,\n        num_full_chunks: Field,\n    );\n\n    fn len(self) -> u32;\n    fn get(self, idx: Field) -> u8;\n    fn get_body(self) -> [u8];\n}\n\n// ######################################################\n// S U B S T R I N G\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    /**\n     * @brief construct a SubString object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    pub fn new<let InputBytes: u32>(input: [u8; InputBytes], input_length: u32) -> Self {\n        assert(MaxBytes <= MaxPaddedBytes);\n        assert(input_length <= MaxBytes);\n        assert(InputBytes <= MaxBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = input[i];\n        }\n        SubString { body, byte_length: input_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together\n     * @details each SubString can have different MaxBytes sizes, however we need OtherBytes <= MaxBytes\n     *          (use concat_into for cases where this is not the case)\n     **/\n    pub fn concat<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> Self {\n        assert(\n            OtherPaddedBytes <= MaxPaddedBytes,\n            \"SubString::concat. SubString being concatted has larger max length. Try calling concat_into\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= MaxPaddedBytes,\n            \"SubString::concat, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body = self.body;\n        let offset: u32 = self.byte_length;\n        for i in 0..MaxPaddedBytes {\n            if (i + offset < MaxPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together. Return type has OtherPaddedBytes max bytes\n     * @details each SubString can have different MaxBytes sizes, however we need MaxBytes <= OtherBytes\n     *          (use concat for cases where this is not the case)\n     **/\n    pub fn concat_into<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes> {\n        assert(\n            MaxPaddedBytes <= OtherPaddedBytes,\n            \"SubString::concat_into. SubString being concat has larger max length. Try calling concat\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= OtherPaddedBytes,\n            \"SubString::concat_into, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body: [u8; OtherPaddedBytes] = [0; OtherPaddedBytes];\n        for i in 0..MaxBytes {\n            body[i] = self.body[i];\n        }\n\n        let offset: u32 = self.byte_length;\n        for i in 0..OtherPaddedBytes {\n            if (i + offset < OtherPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubStringTrait for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    fn len(self) -> u32 {\n        self.byte_length\n    }\n    fn get(self, idx: Field) -> u8 {\n        self.body[idx as u32]\n    }\n    fn get_body(self) -> [u8] {\n        let x = self.body.as_slice();\n        x\n    }\n\n    /**\n     * @brief given some `haystack` 31-byte chunks, validate that there exist `num_full_chunks`\n     *        in the SubString, starting at byte position `starting_needle_byte`.\n     *        The selected chunks must be equal to the haystack chunks starting at `starting_haystack_chunk`\n     **/\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        starting_needle_byte: Field,\n        starting_haystack_chunk: Field,\n        num_full_chunks: Field,\n    ) {\n        let mut substring_chunks: [Field; PaddedChunksMinusOne] = [0; PaddedChunksMinusOne];\n        // pack the substring into 31 byte chunks.\n        // This is fairly expensive as we need a ROM table to access the SubString.body\n        // which is 2 gates per byte\n        for i in 0..PaddedChunksMinusOne {\n            let mut slice: Field = 0;\n            for j in 0..31 {\n                slice *= 256;\n                let substring_idx = starting_needle_byte as Field + (i as Field * 31) + j as Field;\n                let mut byte = self.body[substring_idx];\n                slice += byte as Field;\n            }\n            std::as_witness(slice);\n            substring_chunks[i] = slice;\n        }\n        // iterate over the needle chunks and validate they match the haystack chunks\n        for i in 0..PaddedChunksMinusOne {\n            let predicate: Field = lt_f(i as Field, num_full_chunks) as Field;\n            let lhs = substring_chunks[i];\n            let rhs = haystack[predicate as Field * (i as Field + starting_haystack_chunk)];\n            assert(predicate * (lhs - rhs) == 0);\n        }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> From<BoundedVec<u8, MaxBytes>> for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n    fn from(input: BoundedVec<u8, MaxBytes>) -> Self {\n        Self::new(input.storage(), input.len() as u32)\n    }\n}\n\n// ######################################################\n// S T R I N G   B O D Y\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> StringBody<MaxPaddedBytes, PaddedChunks, MaxBytes> {\n\n    /**\n     * @brief construct a StringBody object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    pub fn new<let InputBytes: u32>(data: [u8; InputBytes], length: u32) -> Self {\n        assert(length <= MaxBytes);\n        assert(length <= InputBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = data[i];\n        }\n        StringBody { body, chunks: compute_chunks(body), byte_length: length }\n    }\n\n    /**\n     * @brief Validate a substring exists in the StringBody. Returns a success flag and the position within the StringBody that the match was found\n     **/\n    pub fn substring_match<NeedleSubString>(self, substring: NeedleSubString) -> (bool, u32)\n    where\n        NeedleSubString: SubStringTrait,\n    {\n        // use unconstrained function to determine:\n        // a: is the substring present in the body text\n        // b: the position of the first match in the body text\n        let position: u32 = unsafe {\n            // Safety: The rest of this function checks this.\n            utils::search(\n                self.body,\n                substring.get_body(),\n                self.byte_length,\n                substring.len(),\n            )\n        };\n\n        assert(\n            position + substring.len() <= self.byte_length,\n            \"substring not present in main text (match found if a padding text included. is main text correctly formatted?)\",\n        );\n        let substring_length = substring.len();\n\n        // chunk_index = which 31-byte haystack chunk does the needle begin in?\n        let chunk_index: u32 = position / 31;\n        // chunk_offset = how many haystack bytes are present in the 1st haystack chunk?\n        let chunk_offset: u32 = position % 31;\n        // how many needle bytes are in 1st haystack chunk?\n        let num_bytes_in_first_chunk: u32 = 31 - chunk_offset;\n        let mut starting_needle_byte_index_of_final_chunk: Field = 0;\n        let mut chunk_index_of_final_haystack_chunk_with_matching_needle_bytes: Field = 0;\n        let mut num_full_chunks = 0;\n\n        // is there only one haystack chunk that contains needle bytes?\n        let merge_initial_final_needle_chunks =\n            lt_f(substring_length as Field, num_bytes_in_first_chunk as Field);\n\n        // if the above is false...\n        if (!merge_initial_final_needle_chunks) {\n            // compute how many full 31-byte haystack chunks contain 31 needle bytes\n            num_full_chunks = (substring_length - num_bytes_in_first_chunk) / 31;\n            // for the final haystack chunk that contains needle bytes, where in the needle does this chunk begin?\n            starting_needle_byte_index_of_final_chunk =\n                num_full_chunks as Field * 31 + num_bytes_in_first_chunk as Field;\n\n            // what is the index of the final haystack chunk that contains needle bytes?\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes =\n                num_full_chunks as Field + chunk_index as Field + 1;\n        } else {\n            starting_needle_byte_index_of_final_chunk = 0;\n            // if the needle bytes does NOT span more than 1 haystack chunk,\n            // the final haystack index will be the same as the initial haystack index\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = chunk_index as Field;\n        }\n\n        // To minimize the number of comparisons between the haystack bytes and the needle bytes,\n        // we pack both the haystack bytes and needle bytes into 31-byte Field \"chunks\" and compare chunks.\n        // To do this correctly, we need to align the needle chunks with the haystack chunks\n        /*\n            e.g. consider a toy example where we pack 3 bytes into a chunk\n            haystack: [VWXZYABCDEQRSTU]\n            needle: [ABCDE]\n        when constructing needle chunks, we need to align according to where the needle is located in the haystack\n            haystack chunks:   [VWX] [ZYA] [BCD] [EQR] [STU]\n                                      _..   ...   .__\n            processed needle chunks: [ZYA] [BCD] [EQR]\n        a \"_\" symbole means that a chunk byte has been sourced from the haystack bytes,\n            a \".\" symbol means a byte is sourced from the needle bytes\n        Both the initial and final chunks of the processed needle are \"composite\" constructions.\n            If chunk byte index < `position` or is > `position + needle length\", byte is sourced from haystack, otherwise byte is sourced from needle\n        The way we execute this in code is to define an \"initial\" needle chunk and a \"final\" needle chunk.\n            Num needle bytes in initial chunk = position % 31\n            Num needle bytes in final chunk = (needle_length - (position % 31)) % 31\n        If needle_length < 31 then the \"initial\" and \"final\" chunks\n            are actually the *same* chunk and we must perform a merge operation\n            (see later in algo for comments)\n        */\n        // instead of directly reading haystack bytes, we derive the bytes from the haystack chunks.\n        // This way we don't have to instantiate the haystack bytes as a ROM table, which would cost 2 * haystack.length gates\n        let offset_to_first_needle_byte_in_chunk: Field = chunk_offset as Field;\n        let initial_haystack_chunk = self.chunks[chunk_index];\n        let final_haystack_chunk =\n            self.chunks[chunk_index_of_final_haystack_chunk_with_matching_needle_bytes];\n\n        let initial_body_bytes: [u8; 31] = initial_haystack_chunk.to_be_bytes();\n        let final_body_bytes: [u8; 31] = final_haystack_chunk.to_be_bytes();\n\n        // When defining the initial chunk bytes, we can represent as Field elements as we are deriving values from known bytes.\n        // This saves us a few gates\n        let mut initial_chunk: [Field; 31] = [0; 31];\n        let mut final_chunk: [Field; 31] = [0; 31];\n        for i in 0..31 {\n            // if i < offset_to_first_needle_byte_in_chunk, we read from the haystack\n            // otherwise we read from the needle\n            // n.b. this can be done with an if statement, but the following code produces fewer constraints\n            let idx: Field = i as Field;\n            let predicate: Field = lt_f(i as Field, offset_to_first_needle_byte_in_chunk) as Field;\n            let lhs: Field = initial_body_bytes[i] as Field;\n            // if i < offset_to_first_needle_byte_in_chunk then `idx - offset_to_first_needle_byte_in_chunk` is negative\n            // to ensure we access array correctly we need to set the lookup index to 0 if predicate = 0\n            let substring_idx = (1 - predicate) * (idx - offset_to_first_needle_byte_in_chunk);\n            let rhs: Field = substring.get(substring_idx) as Field;\n            let byte: Field = predicate * (lhs - rhs) + rhs;\n            initial_chunk[i] = byte;\n        }\n\n        // If `merge_initial_final_needle_chunks = true`, `final_chunk` will contain the full needle data,\n        // this requires some complex logic to determine where we are sourcing the needle bytes from.\n        // Either they come from the `initial_chunk`, the haystack bytes or the substring bytes.\n        for i in 0..31 {\n            let mut lhs_index: Field =\n                starting_needle_byte_index_of_final_chunk as Field + i as Field;\n            let predicate = lt_f(lhs_index, substring_length as Field);\n            /*\n                | merge_initial_final_needle_chunks | predicate | byte_source              |\n                | false                             | false     | body_bytes[i]            |\n                | false                             | true      | substring[lhs_idx]       |\n                | true                              | false     | body_bytes[i]            |\n                | true                              | true      | initial_chunk[lhs_index] |\n            NOTE: if `merge = true` and `predicate = true`, we read from `initial_chunk` to short-circuit some extra logic.\n                      if `initial_chunk` did not exist, then we would need to validate whether `i < offset_to_first_needle_byte_in_chunk`.\n                      if true, the byte source would be body_bytes, otherwise the source would be substring bytes\n            */\n            let substring_idx = (predicate as Field) * lhs_index;\n            let byte_from_substring = substring.get(substring_idx) as Field;\n            let byte_from_initial_chunk = initial_chunk[i] as Field;\n            let byte_from_haystack = final_body_bytes[i] as Field;\n\n            // TODO: find out why this cuts 1 gate per iteration\n            std::as_witness(byte_from_initial_chunk);\n\n            let p = predicate as Field;\n            let m = merge_initial_final_needle_chunks as Field;\n            // p * (m * (a - b) + (b - c)) + c\n            let ab = byte_from_initial_chunk - byte_from_substring;\n            std::as_witness(ab);\n            let bc = byte_from_substring - byte_from_haystack;\n            let t0 = m * ab + bc;\n            let destination_byte = p * t0 + byte_from_haystack;\n\n            final_chunk[i] = destination_byte;\n        }\n\n        // TODO: moving this above the previous code block adds 31 gates. find out why? :/\n        let mut initial_needle_chunk: Field = 0;\n        let mut final_needle_chunk: Field = 0;\n\n        // Construct the initial and final needle chunks from the byte arrays we previously built.\n        // Validate they match the initial and final haystack chunks\n        for i in 0..31 {\n            initial_needle_chunk *= 256;\n            initial_needle_chunk += initial_chunk[i];\n            final_needle_chunk *= 256;\n            final_needle_chunk += final_chunk[i];\n        }\n\n        std::as_witness(initial_needle_chunk);\n        std::as_witness(final_needle_chunk);\n\n        initial_needle_chunk = merge_initial_final_needle_chunks as Field\n            * (final_needle_chunk - initial_needle_chunk)\n            + initial_needle_chunk;\n        assert(initial_needle_chunk == initial_haystack_chunk);\n        assert(final_needle_chunk == final_haystack_chunk);\n\n        // Step 3: Construct needle chunks (for all but the 1st and last chunks) and validate they match the haystack chunks.\n        //         This part is much simpler as we know that all bytes in the chunk are sourced from the needle chunk.\n        // NOTE:   If we chose to not pack bytes into 31-byte chunks, the string matching algorithm would be simpler but more expensive.\n        //         Instead of matching chunks with each other, we would match individual byte values.\n        //         i.e. the number of iterations in this loop would be 31x greater\n        //         each loop iteration would also require a predicate, to check whether the byte index was within the needle range or not\n        //         Combined these two operations would add about 10 gates per loop iteration,\n        //         combined with a 31x iteration length would make this algorithm much more costly than the chunked variant\n        let body_chunk_offset: Field = chunk_index as Field + 1;\n        substring.match_chunks(\n            self.chunks,\n            num_bytes_in_first_chunk as Field,\n            body_chunk_offset,\n            num_full_chunks as Field,\n        );\n        (true, position)\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> From<BoundedVec<u8, MaxBytes>> for StringBody<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n    fn from(input: BoundedVec<u8, MaxBytes>) -> Self {\n        Self::new(input.storage(), input.len() as u32)\n    }\n}\n\n/// Given an input byte array, convert into 31-byte chunks\n///\n/// Cost: ~0.5 gates per byte\nfn compute_chunks<let MaxPaddedBytes: u32, let PaddedChunks: u32>(\n    body: [u8; MaxPaddedBytes],\n) -> [Field; PaddedChunks] {\n    let mut chunks: [Field; PaddedChunks] = [0; PaddedChunks];\n    for i in 0..PaddedChunks {\n        let mut limb: Field = 0;\n        for j in 0..31 {\n            limb *= 256;\n            limb += body[i * 31 + j] as Field;\n        }\n        chunks[i] = limb;\n        std::as_witness(chunks[i]);\n    }\n    chunks\n}\n\n#[test]\nfn test() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_small_needle() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \"olor\".as_bytes();\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString32 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_aligned_on_byte_boundary() {\n    let haystack_text = \"the quick brown fox jumped over the lazy dog\".as_bytes();\n    let needle_text = \" the lazy dog\".as_bytes();\n\n    let mut haystack: StringBody256 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString256 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_haystack_equal_size() {\n    let haystack_text =\n        \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n    let needle_text = \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n\n    let mut haystack: StringBody64 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_concat() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString128 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nfn test_concat_into() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString32 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat_into(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nunconstrained fn test_partial_match() {\n    let mut Engine = DebugRandomEngine { seed: 0 };\n    let mut foo: [u8; 1024] = Engine.get_random_bytes();\n    let mut bar: [u8; 128] = [0; 128];\n    for i in 0..128 {\n        bar[i] = foo[i + 123];\n    }\n    let position = utils::search(foo, bar.as_slice(), 1024, 128);\n\n    assert(position == 123);\n}\n\n#[test]\nfn test_substring_from_bounded_vec() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = BoundedVec::from(haystack_text).into();\n    let mut needle: SubString64 = BoundedVec::from(needle_text).into();\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_string_body_from_bounded_vec() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n\n    let mut haystack: StringBody512 = BoundedVec::from(haystack_text).into();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n    let mut needle: SubString64 = BoundedVec::from(needle_text).into();\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn regression_20() {\n    let haystack: [u8; 128] = [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x92, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x6e, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n\n    let needle: [u8; 32] = [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let needle_len: u32 = 0x20;\n    let id_haystack: StringBody128 = StringBody::new(haystack, 128);\n    let pk_needle: SubString32 = SubString::new(needle, needle_len);\n    let (result, _): (bool, u32) = id_haystack.substring_match(pk_needle);\n    assert(result);\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_string_search/v0.3.2/src/lib.nr"},"142":{"source":"pub unconstrained fn search<let N: u32>(\n    haystack: [u8; N],\n    needle: [u8],\n    haystack_length: u32,\n    needle_length: u32,\n) -> u32 {\n    assert(needle_length > 0, \"needle length of size 0 not supported\");\n    assert(haystack_length > 0, \"haystack length of size 0 not supported\");\n    let mut found = false;\n    let mut found_index: u32 = 0;\n    for i in 0..haystack_length - needle_length + 1 {\n        if (found == true) {\n            break;\n        }\n        for j in 0..needle_length {\n            if haystack[i + j] != needle[j] {\n                break;\n            } else if (j == needle_length - 1) {\n                found = true;\n            }\n            if (found == true) {\n                found_index = i;\n                break;\n            }\n        }\n    }\n    assert(found == true, \"utils::search could not find needle in haystack\");\n    found_index\n}\n\nunconstrained fn __conditional_select(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    if (predicate) {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn conditional_select<T>(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    // Safety: This is all just a very verbose `if (predicate) { lhs } else { rhs }`\n    // formulated as `rhs + (lhs - rhs) * predicate`\n    unsafe {\n        let result = __conditional_select(lhs, rhs, predicate);\n        let result_f = result as Field;\n        let lhs_f = lhs as Field;\n        let rhs_f = rhs as Field;\n\n        let diff = lhs_f - rhs_f;\n        std::as_witness(diff);\n        assert_eq((predicate as Field) * diff + rhs_f, result_f);\n        result\n    }\n}\n\npub unconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    a < b\n}\n\npub fn lt_f(x: Field, y: Field) -> bool {\n    // Safety: As `x` and `y` are known to be valid `u32`s, this function reimplements the\n    // compiler's internal implementation of `lt`\n    unsafe {\n        let predicate = get_lt_predicate_f(x, y);\n        let delta = y as Field - x as Field;\n        let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n        lt_parameter.assert_max_bit_size::<32>();\n\n        predicate\n    }\n}\n\npub struct DebugRandomEngine {\n    pub seed: Field,\n}\n\nimpl DebugRandomEngine {\n    unconstrained fn get_random_32_bytes(&mut self) -> [u8; 32] {\n        self.seed += 1;\n        let input: [u8; 32] = self.seed.to_be_bytes();\n        let hash: [u8; 32] = std::hash::blake3(input);\n        hash\n    }\n    unconstrained fn get_random_field(&mut self) -> Field {\n        let hash = self.get_random_32_bytes();\n        let mut result: Field = 0;\n        for i in 0..32 {\n            result *= 256;\n            result += hash[i] as Field;\n        }\n        result\n    }\n\n    pub unconstrained fn get_random_bytes<let NBytes: u32>(&mut self) -> [u8; NBytes] {\n        let num_chunks = (NBytes / 32) + ((NBytes % 32) != 0) as u32;\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..num_chunks - 1 {\n            let bytes = self.get_random_32_bytes();\n            for j in 0..32 {\n                result[i * 32 + j] = bytes[j];\n            }\n        }\n\n        let bytes = self.get_random_32_bytes();\n        for j in 0..(NBytes - (num_chunks - 1) * 32) {\n            result[(num_chunks - 1) * 32 + j] = bytes[j];\n        }\n        result\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_string_search/v0.3.2/src/utils.nr"},"143":{"source":"use crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, RSA_EXPONENT};\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse rsa::{rsa::verify_sha256_pkcs1v15, types::{RBN1024, RBN2048}};\nuse std::hash::{pedersen_hash, sha256_var};\n\npub struct RSAPubkey<let KEY_LIMBS: u32> {\n    modulus: [Field; KEY_LIMBS],\n    redc: [Field; KEY_LIMBS],\n}\n\nimpl<let KEY_LIMBS: u32> RSAPubkey<KEY_LIMBS> {\n\n    pub fn new(modulus: [Field; KEY_LIMBS], redc: [Field; KEY_LIMBS]) -> Self {\n        let pubkey = Self { modulus, redc };\n        pubkey\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_1024> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_1024],\n    ) -> [u8; 32] {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_1024, 1024> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN1024 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n\n        header_hash\n    }\n\n    pub fn hash(self) -> Field {\n        // validate\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 9];\n        // compose first 4 limbs of modulus and redc\n        for i in 0..4 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 4] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // compose last two elements of redc and modulus together\n        let modulus_hi = self.modulus[8] * 2.pow_32(120);\n        dkim_preimage[8] = modulus_hi + self.redc[8];\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_1024 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_1024 - 1].assert_max_bit_size::<1024 - ((KEY_LIMBS_1024 - 1) * 120)>();\n        self.redc[KEY_LIMBS_1024 - 1].assert_max_bit_size::<120>();\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_2048> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_2048],\n    ) -> [u8; 32] {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_2048, 2048> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN2048 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n\n        header_hash\n    }\n\n    pub fn hash(self) -> Field {\n        // validate range\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 18];\n        // compose limbs\n        for i in 0..9 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 9] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_2048 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_2048 - 1].assert_max_bit_size::<2048 - ((KEY_LIMBS_2048 - 1) * 120)>();\n        self.redc[KEY_LIMBS_2048 - 1].assert_max_bit_size::<120>(); // we get 2053 sometimes?\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/zkemail/zkemail.nr/v0.4.3/lib/src/dkim.nr"},"190":{"source":"use crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_120: Field = 0x1000000000000000000000000000000;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> Field {\n    let TWO_POW_120 = 0x1000000000000000000000000000000;\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0]\n    } else if N == 2 {\n        validate_in_range::<N, MOD_BITS>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120 + limbs[2] * TWO_POW_120 * TWO_POW_120\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    field: Field,\n) -> [Field; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result = unsafe { __from_field::<N>(field) };\n\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        let TWO_POW_120 = 0x1000000000000000000000000000000;\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let field_val = if N < 2 {\n            result[0]\n        } else if N == 2 {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120\n        } else {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120 + result[2] * TWO_POW_120 * TWO_POW_120\n        };\n        assert(field_val == field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120;\n        r *= TWO_POW_120;\n        modulus_mod_n *= TWO_POW_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += params.modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [Field; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += borrow_flags[0] as Field * TWO_POW_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * TWO_POW_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    validate_in_range::<_, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb =\n            modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * TWO_POW_120);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * TWO_POW_120);\n            assert(result_limb == 0);\n        }\n        let result_limb =\n            modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb =\n            lhs[0] + rhs[0] - subtrahend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] + rhs[N - 1] - subtrahend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] - rhs[N - 1] + addend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/constrained_ops.nr"},"191":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/expressions.nr"},"193":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/serialization.nr"},"194":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [Field; N] {\n    // cast the field to a u60 representation\n    let res_u60: U60Repr<N, 2> = U60Repr::from_field(field);\n    let result: [Field; N] = U60Repr::into(res_u60);\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = From::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = From::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let b_u60: U60Repr<N, 2> = From::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                let idx = (i - 1) / 2;\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quirky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target.shr1();\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_helpers.nr"},"195":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..N {\n        let idx = N - 1 - i;\n        if (!__is_zero(x[idx])) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]] = [[0; N]];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n        result = result.push_back([0; N]);\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_ops.nr"},"197":{"source":"use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    pub fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/params.nr"},"198":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    pub fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self;\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    pub fn modulus(self) -> Self;\n    pub fn modulus_bits() -> u32;\n    pub fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    pub fn get_limbs(self) -> [Field; N];\n    pub fn get_limb(self, idx: u32) -> Field;\n    pub fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    pub fn __neg(self) -> Self;\n    // unconstrained\n    pub fn __add(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __div(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    pub fn __invmod(self) -> Self;\n    // unconstrained\n    pub fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    pub fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    pub fn assert_is_not_equal(self, other: Self);\n    pub fn validate_in_field(self);\n    pub fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    pub fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    pub fn udiv(numerator: Self, divisor: Self) -> Self;\n    pub fn umod(numerator: Self, divisor: Self) -> Self;\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    pub fn is_zero(self) -> bool;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/runtime_bignum.nr"},"205":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\npub(crate) global TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n//fields to u60rep conversion\n// field elements are 254 bits\n// so there will be 5 limbs\npub(crate) unconstrained fn field_to_u60rep(mut x: Field) -> (u64, u64, u64, u64, u64) {\n    // get the first 60 bits by casting to u64 and then taking the lower 60 bits\n    // we use the fact that this casting drops everything above 64 bits\n    let x_first_u64 = (x as u64);\n    let first: u64 = x_first_u64 % TWO_POW_60;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_60 as Field);\n    let x_second_u64 = (x as u64);\n    let second = x_second_u64 % TWO_POW_60;\n    x = (x - (second as Field)) / (TWO_POW_60 as Field);\n    let x_third_u64 = (x as u64);\n    let third = x_third_u64 % TWO_POW_60;\n    x = (x - (third as Field)) / (TWO_POW_60 as Field);\n    let x_fourth_u64 = (x as u64);\n    let fourth = x_fourth_u64 % TWO_POW_60;\n    x = (x - (fourth as Field)) / (TWO_POW_60 as Field);\n    let x_fifth_u64 = (x as u64);\n    let fifth = x_fifth_u64 % TWO_POW_60;\n    (first, second, third, fourth, fifth)\n}\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\nunconstrained fn __split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\npub fn split_60_bits(x: Field) -> (u64, u64) {\n    // We assert that the two returned limbs fit within 60 bits each\n    // and reconstruct `x` when added together.\n    let (lo, hi) = unsafe { __split_60_bits(x) };\n    if !std::runtime::is_unconstrained() {\n        let lo_field = lo as Field;\n        let hi_field = hi as Field;\n        lo_field.assert_max_bit_size::<60>();\n        hi_field.assert_max_bit_size::<60>();\n        assert_eq(lo_field + (TWO_POW_60 as Field) * hi_field, x);\n    }\n\n    (lo, hi)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n\n        normalized[i] = lo;\n        next = input[i + 1] + hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/split_bits.nr"},"206":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\nuse crate::utils::split_bits::{field_to_u60rep, TWO_POW_60};\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..N {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\n// impl<let N: u32, let NumSegments: u32> std::convert::From<Field> for U60Repr<N, NumSegments> {\n//     fn from(input: Field) -> Self {\n//        let (low, mid, high) =  unsafe { field_to_u60rep(input) } ;\n//         let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n//         let N_u60: u32 = N * NumSegments;\n//         assert(N_u60 >=1, \"N must be at least 1\");\n//         if N_u60 == 1 {\n//             assert((mid ==0) & (high == 0), \"input field is too large to fit in a single limb\");\n//             result.limbs[0] = low;\n//         }\n//         else if N_u60 == 2{\n//             assert(high == 0, \"input field is too large to fit in two limbs\");\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//         }else{\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//             result.limbs[2] = high;\n//         }\n//         result\n//     }\n// }\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn from_field(input: Field) -> Self {\n        let (first, second, third, fourth, fifth) = field_to_u60rep(input);\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        let N_u60: u32 = N * NumSegments;\n        assert(N_u60 >= 1, \"N must be at least 1\");\n        if N_u60 == 1 {\n            assert(\n                (second == 0) & (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in a single limb\",\n            );\n            result.limbs[0] = first;\n        } else if N_u60 == 2 {\n            assert(\n                (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in two limbs\",\n            );\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n        } else if N_u60 == 3 {\n            assert((fourth == 0) & (fifth == 0), \"input field is too large to fit in three limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n        } else if N_u60 == 4 {\n            assert((fifth == 0), \"input field is too large to fit in four limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n        } else {\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n            result.limbs[4] = fifth;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        for i in 0..(N * NumSegments / 2) {\n            result[i] =\n                x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * TWO_POW_60 as Field);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            let idx = (N * NumSegments) - 1 - i;\n            if (b.limbs[idx] == self.limbs[idx]) {\n                continue;\n            }\n\n            result = b.limbs[idx] < self.limbs[idx];\n            early_exit = true;\n            break;\n        }\n        if early_exit {\n            result\n        } else {\n            self.limbs[0] == b.limbs[0]\n        }\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift = (60 - limb_shift) as u8;\n        let mask: u64 = (((1 as u64) << limb_shift) - 1) << remainder_shift;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = value >> limb_shift;\n            let remainder: u64 = (value << remainder_shift) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << limb_shift) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << limb_shift) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/u60_representation.nr"},"209":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_rsa/v0.5.1/lib/src/rsa.nr"}},"names":["main"],"brillig_names":["build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","__mul","__compute_quadratic_expression_with_borrow_flags","extract_claim_unconstrained","__boundary_check","__validate_decoded","search","get_lt_predicate_f","extract_claim_unconstrained","get_domain_start_index_in_email","__split_60_bits","__mul","__compute_quadratic_expression_with_borrow_flags","decompose_hint","is_position_found_in_email_body","is_salary_found_in_email_body","directive_integer_quotient","directive_invert","directive_to_radix"]}