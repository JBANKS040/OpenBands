{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":2755817340691945092,"abi":{"parameters":[{"name":"partial_data","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"partial_hash","type":{"kind":"array","length":8,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"full_data_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"base64_decode_offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"jwt_pubkey_modulus_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"public"},{"name":"jwt_pubkey_redc_params_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"private"},{"name":"jwt_signature_limbs","type":{"kind":"array","length":18,"type":{"kind":"integer","sign":"unsigned","width":128}},"visibility":"private"},{"name":"domain","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},{"name":"position","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":128,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},{"name":"salary","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"public"},{"name":"work_life_balance","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"culture_values","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"career_growth","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"compensation_benefits","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"leadership_quality","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"operational_efficiency","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"header","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":1504,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"pubkey","type":{"kind":"struct","path":"zkemail::dkim::RSAPubkey","fields":[{"name":"modulus","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_header_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":null,"error_types":{"1745191622261247408":{"error_kind":"string","string":"rating must be at least 1"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4128061241751547076":{"error_kind":"string","string":"Position can not be found in email body"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5634341720269277520":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"integer","sign":"unsigned","width":8},{"kind":"integer","sign":"unsigned","width":32}]},"5675127253506927136":{"error_kind":"string","string":"utils::search could not find needle in haystack"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"6314603625877298116":{"error_kind":"string","string":"haystack length of size 0 not supported"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6543056410826478903":{"error_kind":"string","string":"incorrect value for claim"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7788270038095378938":{"error_kind":"string","string":"substring not present in main text (match found if a padding text included. is main text correctly formatted?)"},"8397817944888091498":{"error_kind":"string","string":"rating must be at most 5"},"9281715815618326061":{"error_kind":"string","string":"invalid domain"},"10713088778935619315":{"error_kind":"string","string":"char before domain is not '@'"},"13815800804469369678":{"error_kind":"string","string":"partial_data length is too long"},"14044520943542572812":{"error_kind":"string","string":"Salary can not be found in email body"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"15412340888643424233":{"error_kind":"string","string":"needle length of size 0 not supported"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"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6971wnXveuG6d71w3bteuO5dL1z3rheue9cL173rheve9cJ173rhunctuO5dC65714Lr3rXgunctnYeE69614Lp3LbjuXQuue9fC696V170rr3tXXveuvO5dOw+J170rr3tXXveuvO5ded278bp343Xvxuvejde9W+ch8bp343Xvxuvejde9G697d1737rzu3Xndu/O692+4axmReN2787p353Xvzuvende9B697D173HrzuPXjd+zfctYxIvO49eN178Lo3765l5d21rLy7lpV317Ly7lpW3l3LyrtrWXl3LSvvrmXl3bWsvLuWlXfXsvLuWlbeXcvKu2tZeXctK++uZeXdtayfv2vZfn3168+3Q2DxkDYP6eCQPn/XMiMVHtLHp3e/6i+kV+z/K9LXL5/n/PXFq9w8OXz+WuZb6buafqjpp5p+qem3mv6Y6T9/h/Wt9EVNr87ao87az9+3fSu9OmuPOmuPOmuPOmuPOWvbZc7adpmztl3mrG2XOWvbZc7adpmztl3mrG2XOWvbZc7adqmztqiztqiztqiztqiz9vN32d9Kr87aos7aos7aos7aos7aqs7aqs7aqs7aqs7az5sH3kqvztqqztqqztqqztqqztqmztqmztqmztqmztrPeyLeSq/O2qbO2qbO2qbO2qbO2q7O2q7O2q7O2q7O2s9bPd5Kr87ars7ars7ars7ars7aoc7aoc7aoc7aoc7azztY3kqvztqhztqhztqhztqhztqpztqpztqpztqpztrPG3PeSq/O2qnO2qnO2qnO2qnO2qXO2qXO2qXO2qXO2s/7jd5Kr87apc7apc7apc7apc7arc7arc5atTeqqb1RTe2NampvVFN7o5raG9XU3qim9kY1tTeqqb1RTe2NampvVFN7o5raG9XU3qim9kY1tTeqqb1RXe2N6mpvVFd7o7raG9Uvc9Z2tTeqq71RXe2N6mpvVFd7o7raG9XV3qiu9kZ1tTeqq71RXe2N6mpvVFd7o7raG9XV3qiu9kZ1tTeqq71RXe2N6mpvVFd7o/rnvVFt//0hd71dN0iLh7R5SAeH9HkXU0YqPKTKQ2o8pM5D+vyg//X/+sef1w3S5CF9/vHnlF9IY+wbpM1DOjik32D3iUiFh1R5SI2H1HlIg4c0eUi86d1507vzpvfgTe/Bm96DN70Hb3oP3vQevOk9eNN78Kb34E3vwZvekze9J296T970nrzpPXnTe/Km9+RN78mb3pM3vSdvei/e9F686b1403vxpvfiTe/Fm96LN70Xb3ov3vRevOm9edN786b35k3vzZvemze9N296b9703rzpvXnTe/Om9+FN78Ob3oc3vQ9veh/e9D686X140/vwpvfhTe+Dm97jwk3vceGm9/j8nevZ/n7DePY7pMZD6jykwUP6+PSea/1CWle/Qfr49F6j/4206g3S5v3FHRzS5+8GZ6TCQ6q437jPX82Nv3GFN70Lb3p//mZsRlo8pM37jTu437jKm96VN70rr3tXXvf+/A3O+Bv3+WuZ+TeON70rb3pXXveuvO79+buW8Tfu83ct429c403vxpven79rmZF43bvxNieNtzlpvOndeNO787p353XvztucdN7mpPOmd+dN787r3p3XvTtvc9J5m5PBm96DN70Hr3sPXvf+/F3L+Bs3eJuTwZvegze9B697D173nrzNyeRtTiZvek/e9P78XcuMxOvek7c5mbzNyeRN78mb3ovXvRevey/e5mTxNieLN70Xb3ovXvdevO69eJuTxducbN703rzpvXnde/O69+fvWsbfuM3bnGze9N686b153XvzuvfhbU4Ob3NyeNP78Kb35+9aZiRe9z68zcnhbU4Ob3of3PSeF657zwvXveeF25zMC7c5mRduek/eXct54br3vHDde164zcm8cJuTybtrOXl3LWfBde9ZcN17/oa7luk3ruA2J5N313Ly7lrOguves/C6d8VtTmbFbU4m767l5N21nL/hrmVE4nXvituczIrbnEzeXcvJu2s5G697N173brzNSeNtTnh3LSfvruVsvO7deN278TYnjbc54d21nLy7lrPzunfnde/fcNcy/cZ13uaEd9dy8u5azs7r3p3XvQdvczJ4mxPeXcvJu2s5f8Ndy4jE696DtzkZvM0J767l5N21nJPXvSeve0/e5mTyNie8u5aTd9dyTl73nrzuPXmbk8nbnPDuWk7eXcu5eN178br3b7hrmX7jFm9zwrtrOXl3Lefide/F696btznZvM0J767l5N21nL/hrmVE4nXvzducbN7mhHfXcvLuWs7D696H170Pb3NyeJsT3l3LybtrOQ+vex9e9z68zcnBbU4W767l4t21XLzPtVy8z7V8/ZOn/catC7c5Wby7lot313Lx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b1L8Rhum0L42pOq5dF/pTYpqgq30JkW5NqTqKbC070sXtTLSbfvffnTbvjZ02642vEnxG23otn1tOPPha8MU2tfG0MbVhim0rw2pei7dV3qToppgK71JUa4NqXoKLO370kWtjHTb7rdfpZcuyrWh2/a1MbRxtaHb9rXhzIevDVNoXxum0L42TKFdbTq/SXFF95XepKgm2EpvUpRrQ6qeAkv7vnRRKyPdtv/tR7fta0O37WtDt+1rQ7ftasObFL/Rhim0rw1TaF8bptC+Ngbde3Rf6U2KaoKt9CZFuTak6imwtO9LF7Uy0m27336VXroo14Zu29eGbtvXhm7b18bQxtWGKbSvDVNoXxum0L42pOq5dF/pTYpigt0qvUlRrg2pegIs3fq+dFErI9229+23PQxtXG3otn1t6LZ9bei2fW048+FrwxTa1YY3KX6jDVNoXxtS9Ty63yq9SVFNsJXepCjXhlQ9BZb2femiVka6bf/bj27b14Zu29WGNyl+ow3dtq8NZz58bZhC+9oY2rjaMIX2tSFVz6X7Sm9SVBNspTcpyrUhVU+BpX1fuqiVkW7b/far9NJFuTZ02742hjauNnTbvjac+fC1YQrta8MU2teGKbSrTec3Ka7ovtKbFNUEW+lNinJtSNVTYGnfly5qZaTb9r/96LZ9bei2fW3otn1t6LZdbXiT4jfaMIX2tWEK7WvDFNrXxqB7j+4rvUlRTbCV3qQo14ZUPQWW9n3polZGum3326/SSxfl2tBt+9rQbfva0G372hjauNowhfa1YQrta8MU2teGVD2X7iu9SVFNsJXepCjXhlQ9BZb2femiVka6bffbr9JLF+Xa0G372tBt+9rQbfvacObD14YptKsNb1L8Rhum0L42pOq5dF/pTYpqgq30JkW5NqTqKbC070sXtTLSbfvffnTbvjZ02642vEnxG23otn1tOPPha8MU2tfG0MbVhim0rw2pei7dV3qToppgK71JUa4NqXoCLB19X7qolZFu2/v2G5VeuijXhm7b18bQxtWGbtvXhjMfvjZMoX1tmEL72jCFdrXp/CbFBd2PSm9SFBPsqPQmRbk2pOopsLTvSxe1MtJt+99+dNu+NnTbvjZ02742dNuuNrxJ8RttmEL72jCF9rVhCu1rY9C9R/eV3qSoJthKb1KUa0OqngJL+750USsj3bb77VfppYty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x5Ol/+MD2YsPtGX7QD/8TbY9Hvvvv37+38f+4iPtsR/pfvGR7Kc/0ti+ppmPMV59pJnvIx0//pHur07tse+vHgBnvo90/fRHmo+vZuQxXy7cne4j/XSO7vY4Hv/Y+/hjbvzPR9ryfaQff3qf5/j6SOf94ul97/k+0o8/vc95/fGRXnzt3jPyI12PF8+l+8ef3pdt/3ykP/+3vz7Sme8j/fjT+xrnHx/plb3v2I/030/v8fjxp/cT8b4+0n2fLz7Slu8jjXwfac/3kX766f3s4b6+dv/vO/jFR5r5PtIR+pGu8eIjnfm8dOX7SHe6j7Tle3r/dDLf09L79Y+954vvuJ9Oz3vnI+3pnktbvqf3NtM9Krcj347L9/Te8j29t3xP759OF3vjuTTyPb3HSPdcGvme3sPSPSrHzLfj8j29R76n98j39P7pVKU3nkt7vqf3vqV7Lu35nt77nu5R+dNJPG/suD3f03vP9/Te8z29fzpH5p3nUr6ntz3SPZcs39PbRrpHpeWbe1u+p7fle3pbvqf3TydivPNcyvf0tjvdc2nme3rPLd2jcub71XLme3rPfE/vme/pPY90z6WZ7+k9r3zPpXxP7+OR7lF55DtzcuR7eh/5nt5Hvqf3MdM9l458T+/jzPdcyvf0Pu50j8oz35mTM9/T+8z39D7zPb1/+m7oG8+lM9/T+zzSPZfOfE/v88r3qMx35uTK9/S+8j29r3xP72tP91y68j29r3znva98T+/rTPeovPKdObnyPb3vfE/vO9/T+8533vvO9/S+Ld1z6c739L7z3da58505ufM9ve90T+89313L/ZHuvPf+SPf03h/pznvvj3RP7/2R7rbO/kh35mTPd9dyz3fXcs9313Lf0p333vPdtdy3dOe993x3Lffgu5avHpVbujMne767lnu+u5Z7vruW+5buvPee767lPtKd997z3bXcR7rbOvuP37Vc77h8dy33fHct93x3LfeR7rz3nu+u5b6nO++957true/pbuvse7ozJ3u+u5Z7vruWe767lvue7rz3nu+u5b6nO++957truVu62zq7pTtzsue7a7nnu2u557truVu68957vruWu6U7773nu2u5z3S3dfaZ7szJnu+u5Z7vruWe767lPtOd997z3bXcZ7rz3nu+u5b7THdbZz/ynTnJd9dyz3fXcs9313L/8buW6+dSvruW+5HuvPee767lfqS7rbMf+c6c5Ltruee7a7nnu2u5n+nOe+/57lruZ7rz3nu+u5b7me62zn7mO3OS767lnu+u5Z7vruV+5Tvvne+u5R5w13L1XMp313K/0t3W2a98Z07y3bXc89213PPdtdzvfOe989213O98573z3bXc73y3de58Z07y3bXc89213PPdtbRHuvPelu+upT3Snfe2fHct7WHZHpX2SHfmxPLdtbR8dy0t311Le6Q772357lralu68t+W7a2lbuts69uN3Ldc7Lt9dS8t319Ly3bW0Ld15b8t319JGuvPelu+upY10t3VspDtzYvnuWlq+u5aW766ljXTnvS3fXUsb6c57W767lranu61je7ozJ5bvrqXlu2tp+e5a2p7uvLflu2tpe7rz3pbvrqVZuts6ZunOnFi+u5aW766l5btraZbuvLflu2tplu68t+W7a2mW7raOzXRnTizfXUvLd9fS8t21tB+/a7l+LuW7a2kz3Xlvy3fX0ma62zo28505yXfX0vLdtbR8dy3tSHfe2/LdtbQj3Xlvy3fX0o50t3XsyHfmJN9dS8t319Ly3bW0M915b8t319IC7lqunkv57lrame62jp35zpzku2tp+e5aWr67lnblO++d766lXfnOe+e7a2lXuts6duU7c5LvrqXlu2tp+e5a2p3vvHe+u5Z25zvvne+upQXftXz1qLzznTnJd9fS8t21tHx3Le1Od9575rtrOR/pznvPfHct5yPdbZ35sGw7bua7aznz3bWc+e5azke6894z313LuaU77z3z3bWcW7rbOnNLd+Zk5rtrOfPdtZz57lrOLd1575nvruXc0p33nvnuWs6R7rbOHOnOnMx8dy1nvruWM99dyznSnfee+e5azpHuvPfMd9dy7ulu68w93ZmTme+u5cx313Lmu2s593TnvWe+u5ZzT3fee+a7azn3dLd1pqU7czLz3bWc+e5aznx3LeeP37VcP5fy3bWclu6898x313Jauts609KdOZn57lrOfHctZ767lnOmO+898921nDPdee+Z767lnOlu68yZ7szJzHfXcua7aznz3bWcR7rz3jPfXcsZcNdy9VzKd9dyHulu68wj35mTfHctZ767ljPfXct5pjvvPfPdtZxnuvPeM99dy3mmu60zz3xnTvLdtZz57lrOfHct55XvvHe+u5bzynfeO99dyxl81/LVo/LKd+Yk313Lme+u5cx313Je+c5757trOe98573z3bWcd77bOj9+13K94/LdtZz57lrOfHct553vvHe+u5bHI9157yPfXcvjke62zvFId+bkeKR7eh/57loe+e5aHo90572PfHctj0e6895HvruWx5buts6xpTtzcuS7a3nku2t55LtreWzpznsf+e5aHlu6895HvruWx0h3W+cY6c6cHPnuWh757loe+e5aHiPdee8j313LY6Q7733ku2t5jHS3dY493ZmTI99dyyPfXcsj313L48fvWq6fS/nuWh57uvPeR767lsee7rbOsac7c3Lku2t55LtreeS7a3lYuvPeR767loelO+995LtreVi62zqHpTtzcuS7a3nku2t55Ltrecx0572PfHctj4C7lqvnUr67lsdMd1vnmOnOnBz57loe+e5aHvnuWh5HuvPeR767lseR7rz3ke+u5XGku61zHPnOnOS7a3nku2t55LtreZzpznsf+e5aHme6895HvruWR/Bdy1ePyjPfmZN8dy2PfHctj3x3LY8z33nvfHctjyvfee98dy2PK91tnePH71qud1y+u5ZHvruWR767lseV77x3vruWx53vvHe+u5bHne+2zp3vzEm+u5ZHvruWR767lsed77x3vruWx53uvPeZ767l+Uh3W+d8pDtzcua7a3k+0j29z3x3Lc9HuvPeZ767lucj3XnvM99dy3NLd1vn3NKdOTnz3bU88921PPPdtTy3dOe9z3x3Lc8t3XnvM99dy3NLd1vnHOnOnJz57lqe+e5anvnuWp4/ftdy/VzKd9fyHOnOe5/57lqeI91tnXOkO3Ny5rtreea7a3nmu2t57unOe5/57lqee7rz3me+u5bnnu62zrmnO3Ny5rtreea7a3nmu2t5Wrrz3me+u5ZnwF3L1XMp313L09Ld1jkt3ZmTM99dyzPfXcsz313Lc6Y7733mu2t5znTnvc98dy3Pme62zjnTnTk58921PPPdtTzz3bU8j3Tnvc98dy3PI9157zPfXcsz+K7lq0flke/MSb67lme+u5ZnvruW55HuvPeZ767leaY7733mu2t5nulu65w/ftdyvePy3bU88921PPPdtTzPdOe9z3x3Lc8r33nvfHctzyvdbZ3zynfmJN9dyzPfXcsz313L88p33jvfXcvzynfeO99dy/POd1vnznfmJN9dyzPfXcsz313L88533jvfXcvzznfeO99dy+uR7rbO9Uh35uTKd9fyynfX8nqke3pfj3Tnva98dy2vR7rz3le+u5bXI91tnWtLd+bkynfX8sp31/LKd9fy+vG7luvnUr67lteW7rz3le+u5bWlu61zbenOnFz57lpe+e5aXvnuWl4j3XnvK99dy2ukO+995btreY10t3Wuke7MyZXvruWV767lle+u5bWnO+995btreQXctVw9l/Ldtbz2dLd1rj3dmZMr313LK99dyyvfXcvL0p33vvLdtbws3XnvK99dy8vS3da5LN2ZkyvfXcsr313LK99dy2umO+995btrec10572vfHctr+C7lq8elTPdmZMr313LK99dyyvfXctrpjvvfeW7a3kd6c57X/nuWl5Huts614/ftVzvuHx3La98dy2vfHctryPdee8r313L60x33vvKd9fyOtPd1rnOfGdO8t21vPLdtbzy3bW8znTnva98dy2vM99573x3La8r3W2d68p35iTfXcsr313LK99dy+vKd947313L68p33jvfXcvrzndb58535iTfXcsr313LK99dy+vOd947313L68533jvfXcvrTndb536kO3Ny57treee7a3nnu2t5Pyzbc+nOd9fyfqQ7733nu2t5P9Ld1rkf6c6c3PnuWt757lre+e5a3lu68953vruW95buvPed767lvaW7rXNv6c6c3PnuWt757lre+e5a3iPdee87313LO+Cu5eq5lO+u5T3S3da5R7ozJ3e+u5Z3vruWd767lvee7rz3ne+u5b2nO+9957tree/pbuvce7ozJ3e+u5Z3vruWd767lrelO+9957treVu68953vruWd/Bdy1ePSkt35uTOd9fyznfX8s531/K2dOe973x3Le+Z7rz3ne+u5T3T3da5f/yu5XrH5btreee7a3nnu2t5z3Tnve98dy3vI9157zvfXcv7SHdb5z7ynTnJd9fyznfX8s531/I+0p33vvPdtbyPdOe973x3Le8z3W2d+8x35iTfXcs7313LO99dy/tMd977znfX8j7Tnfe+8921vK90t3XuK9+Zk3x3Le98dy3vfHct7yvfee98dy3vK99573x3Le8r322dO9+Zk3x3Le98dy3vfHct7x+/a7l+LuW7a3nf+c5757tred/5buvc2c6czEe6u5bPj5Tt6f38SNme3s+PlO289/MjZXt6Pz9StvPez4+U7en9/EjZbus8P1K2MyfPj5Tv6Z3uruXzI+V7em/Zzns/P1K+p3fAXcvVcyndXcvnR8p2W+f5kbKdOXl+pHxP73R3Lecj3V3L50fKdt77+ZHyPb1HtvPez4+U7+k9st3WeX6kbGdOnh8p39M73V3L50fK9/Tes533fn6kfE/vPdt57+dHyvf0Dr5r+epRuWc7c/L8SPme3unuWj4/Ur6n957tvPd8pLtr+fxI2c57Pz9Svqe3Zbut8/xIlm7Hpbtr+fxI+Z7e6e5aPj9StvPez4+U7+k9s533fn6kfE/vme22zvMjZTtz8vxI+Z7e6e5aPj9Svqf3zHbe+/mR8j29Z7bz3vOR7q7l8yNlu63z/Ej5zpyku2v5/Ej5nt7p7lo+P1K2897Pj5Tv6X1kO+/9/Ej5nt5ntts6z4+U78xJuruWz4+U7+md7q7l8yNlO+/9/Ej5nt5ntvPez4+U7+l9ZrutMx9XvjMn6e5aPj9Svqd3uruWz49k6Z5L6e5aPj9SvvPe6e5aPj9Stts6z4+U78xJuruWz4+U7+md7q7l8yPlO++d7q7l8yPlO++d7q7l8yPlu61z5ztzku+u5ZbvruWW767l9kh33nvLd9dye1i259KW767l9kh3W2d7pDtzsuW7a7nlu2u55btruW3pzntv+e5ablu6895bvruW25buts62pTtzsuW7a7nlu2u55btruY105723fHctt5HuvPeW767lFnzX8tWjcqQ7c7Llu2u55btrueW7a7mNdOe9t3x3Lbc93XnvLd9dy21Pd1tn+/G7lusdl++u5ZbvruWW767ltqc7773lu2u5Wbrz3lu+u5abpbuts1m6MydbvruWW767llu+u5abpTvvveW7a7lZuvPeW767lttMd1tnm+nOnGz57lpu+e5abvnuWm4z3XnvLd9dy22mO++95btruR3pbutsR74zJ/nuWm757lpu+e5abke6895bvruW25HuvPeW767ldqS7rbOd+c6c5LtrueW7a7nlu2u5/fhdy/VzKd9dy+1Md957y3fXcjvT3dbZznxnTvLdtdzy3bXc8t213K58573z3bXcrnznvfPdtdyudLd1tivfmZN8dy23fHctt3x3Lbc733nvfHctt4C7lqvnUr67ltud77bOne/MSb67llu+u5Yj313L8Uh33nvku2s5HunOe49Huqf3eKS7rTMe6c6cjHx3LUe+u5Yj313LsaU77z3y3bUcW7rz3iPfXcsRfNfy1aNyS3fmZOS7azny3bUc+e5aji3dee+R767lGOnOe498dy3HSHdbZ/z4Xcv1jst313Lku2s58t21HCPdee+R767l2NOd9x757lqOPd1tnbGnO3My8t21HPnuWo58dy3Hnu6898h313Ls6c57j3x3LYelu60zLN2Zk5HvruXId9dy5LtrOSzdee+R767lsHTnvUe+u5ZjprutM2a6Mycj313Lke+u5ch313LMdOe9R767lmOmO+898t21HDPdbZ1x5Dtzku+u5ch313Lku2s5fvyu5fq5lO+u5TjSnfce+e5ajiPdbZ1x5Dtzku+u5ch313Lku2s5znTnvUe+u5bjTHfee+S7aznOdLd1xpnvzEm+u5Yj313Lke+u5bjynffOd9dyBNy1XD2X8t21HFe62zrjynfmJN9dy5HvruXId9dy3PnOe+e7aznufOe98921HHe+2zp3vjMn+e5ajnx3LUe+u5b7I9157z3fXcv9ke68957vruX+sGyPyv2R7szJnu+u5Z7vruWe767l/kh33nvPd9dy39Kd997z3bXct3S3dfYfv2u53nH57lru+e5a7vnuWu5buvPee767lvtId957z3fXch/pbuvsI92Zkz3fXcs9313LPd9dy32kO++957truY905733fHct9z3dbZ19T3fmZM9313LPd9dyz3fXct/Tnffe89213Pd05733fHctd0t3W2e3dGdO9nx3Lfd8dy33fHctd0t33nvPd9dyt3Tnvfd8dy13S3dbZ//5u5bj63/6+X+f9uIj/XjvPe5/PtJzevviI418H2nP95F++un9/Bj3Px/JXtl75vtIR76PdP68l7Y/PtL+4iO9fnqfY//9r5zH9udH+vWf3R/9Z86dxev4+s+ua774z7bP/rPXT5PLzn/+s+PFf7Yv/7N7vPjPXu/K+/xtiuOxXS/+s7n8z+yVkq/dfd/zn3/tfPGfnZ/9Z9dntd0f1ebcjVp9SOf+0vI/Gx/V5twDWtZmn33I+dl/dnxW2/lZbddnH/L+6D9z7mCsanPuSaxqc+4yLD/k/tl/9tmz5PrsWXJ99iy5PnuWXJ89S67PniX3Z8+S+7Nnyf3Zs+T+7Flyf/YsuT97ltyfPUvuz54l92fPkvujZ4k9PnqW2OOjZ4k9xmcfcv/sP7PPapuf1XZ89iHPz/6z67PaPnqW2PbRs8S27bP/7KNniW37Z7XZZx9yfvafHZ/Vdn5W2/XZh/zsWTI+e5aMz54l47NnyfjsWTI+e5aMz54l47NnyfjsWTI+e5aMz54l+2fPkv2zZ8n+2bNk/+xZsn/2LNk/e5bsnz1L9s+eJftnz5L9s2eJffYssc+eJfbZs8Q+e5bYZ88S++xZYp89S+yzZ4l99iyxz54l87NnyfzsWTI/e5bMz54l87NnyfzsWTI/e5bMz54l87NnyfzsWXJ89iw5PnuWHJ89S47PniWfzV7ts9mrfTZ7tc9mr/bZ7NU+m73aZ7NX+2z2ap/NXu2z2at9Nnu1z2av9tns1T6bvdpns1f7bPZqn81e7bPZq302e7XPZq/22ezVPpu92mezV/ts9mqfzV7ts9mrfTZ7tc9mr/bZ7NU+m73aZ7NX+2z2ap/NXu2z2at9Nnu1z2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2av87PZ6/xs9jo/m73Oz2avx2ez1+Oz2evx2ez1+Gz2+vwIn9U2P6vt+OxDnp/9Z9dntX30LDk+m70en81ej89mr8dns9fjs9nr8dns9fhs9np8Nns9Xs9ej+eG+v2fHft/XJt7cYPwnF8Xm89jvvg37v/3/8brqe7/9m9cj6+b9dd2v/g3th/4N8YP/Bv7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bnImbOTrPusmZ/ZZNzmzz7rJmX3WTZcP+/hqN1o32Y3WTXajdZPdaN1kw0a+brRushutm+xG6ya70brJbrRuchutm9xG6ya30brJfdC6KacrjmJCy9ewka8ftG7q+vpB66aurx+0bur6+kHrpq6vH7Ru6vmKfiO6qK8ftG7q+vpB66aurxutm9Bvuhb1daN1E/qtzqK+brRuQr/BWNTXjdZN6Lf1ivq60boJ/Wba3/ha3PXLJbb2m9Dvg/2Nr9bm6+aatbW2vA1beftBa6cXvP2g1dML3n7Q+ukFbz9oBfWCtx+0hup7i36vpLC3H7SOesHbD1pJveDtVmsp9HsDhb3dai2Ffk+esLdbraXQ74UT9nartRT6PWjC3m61lkK/90vY263WUuj3XAl7u9VaCv1eJ2Fvt1pLod9jJOztVmsp9Ht7hL3dai2Ffk+NsLdbraXQ72UR9nartRT6PSTC3m61lkK/d0PY263WUuj3TAh7u9VaCv1eBWFvt1pLod8jIOztVmsp9L75wt5utZZC7xMv7O1Wayn0vujC3m61lvqkjuQveLvVWuqTupK/4O1Wa6lP6kz+grdbraU+qTv5C97utJbyn9Sh/AVvd1pL+U/qUv6CtzutpbwJW3m701rKf1K38he83Wkt5T+pY/kL3m61lvqkruUveLvVWuqTOpe/4O1Wa6lP6l7+grdbraU+qYP5C95utZb6pC7mL3i71VrqkzqZv+DtVmupT+pm/oK3W62lPqmj+QvebrWW+qSu5i94u9Va6pM6m7/g7VZrqU/qbv6Ct1utpT6pw/kL3m61lvqkLucveLvVWuqTOp2/4O1Wa6lP6nb+grdbraU+qeP5C95utZb6pK7nL3i71Vpqq77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+536rvud+q77nfqu+52Grvudhq77nYau+52GrvufBhK283WktFbbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hrbqex626nsetup7Hj6q77kr179tvSktbz9pLeVLvnp7+Rm+5a3AWiqldECq5rm3Nhz4bfyBqPFlZ+w1NJ3x5fmXvavhCsP7fP/lb1fLx7gabiETYmi4WreZVYl254vMqkSv81Vm1e0zq36fWQ37zGrcZ1bTPrO6z2op7rNaivusltI+q6W0z2op7bNaSvusliSamK8yq/usltI+q6W0z2op7bNaSvuslvI+q6W8z2op77NayvusliTalK8yq/uslvI+q6W8z2op77Nayvuslso+q6Wyz2qp7LNakuhFnur1wIXPpnfyw6bjmIgt3ZMf+fDV55A6347Zf3853p3pseXqasB2NV1x+GLsP7oa95nVtM+s5n1mtewzq3WbWZVoO77IrEr0HF9lVt0+s7rPakmi1fgqs7rPaqnus1qq+6yW6j6rpbrNaimabVZL0WyzWopmm9VSNNuslqIJ+8zqNqulaLZZLUWzzWopmm1WS9Hss1qy+6yW7D6rJbvPasnus1qSaBe+yqzus1qy+6yWLPZqqfjj26X77Z6r2Kul6q/off1nV2evlmI5wCfbC0m98zDRmU2J6Zyeic4yYtoR4xgx7YjxjJh2xARGTDtiIiOmHTGJEdOOmMyIaUdMYcS0I4Yr33bEeK582xHjufI9iRiufE8ihivfk4gJjJh2xHDlexIxXPmeRAxXvicRw5XvScRw5duOmMCVbztiAle+JxHDle9JxHDlexIxgRHTjhiufE8ihivfk4jhyvckYrjyPYkYrnzbERO58m1HTOTK9yRiuPI9iRiufE8iJjBi2hHTXPmWctxgVWqI98R8D2uuC6vJ17OE1ZraGNZcNdUQrtNQ4z2zx7DmmqImd52QmlL4Mezyj//v//k//uf//B//2//7f/4f/7//z//9P/6P//3/+jPU/PlfavfFsCYcl5SZcDvbmL7OK7Y7TPQGuZFBfmRQGBkURwalkUF5ZFAZGVR/PygbMzLIjgxyI4P8yKAw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","file_map":{"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"10":{"source":"pub struct Vec<T> {\n    pub(crate) slice: [T],\n}\n// A mutable vector type implemented as a wrapper around immutable slices.\n// A separate type is technically not needed but helps differentiate which operations are mutable.\nimpl<T> Vec<T> {\n    pub fn new() -> Self {\n        Self { slice: &[] }\n    }\n\n    // Create a Vec containing each element from the given slice.\n    // Mutations to the resulting Vec will not affect the original slice.\n    pub fn from_slice(slice: [T]) -> Self {\n        Self { slice }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index\n    /// points beyond the end of the vector.\n    pub fn get(self, index: u32) -> T {\n        self.slice[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        self.slice[index] = value;\n    }\n\n    /// Push a new element to the end of the vector, returning a\n    /// new vector with a length one greater than the\n    /// original unmodified vector.\n    pub fn push(&mut self, elem: T) {\n        self.slice = self.slice.push_back(elem);\n    }\n\n    /// Pop an element from the end of the given vector, returning\n    /// a new vector with a length of one less than the given vector,\n    /// as well as the popped element.\n    /// Panics if the given vector's length is zero.\n    pub fn pop(&mut self) -> T {\n        let (popped_slice, last_elem) = self.slice.pop_back();\n        self.slice = popped_slice;\n        last_elem\n    }\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    pub fn insert(&mut self, index: u32, elem: T) {\n        self.slice = self.slice.insert(index, elem);\n    }\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the removed element\n    pub fn remove(&mut self, index: u32) -> T {\n        let (new_slice, elem) = self.slice.remove(index);\n        self.slice = new_slice;\n        elem\n    }\n\n    /// Returns the number of elements in the vector\n    pub fn len(self) -> u32 {\n        self.slice.len()\n    }\n}\n\nmod tests {\n    use crate::collections::vec::Vec;\n\n    #[test]\n    fn set_updates_values_properly() {\n        let mut vec = Vec { slice: &[0, 0, 0, 0, 0] };\n\n        vec.set(0, 42);\n        assert_eq(vec.slice, &[42, 0, 0, 0, 0]);\n\n        vec.set(1, 43);\n        assert_eq(vec.slice, &[42, 43, 0, 0, 0]);\n\n        vec.set(2, 44);\n        assert_eq(vec.slice, &[42, 43, 44, 0, 0]);\n\n        vec.set(1, 10);\n        assert_eq(vec.slice, &[42, 10, 44, 0, 0]);\n\n        vec.set(0, 0);\n        assert_eq(vec.slice, &[0, 10, 44, 0, 0]);\n    }\n\n    #[test(should_fail)]\n    fn panics_when_writing_elements_past_end_of_vec() {\n        let mut vec = Vec::new();\n        vec.set(0, 42);\n\n        // Need to use println to avoid DIE removing the write operation.\n        crate::println(vec.get(0));\n    }\n}\n","path":"std/collections/vec.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"26":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// docs:start:sha256\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\n#[deprecated(\"sha256 is being deprecated from the stdlib, use https://github.com/noir-lang/sha256 instead\")]\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        // Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    // Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        // Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        // Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        // Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"61":{"source":"mod tests;\nmod utils;\n\nuse jwt::JWT;\n\nuse zkemail::{\n    headers::{body_hash::get_body_hash, email_address::get_email_address},\n    MAX_EMAIL_ADDRESS_LENGTH, partial_hash::partial_sha256_var_end,\n    dkim::RSAPubkey, Sequence,\n    KEY_LIMBS_1024,\n    KEY_LIMBS_2048\n};\n\nuse utils::position_and_salary_extractor::{\n    extract_position_from_email_body, // @dev - extract_position_from_email_body() function\n    extract_salary_from_email_body    // @dev - extract_salary_from_body() function\n}; \nuse utils::email_dkim_verifier::{\n    MAX_EMAIL_HEADER_LENGTH, MAX_EMAIL_BODY_LENGTH, \n    //verify_email_2048_bit_dkim,                         // @dev - verify_email_2048_bit_dkim() function\n    //verify_email_1024_bit_dkim_without_body_hash_check  // @dev - verify_email_1024_bit_dkim_without_body_hash_check() function\n    verify_email_2048_bit_dkim_without_body_hash_check    // @dev - verify_email_2048_bit_dkim_without_body_hash_check() function\n};\n\n// @dev - [NOTE]: The following imported-variables are temporary variables. They are stored into the \"test_header\" and \"test_body\" for passing the verify_email_2048_bit_dkim() function. Thus, this should be removed once appropreate implementation will be done in the future.\nuse tests::test_inputs::{\n    EmailLarge::{\n        HEADER, BODY,\n    },\n    EmploymentOfferEmailLarge::{\n        EMPLOYMENT_OFFER_EMAIL_HEADER, EMPLOYMENT_OFFER_EMAIL_BODY,\n        POSITION_BODY, SALARY_BODY,\n    },\n};\n\nglobal MAX_PARTIAL_DATA_LENGTH: u32 = 640; // signed data length after partial SHA\nglobal MAX_DOMAIN_LENGTH: u32 = 64;\nglobal MAX_EMAIL_LENGTH: u32 = 128;\nglobal MAX_POSITION_LENGTH: u32 = 128;\nglobal MAX_SALARY_LENGTH: u32 = 32;\n\n// Rating must be between 1 and 5\nfn verify_rating(rating: u8) {\n    assert(rating >= 1, \"rating must be at least 1\");\n    assert(rating <= 5, \"rating must be at most 5\");\n}\n\n/**\n * @brief Verify JWT signature (RSA/SHA256 only) and validate domain field\n * Also verify position and salary claims\n *\n * @param partial_data: OIDC JWT (id_token) base64 data (`$header.$payload`) as byte array of ascii characters\n *                      We do partial SHA on the data up to hd field outside of the circuit, to reduce constraints\n *                      This field only contains the bytes after partial SHA; padded to MAX_PARTIAL_DATA_LENGTH\n * @param partial_hash: The 256-bit partial hash of the `data`\n * @param full_data_length: The full length of the `data` (before partial SHA)\n * @param base64_decode_offset: Offset needed in `partial_data` to make the payloadB64 a multiple of 4\n *                    Signed data is $header.$payload. $payload might not be a multiple of 4 in `partial_data`, so we need to offset\n *                    Not attack-able by giving an incorrect offset, as string match of domain will fail\n * @param jwt_pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n * @param jwt_pubkey_redc_params_limbs: RSA reduction parameters limbs\n * @param jwt_signature_limbs: RSA signature limbs\n * @param domain: Domain name (`hd` key) as a byte array of ascii characters padded to MAX_DOMAIN_LENGTH\n * @param position: Position at the company as a byte array of ascii characters padded to MAX_POSITION_LENGTH\n * @param salary: Salary at the company as a byte array of ascii characters padded to MAX_SALARY_LENGTH\n * @param work_life_balance: Work-life balance rating (1-5)\n * @param culture_values: Culture and values rating (1-5)\n * @param career_growth: Career growth rating (1-5)\n * @param compensation_benefits: Compensation and benefits rating (1-5)\n * @param leadership_quality: Leadership quality rating (1-5)\n * @param operational_efficiency: Operational efficiency rating (1-5)\n **/\nfn main(\n    partial_data: BoundedVec<u8, MAX_PARTIAL_DATA_LENGTH>,\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    base64_decode_offset: u32,\n    jwt_pubkey_modulus_limbs: pub [u128; 18],\n    jwt_pubkey_redc_params_limbs: [u128; 18],\n    jwt_signature_limbs: [u128; 18],\n    domain: pub BoundedVec<u8, MAX_DOMAIN_LENGTH>,\n    position: pub BoundedVec<u8, MAX_POSITION_LENGTH>,   // Position, which is part of Email Body-extracted from the Entire Email Body.\n    salary: pub BoundedVec<u8, MAX_SALARY_LENGTH>,       // Salary, which is part of Email Body-extracted from the Entire Email Body.\n    work_life_balance: pub u8,\n    culture_values: pub u8,\n    career_growth: pub u8,\n    compensation_benefits: pub u8,\n    leadership_quality: pub u8,\n    operational_efficiency: pub u8,\n\n    // @dev - Input parameters for email verification /w ZKEmail.nr\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,  // Entire Email Header\n    //body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>,    // Entire Email Body\n    //pubkey: RSAPubkey<KEY_LIMBS_1024>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    //signature: [Field; KEY_LIMBS_1024],\n    signature: [Field; KEY_LIMBS_2048],\n    //body_hash_index: u32,\n    dkim_header_sequence: Sequence\n) {\n    // Init JWT struct and verify signature\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        jwt_pubkey_modulus_limbs,\n        jwt_pubkey_redc_params_limbs,\n        jwt_signature_limbs,\n    );\n    jwt.verify();\n\n    // Assert email_verified claim\n    jwt.assert_claim_bool(\"email_verified\".as_bytes(), true);\n\n    // Get email claim\n    let email: BoundedVec<u8, MAX_EMAIL_LENGTH> = jwt.get_claim_string(\"email\".as_bytes());\n\n    // Get domain start_index from email claim - unconstrained, but we verify the domain bytes below\n    // Safety: This function is unconstrained but its output is verified by the domain check below\n    let domain_start_index = unsafe { get_domain_start_index_in_email(email) };\n\n    // Verify domain passed is present in the email claim after the @\n    assert(email.storage()[domain_start_index - 1] == 64, \"char before domain is not '@'\");\n    for i in 0..MAX_DOMAIN_LENGTH {\n        assert(email.storage()[domain_start_index + i] == domain.storage()[i], \"invalid domain\");\n    }\n\n    // Verify position and salary claims\n    // These are separate inputs, NOT from the JWT\n    let position_claim: BoundedVec<u8, MAX_POSITION_LENGTH> = position;\n    for i in 0..MAX_POSITION_LENGTH {\n        assert(position_claim.storage()[i] == position.storage()[i], \"invalid position\");\n    }\n\n    let salary_claim: BoundedVec<u8, MAX_SALARY_LENGTH> = salary;\n    for i in 0..MAX_SALARY_LENGTH {\n        assert(salary_claim.storage()[i] == salary.storage()[i], \"invalid salary\");\n    }\n\n    // Verify ratings are valid (1-5)\n    verify_rating(work_life_balance);\n    verify_rating(culture_values);\n    verify_rating(career_growth);\n    verify_rating(compensation_benefits);\n    verify_rating(leadership_quality);\n    verify_rating(operational_efficiency);\n\n    // @dev - [TODO]: The following variables are temporary variables. They are just for passing the verify_email_2048_bit_dkim() function. Thus, this should be replaced with a given \"header\" and \"body\" going forward.\n    let test_header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH> = HEADER;\n    //let test_body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH> = BODY;\n\n    // @dev - Verify an arbitrary email, which is signed by a 2048-bit RSA DKIM signature - without (skipping) body hash check\n    //let return_value: [Field; 2] = verify_email_1024_bit_dkim_without_body_hash_check(\n    let return_value: [Field; 2] = verify_email_2048_bit_dkim_without_body_hash_check(\n        //test_header,  // [TODO]: Should be replaced with a given \"header\" in the future.\n        header,\n        pubkey,\n        signature,\n        dkim_header_sequence\n    );\n    \n    // let return_value: [Field; 2] = verify_email_2048_bit_dkim(\n    //     //test_header,  // [TODO]: Should be replaced with a given \"header\" in the future.\n    //     header,\n    //     //test_body,    // [TODO]: Should be replaced with a given \"body\" in the future.\n    //     body,\n    //     pubkey,\n    //     signature,\n    //     body_hash_index,\n    //     dkim_header_sequence\n    // );\n\n    // @dev - [TODO]: The following variables are temporary variables. They are just for passing the is_position_found_in_email_body() and is_salary_found_in_email_body() function. Thus, this should be replaced with a given \"body\"/\"position\"/\"salary\" going forward.\n    let test_email_body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH> = EMPLOYMENT_OFFER_EMAIL_BODY;\n    let test_position: BoundedVec<u8, MAX_POSITION_LENGTH> = POSITION_BODY;\n    let test_salary: BoundedVec<u8, MAX_SALARY_LENGTH> = SALARY_BODY;\n\n    /// @dev - Validate to check whether a given \"position\" is included in the entire email body or not.\n    /// @dev - Compare a given \"position\" (BoundedVec<u8, MAX_POSITION_LENGTH>) and a given \"body\" (BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>)\n    let is_position_found_in_email_body: bool = unsafe { is_position_found_in_email_body(test_position, test_email_body) };\n    //let is_position_found_in_email_body: bool = unsafe { is_position_found_in_email_body(position, body) };\n    assert(is_position_found_in_email_body == true, \"Position can not be found in email body\");\n\n    /// @dev - Validate to check whether a given \"salary\" is included in the entire email body or not.\n    /// @dev - Compare a given \"salary\" (BoundedVec<u8, MAX_SALARY_LENGTH>) and a given \"body\" (BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>)\n    let is_salary_found_in_email_body: bool = unsafe { is_salary_found_in_email_body(test_salary, test_email_body) };\n    //let is_salary_found_in_email_body: bool = unsafe { is_salary_found_in_email_body(salary, body) };\n    assert(is_salary_found_in_email_body == true, \"Salary can not be found in email body\");\n}\n\n\n/**\n * @notice - Get (Identify) a start index of domain in email\n */\nunconstrained fn get_domain_start_index_in_email(email: BoundedVec<u8, MAX_EMAIL_LENGTH>) -> u32 {\n    let mut domain_start_index = 0;\n    for i in 0..MAX_EMAIL_LENGTH {\n        if email.storage()[i] == (\"@\".as_bytes())[0] {\n            domain_start_index = i + 1;\n            break;\n        }\n    }\n\n    domain_start_index\n}\n\n/**\n * @dev - Validate to check whether a given \"position\" is included in the entire email body or not.\n * @dev - Compare a given \"position\" (BoundedVec<u8, MAX_POSITION_LENGTH>) and a given \"body\" (BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>)\n */\nunconstrained fn is_position_found_in_email_body(\n    position: BoundedVec<u8, MAX_POSITION_LENGTH>, \n    body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>\n) -> bool {\n    /// @dev - Logging\n    let position_storage = position.storage(); \n    let body_storage = body.storage(); \n    println(f\"position.storage(): {position_storage}\\n\");\n    println(f\"body.storage(): {body_storage}\\n\");\n\n    /// @dev - Look for \"position\" in \"email_body\"\n    let mut is_position_found_in_email_body: bool = false;\n    for i in 0..body.len() {\n        if (position.storage()[0] == body.storage()[i]) {\n            if (position.len() == 1) { // @dev - The position and the sentence in the Email Body would completely be matched - In the case that the number of vectors of \"position\" is \"1\". \n                is_position_found_in_email_body = true;\n                break;\n            }\n\n            let mut position_array: Vec<u8> = Vec::new();\n            //let mut position_array: BoundedVec<Field, position.len()> = BoundedVec::new();\n            for j in 1..position.len() {\n                if (position.storage()[j] == body.storage()[i+j]) {\n                    position_array.push(position.storage()[j]);\n                    println(f\"position_array: {position_array}\\n\");\n\n                    /// @dev - Logging\n                    let position_len = position.len() - 1;\n                    let position_array_len = position_array.len();\n                    println(f\"position.len() - 1: {position_len}\\n\");\n                    println(f\"position_array.len(): {position_array_len}\\n\");\n\n                    /// @dev - The position and the sentence in the Email Body would completely be matched - In the case that the number of vectors of \"position\" is \"many\" (Not \"1\"). \n                    if ((j == position.len() - 1) & (position_array.len() == position.len() - 1)) { /// @dev - Since \"j\" get started from \"1\", \"1\" should be subtracted from the position.len()\n                        is_position_found_in_email_body = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    is_position_found_in_email_body\n}\n\n/** \n * @dev - Validate to check whether a given \"salary\" is included in the entire email body or not.\n * @dev - Compare a given \"salary\" (BoundedVec<u8, MAX_SALARY_LENGTH>) and a given \"body\" (BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>)\n * @dev - In the following implementation, the maximum number of sequences-matched is 5. (\"5\" is enuough for judging whether a given salary is included in the email body or not)\n */\nunconstrained fn is_salary_found_in_email_body(\n    salary: BoundedVec<u8, MAX_SALARY_LENGTH>, \n    body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>\n) -> bool {\n    let mut is_salary_found_in_email_body: bool = false;\n    for i in 0..body.len() {\n        if (salary.storage()[0] == body.storage()[i]) {\n            if (salary.len() == 1) {\n                // @dev - Salary is found in the email body\n                is_salary_found_in_email_body = true;\n                break;\n            }\n\n            let mut salary_array: Vec<u8> = Vec::new();\n            //let mut salary_array: BoundedVec<Field, salary.len()> = BoundedVec::new();\n            for j in 1..salary.len() {\n                if (salary.storage()[j] == body.storage()[i+j]) {\n                    salary_array.push(salary.storage()[j]);\n                    println(f\"salary_array: {salary_array}\\n\");\n\n                    /// @dev - Logging\n                    let salary_len = salary.len() - 1;\n                    let salary_array_len = salary_array.len();\n                    println(f\"salary.len() - 1: {salary_len}\\n\");\n                    println(f\"position_array.len(): {salary_array_len}\\n\");\n\n                    // @dev - The position and the sentence in the Email Body would completely be matched - In the case that the number of vectors of \"position\" is \"many\" (Not \"1\"). \n                    if ((j == salary.len() - 1) & (salary_array.len() == salary.len() - 1)) { /// @dev - Since \"j\" get started from \"1\", \"1\" should be subtracted from the position.len()\n                        is_salary_found_in_email_body = true;\n                        break;\n                    }\n                }\n            }\n         }\n    }\n\n    is_salary_found_in_email_body\n}","path":"/Users/unomasanori/Projects/DEMO_MVP/【Noir】NoirHack - OpenBands (zkGlassdoor 👓)/actual-impl/OpenBands/circuit/src/main.nr"},"64":{"source":"use std::{collections::bounded_vec::BoundedVec, hash::{pedersen_hash, sha256_var}};\nuse zkemail::{\n    dkim::RSAPubkey, \n    headers::body_hash::get_body_hash, \n    KEY_LIMBS_1024,\n    KEY_LIMBS_2048, \n    Sequence\n};\n\nglobal MAX_EMAIL_HEADER_LENGTH: u32 = 1504;\n//global MAX_EMAIL_HEADER_LENGTH: u32 = 512;\nglobal MAX_EMAIL_BODY_LENGTH: u32 = 32000;\n//global MAX_EMAIL_BODY_LENGTH: u32 = 1024;\n\n\n/**\n * Verify an arbitrary email signed by a 2048-bit RSA DKIM signature\n * @dev TOTAL CONSTRAINTS: ~222,783\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param body - The email body, 0-padded at end to the MAX_EMAIL_BODY_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param body_hash_index - The index of the body hash in the partial hash array\n * @param dkim_header_sequence - The index and length of the DKIM header field\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\nfn verify_email_1024_bit_dkim(\n//fn verify_email_2048_bit_dkim(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    body: BoundedVec<u8, MAX_EMAIL_BODY_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_1024>,\n    //pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_1024],\n    //signature: [Field; KEY_LIMBS_2048],\n    body_hash_index: u32,\n    dkim_header_sequence: Sequence,\n) -> pub [Field; 2] {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n    assert(body.len() <= MAX_EMAIL_BODY_LENGTH);\n\n    // ~ 86,553 constraints\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // ~ 6,289 constraints\n    // extract the body hash from the header\n    let signed_body_hash = get_body_hash(header, dkim_header_sequence, body_hash_index);\n\n    // ~ 113,962 constraints\n    // hash the asserted body\n    let computed_body_hash: [u8; 32] = sha256_var(body.storage, body.len() as u64);\n\n    // compare the body hashes\n    assert(\n        signed_body_hash == computed_body_hash,\n        \"SHA256 hash computed over body does not match body hash found in DKIM-signed header\",\n    );\n\n    // ~ 10,255 constraints\n    // hash the pubkey and signature for the standard outputs\n    let email_nullifier = pedersen_hash(signature);\n    [pubkey.hash(), email_nullifier]\n}\n\n\n/**\n * Verify an arbitrary email signed by a 2048-bit RSA DKIM signature - without (skipping) body hash check\n * @dev TOTAL CONSTRAINTS: ~222,783\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param dkim_header_sequence - The index and length of the DKIM header field\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\nfn verify_email_2048_bit_dkim_without_body_hash_check(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n    dkim_header_sequence: Sequence,\n) -> pub [Field; 2] {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    // ~ 86,553 constraints\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // ~ 10,255 constraints\n    // hash the pubkey and signature for the standard outputs\n    let email_nullifier = pedersen_hash(signature);\n    [pubkey.hash(), email_nullifier]\n}\n\n\n/**\n * Verify an arbitrary email signed by a 1024-bit RSA DKIM signature - without (skipping) body hash check\n * @dev TOTAL CONSTRAINTS: ~222,783\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param dkim_header_sequence - The index and length of the DKIM header field\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\nfn verify_email_1024_bit_dkim_without_body_hash_check(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_1024>,\n    signature: [Field; KEY_LIMBS_1024],\n    dkim_header_sequence: Sequence,\n) -> pub [Field; 2] {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    // ~ 86,553 constraints\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // ~ 10,255 constraints\n    // hash the pubkey and signature for the standard outputs\n    let email_nullifier = pedersen_hash(signature);\n    [pubkey.hash(), email_nullifier]\n}","path":"/Users/unomasanori/Projects/DEMO_MVP/【Noir】NoirHack - OpenBands (zkGlassdoor 👓)/actual-impl/OpenBands/circuit/src/utils/email_dkim_verifier.nr"},"67":{"source":"mod partial_hash;\n\nuse base64::BASE64_URL_DECODER;\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse nodash::str_to_u64;\nuse partial_hash::partial_sha256_var_end;\nuse rsa::rsa::verify_sha256_pkcs1v15;\nuse sha256::sha256_var;\nuse string_search::{StringBody, SubString};\n\n/**\n * @brief Struct representing a JWT. Use the init functions to create an instance\n *        Currently only supports RSA 2048/SHA256 signatures\n **/\npub struct JWT<let MAX_DATA_LENGTH: u32> {\n    data: BoundedVec<u8, MAX_DATA_LENGTH>,\n    pubkey_modulus_limbs: [u128; 18],\n    redc_params_limbs: [u128; 18],\n    signature_limbs: [u128; 18],\n    partial_hash: [u32; 8],\n    full_data_length: u32,\n    base64_decode_offset: u32,\n    is_partial_hash: bool, // compile time variable used internally\n}\n\nimpl<let MAX_DATA_LENGTH: u32> JWT<MAX_DATA_LENGTH> {\n    /**\n    * @brief Initialize JWT struct\n    *\n    * @param data: Signed JWT data (base64 encoded `$header.$payload`) as byte array of ascii characters\n    * @param base64_decode_offset: The offset from which we will start base64 decoding the data.\n    *                                   Any 4x multiple from the payload start index.\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs (2048-bit split into 18 limbs)\n    * @param signature_limbs: RSA signature limbs (2048-bit split into 18 limbs)\n    **/\n    pub fn init(\n        data: BoundedVec<u8, MAX_DATA_LENGTH>,\n        base64_decode_offset: u32,\n        pubkey_modulus_limbs: [u128; 18],\n        redc_params_limbs: [u128; 18],\n        signature_limbs: [u128; 18],\n    ) -> JWT<MAX_DATA_LENGTH> {\n        assert(data.len() <= MAX_DATA_LENGTH, \"data length is too long\");\n\n        JWT {\n            data,\n            base64_decode_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            // below fields are not relevant unless for partial hash\n            full_data_length: MAX_DATA_LENGTH,\n            partial_hash: [0; 8],\n            is_partial_hash: false,\n        }\n    }\n\n    /**\n    * @brief Initialize JWT with partial SHA256 hash'ed input\n    *        Since SHA hash is expensive to compute in circuit, we can optimize by pre-hashing up to a certain block outside the circuit,\n    *        and verify for correctness in the circuit. This is possible since SHA works in incremental blocks.\n    *        You can pre-hash up to the SHA-256 block from where you want to extract a claim.\n    *\n    * @param partial_data: Signed JWT data (base64 encoded `$header.$payload`) after partial hashed block\n    * @param partial_hash: The 256-bit partial hash of the `partial_data` up to a certain block\n    * @param full_data_length: The full length of the `data` (before partial SHA)\n    * @param base64_decode_offset: The offset from which we will start base64 decoding the data.\n    *                                   Trimming `offset` nubmer of bytes from the data should it base64 decode-able.\n    * @param pubkey_modulus_limbs: RSA public key modulus limbs (2048-bit split into 18 limbs)\n    * @param redc_params_limbs: RSA reduction parameters limbs\n    * @param signature_limbs: RSA signature limbs\n    **/\n    pub fn init_with_partial_hash(\n        partial_data: BoundedVec<u8, MAX_DATA_LENGTH>,\n        partial_hash: [u32; 8],\n        full_data_length: u32,\n        base64_decode_offset: u32,\n        pubkey_modulus_limbs: [u128; 18],\n        redc_params_limbs: [u128; 18],\n        signature_limbs: [u128; 18],\n    ) -> JWT<MAX_DATA_LENGTH> {\n        assert(partial_data.len() <= MAX_DATA_LENGTH, \"partial_data length is too long\");\n\n        JWT {\n            data: partial_data,\n            full_data_length,\n            partial_hash,\n            base64_decode_offset,\n            pubkey_modulus_limbs,\n            redc_params_limbs,\n            signature_limbs,\n            is_partial_hash: true,\n        }\n    }\n\n    /**\n    * @brief Verify JWT signature with RSA 2048/SHA256\n    **/\n    pub fn verify(mut self) {\n        let mut data_hash: [u8; 32] = [0; 32];\n\n        if (!self.is_partial_hash) {\n            // this is a compile time conditional\n            // Hash the data using SHA256\n            data_hash = sha256_var(self.data.storage(), self.data.len() as u64);\n        } else {\n            // Compute the full SHA256 hash with the given partial hash\n            data_hash = partial_sha256_var_end(\n                self.partial_hash,\n                self.data.storage(),\n                self.data.len() as u64,\n                self.full_data_length as u64,\n            );\n        }\n\n        // Verify RSA signature\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(false, self.pubkey_modulus_limbs, self.redc_params_limbs);\n\n        let signature = RuntimeBigNum { params, limbs: self.signature_limbs };\n\n        assert(verify_sha256_pkcs1v15(data_hash, signature, 65537));\n    }\n\n    /**\n    * @brief Get a string claim from the JWT payload\n    *\n    * @param KEY_LENGTH: The length of the claim key\n    * @param MAX_VALUE_LENGTH: The maximum length of the claim value\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_string<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        self.get_claim::<KEY_LENGTH, MAX_VALUE_LENGTH>(claim_key, true)\n    }\n\n    /**\n    * @brief Assert a string claim in the JWT payload.\n    *        Refer to `get_claim_string` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_string<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: BoundedVec<u8, MAX_VALUE_LENGTH>,\n    ) {\n        let value: BoundedVec<u8, MAX_VALUE_LENGTH> =\n            self.get_claim_string::<KEY_LENGTH, MAX_VALUE_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Get a number (u64) claim from the JWT payload\n    *        Refer to `get_claim_string` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_number<let KEY_LENGTH: u32>(self, claim_key: [u8; KEY_LENGTH]) -> u64 {\n        let claim = self.get_claim::<KEY_LENGTH, 20>(claim_key, false);\n        str_to_u64(claim.storage())\n    }\n\n    /**\n    * @brief Assert a number (u64) claim in the JWT payload.\n    *        Refer to `get_claim_number` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_number<let KEY_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: u64,\n    ) {\n        let value = self.get_claim_number::<KEY_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Get a boolean claim from the JWT payload\n    * @param claim_key: The claim key\n    * @return: The claim value\n    **/\n    pub fn get_claim_bool<let KEY_LENGTH: u32>(self, claim_key: [u8; KEY_LENGTH]) -> bool {\n        let value = self.get_claim::<KEY_LENGTH, 5>(claim_key, false);\n        let mut is_true = true;\n        for i in 0..4 {\n            is_true = is_true & (value.storage()[i] == \"true\".as_bytes()[i]);\n        }\n        let is_false = value.storage() == \"false\".as_bytes();\n\n        assert(is_true | is_false, \"incorrect value for claim\");\n        is_true\n    }\n\n    /**\n    * @brief Assert a boolean claim in the JWT payload.\n    *        Refer to `get_claim_bool` for details on the `KEY_LENGTH` and `MAX_VALUE_LENGTH`.\n    * @param claim_key: The claim key\n    * @param claim_value: The claim value to assert\n    **/\n    pub fn assert_claim_bool<let KEY_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        claim_value: bool,\n    ) {\n        let value = self.get_claim_bool::<KEY_LENGTH>(claim_key);\n        assert(value == claim_value, \"incorrect value for claim\");\n    }\n\n    /**\n    * @brief Internal function to get claim bytes from the JWT payload\n    **/\n    fn get_claim<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        claim_key: [u8; KEY_LENGTH],\n        is_value_quoted: bool,\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        //Safety: extract the value in unconstrained mode, and verify later\n        let value: BoundedVec<u8, MAX_VALUE_LENGTH> = unsafe {\n            self.extract_claim_unconstrained::<KEY_LENGTH, MAX_VALUE_LENGTH>(\n                claim_key,\n                is_value_quoted,\n            )\n        };\n\n        // constrain the extracted value is present in the payload using string_search lib\n        // haystack is the base64 decoded payload;\n        let haystack = self.prepare_haystack();\n\n        // needle is the key with quotes around it - searching for just the key string might return false positives from elsewhere\n        // Note: key length is known at compile time as this lib doesn't support runtime keys\n        let mut key_with_quote: [u8; KEY_LENGTH + 2] = [0; KEY_LENGTH + 2];\n        key_with_quote[0] = 34; // ascii for quote\n        for i in 0..KEY_LENGTH {\n            key_with_quote[i + 1] = claim_key[i];\n        }\n        key_with_quote[KEY_LENGTH + 1] = 34; // ascii for quote\n\n        let mut needle: SubString<(((KEY_LENGTH + 2) + 31) / 31) * 31, (KEY_LENGTH + 2) / 31, (KEY_LENGTH + 2)> =\n            SubString::new(key_with_quote, key_with_quote.len());\n\n        let (result, position): (bool, u32) = haystack.substring_match(needle);\n        assert(result, \"key not found in the payload\");\n\n        // assert value after quoted key is a colon\n        let colon_index = position + KEY_LENGTH + 2; // +2 for the quotes around the key\n        assert(haystack.body[colon_index] == 58); // :\n\n        // assert the value is correct - string have quotes around them, numbers and booleans don't\n        let mut value_start_index = colon_index + 1; // Value starts after the colon\n        let mut index_after_value = value_start_index + value.len(); // Index after the value, quoted or otherwise\n\n        if (is_value_quoted) {\n            // adjust start index for the quotes around the value\n            value_start_index = value_start_index + 1; // Adjust for the quote before the value\n            index_after_value = index_after_value + 2; // Adjust for the quotes around the value\n\n            // assert the char before and after the value is a quote\n            assert(haystack.body[value_start_index - 1] == 34); // \"\n            assert(haystack.body[index_after_value - 1] == 34); // \"\n        }\n\n        // assert the value is correct\n        for i in 0..MAX_VALUE_LENGTH {\n            if (i < value.len()) {\n                assert(haystack.body[value_start_index + i] == value.storage()[i]);\n            }\n        }\n\n        // assert the char after the value is a comma or a closing brace (last claim in the payload)\n        let char_after_value = haystack.body[index_after_value];\n        assert((char_after_value == 44) | (char_after_value == 125)); // , or }\n\n        value\n    }\n\n    /**\n    * @brief Internal function to prepare the haystack for string search (base64 decoded payload with offset applied)\n    **/\n    fn prepare_haystack(\n        self,\n    ) -> StringBody<((((MAX_DATA_LENGTH / 4) * 3) + 31) / 31) * 31, (((MAX_DATA_LENGTH / 4) * 3) + 31) / 31, ((MAX_DATA_LENGTH / 4) * 3)> {\n        // We need to decode the payload from the payload_b64_offset; i.e. data.slice(0, base64_decode_offset)\n        let mut data_to_b64_decode: [u8; MAX_DATA_LENGTH] = [0; MAX_DATA_LENGTH];\n\n        // Conditional inside the for loop blows up the constraint size\n        // So we fill the full MAX_DATA_LENGTH (rotate on overflow) and prepare a BoundedVec with the correct length later\n        for i in 0..MAX_DATA_LENGTH {\n            data_to_b64_decode[i] =\n                self.data.storage()[(i + self.base64_decode_offset) % self.data.len()];\n        }\n\n        let data_to_decode_bv: BoundedVec<u8, MAX_DATA_LENGTH> = BoundedVec::from_parts(\n            data_to_b64_decode,\n            self.data.len() - self.base64_decode_offset,\n        );\n\n        // Decode the payload\n        let payload: BoundedVec<u8, ((MAX_DATA_LENGTH / 4) * 3)> =\n            BASE64_URL_DECODER::decode_var(data_to_decode_bv); // b64 decoded length is ceil(MAX_DATA_LENGTH / 3) * 4\n\n        // Create the haystack\n        let haystack: StringBody<((((MAX_DATA_LENGTH / 4) * 3) + 31) / 31) * 31, (((MAX_DATA_LENGTH / 4) * 3) + 31) / 31, ((MAX_DATA_LENGTH / 4) * 3)> =\n            StringBody::new(payload.storage(), payload.len());\n\n        haystack\n    }\n\n    /**\n    * @brief Unconstrained function to extract claim bytes from the JWT payload\n    **/\n    pub unconstrained fn extract_claim_unconstrained<let KEY_LENGTH: u32, let MAX_VALUE_LENGTH: u32>(\n        self,\n        key: [u8; KEY_LENGTH],\n        is_value_quoted: bool,\n    ) -> BoundedVec<u8, MAX_VALUE_LENGTH> {\n        let haystack = self.prepare_haystack();\n\n        let mut key_with_quote: [u8; KEY_LENGTH + 2] = [0; KEY_LENGTH + 2];\n        key_with_quote[0] = 34; // ascii for quote\n        for i in 0..KEY_LENGTH {\n            key_with_quote[i + 1] = key[i];\n        }\n        key_with_quote[KEY_LENGTH + 1] = 34; // ascii for quote\n\n        let mut needle: SubString<(((KEY_LENGTH + 2) + 31) / 31) * 31, (KEY_LENGTH + 2) / 31, (KEY_LENGTH + 2)> =\n            SubString::new(key_with_quote, key_with_quote.len());\n\n        let (result, position): (bool, u32) = haystack.substring_match(needle);\n        assert(result, \"key not found in the payload\");\n\n        // Get the value after the key\n        let mut value_start_idx = position + key.len() + 3; // +3 for the quote around the key and the colon\n        if (is_value_quoted) {\n            value_start_idx += 1; // +1 for the quote before the value\n        }\n\n        let mut value: BoundedVec<u8, MAX_VALUE_LENGTH> = BoundedVec::new();\n\n        for i in 0..MAX_VALUE_LENGTH {\n            let val = haystack.body[value_start_idx + i];\n            if ((val == 34) | (val == 44) | (val == 125)) {\n                break;\n            }\n            value.push(haystack.body[value_start_idx + i]);\n        }\n\n        value\n    }\n}\n\n#[test]\nfn test_verify() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n}\n\n#[test]\nfn test_verify_partial_hash() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let partial_data: BoundedVec<u8, 256> = BoundedVec::from_array([\n        106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69,\n        77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100,\n        109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109,\n        53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73,\n        122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108,\n        106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104,\n        100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89,\n        88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106,\n        81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54,\n        77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 1;\n    let partial_hash = [\n        2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610,\n        4160738201,\n    ];\n    let full_data_length = 268;\n\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n}\n\n#[test]\nfn test_get_claim_string() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email: BoundedVec<u8, 100> = jwt.get_claim_string(\"email\".as_bytes());\n    let expected_email: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    assert(email == expected_email);\n}\n\n#[test]\nfn test_get_claim_string_partial_hash() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let partial_data: BoundedVec<u8, 256> = BoundedVec::from_array([\n        106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69,\n        77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100,\n        109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109,\n        53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73,\n        122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108,\n        106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104,\n        100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89,\n        88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106,\n        81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54,\n        77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 1;\n    let partial_hash = [\n        2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610,\n        4160738201,\n    ];\n    let full_data_length = 268;\n\n    let jwt = JWT::init_with_partial_hash(\n        partial_data,\n        partial_hash,\n        full_data_length,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email: BoundedVec<u8, 100> = jwt.get_claim_string(\"email\".as_bytes());\n    let expected_email: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    assert(email == expected_email);\n}\n\n#[test]\nfn test_assert_claim_string() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let value: BoundedVec<u8, 100> = BoundedVec::from_array(\"alice@test.com\".as_bytes());\n    jwt.assert_claim_string(\"email\".as_bytes(), value);\n}\n\n#[test]\nfn test_get_claim_number() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let iat: u64 = jwt.get_claim_number(\"iat\".as_bytes());\n    let expected_iat: u64 = 1737642217;\n    assert(iat == expected_iat);\n}\n\n#[test]\nfn test_assert_claim_number() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let expected_iat: u64 = 1737642217;\n    jwt.assert_claim_number(\"iat\".as_bytes(), expected_iat);\n}\n\n#[test]\nfn test_get_claim_bool() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let email_verified: bool = jwt.get_claim_bool(\"email_verified\".as_bytes());\n    assert(email_verified);\n}\n\n#[test]\nfn test_assert_claim_bool() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    jwt.assert_claim_bool(\"email_verified\".as_bytes(), true);\n}\n\n#[test]\nfn test_get_last_claim() {\n    let pubkey_modulus_limbs = [\n        484791102317025465533947056954494751,\n        689128460766062759582134715581990032,\n        810523707777777878428965619663888709,\n        184404549238669475316963116864788898,\n        93466218048229154672139102341852900,\n        584828628768888069086079532464056431,\n        97425187031931427039620311245463762,\n        26273806718910063326353308419294998,\n        788747954066548540615875263034804664,\n        889704621954975151388848797463892494,\n        311999144542197118282319553447935979,\n        569776388981460921496753063185331362,\n        903966640703701959992132828577771898,\n        159022820921763067563807580152706463,\n        503819859541011037194389727017199051,\n        1078173269124751507098806957834900664,\n        808018922828293630146825008649069450,\n        163,\n    ];\n    let redc_params_limbs = [\n        1143167338325541577958669340190596824,\n        782066667103526839077340987159104121,\n        1067845759344375818181746341911682002,\n        880124617802511701465844415806808588,\n        285259139341669707856057706066903101,\n        1230850420220071595120007854793337041,\n        243441877489860292941608721967510056,\n        821283804950244931298352888469271304,\n        265590023859021620015146340457966193,\n        955602690275722281613949658760787989,\n        704159826142581942518373637894303280,\n        313938418637521056314346970388282852,\n        296174013877567499290252280618882959,\n        127533166408087917092441034792304239,\n        486694435757811118946661778147879193,\n        742440511645057019411661928820777129,\n        106100992772450627263374716203348785,\n        6409,\n    ];\n    let signature_limbs = [\n        782421962573548264472674190647943355,\n        528649442614902878048130358901749842,\n        795671681115216636642039527621785323,\n        342055983261463759066440970886912343,\n        320943042314824191484469254030368420,\n        233931545977215775766660875366648712,\n        166738968145911552289782464945436391,\n        1280090914380823160665554635957223606,\n        225322564371992173705155119766257284,\n        1012067778676730712845356243167441596,\n        337008035250054394089555850701430953,\n        441480997772890594691718538441538925,\n        1266099611422563733802354067242028554,\n        163890419575820619684088542045789366,\n        71236811945264458762129145425586273,\n        106105739687938386497215871288359508,\n        598323717706499880526430558338637686,\n        97,\n    ];\n    let data: BoundedVec<u8, 512> = BoundedVec::from_array([\n        101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73, 49, 78, 105, 73, 115, 73,\n        110, 82, 53, 99, 67, 73, 54, 73, 107, 112, 88, 86, 67, 74, 57, 46, 101, 121, 74, 112, 99,\n        51, 77, 105, 79, 105, 74, 111, 100, 72, 82, 119, 79, 105, 56, 118, 100, 71, 86, 122, 100,\n        67, 53, 106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107,\n        78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120,\n        102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85,\n        115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73,\n        122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74,\n        104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115,\n        73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78,\n        121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84,\n        73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86,\n        52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48,\n    ]);\n    let base64_decode_offset = 37;\n\n    let jwt = JWT::init(\n        data,\n        base64_decode_offset,\n        pubkey_modulus_limbs,\n        redc_params_limbs,\n        signature_limbs,\n    );\n\n    jwt.verify();\n\n    let exp: u64 = jwt.get_claim_number(\"exp\".as_bytes()); // exp is the last claim in the test payload\n    let expected_exp: u64 = 1799999999;\n    assert(exp == expected_exp);\n}\n","path":"/Users/unomasanori/nargo/github.com/saleel/noir-jwt/v0.4.4/src/lib.nr"},"68":{"source":"// Copied form https://raw.githubusercontent.com/zkemail/zkemail.nr/refs/heads/main/lib/src/partial_hash.nr\n// Use dependency one zkemail.nr is updated to bignum 0.6.0\n\nuse std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L23\n// Convert 64-byte array to array of 16 u32s\npub fn msg_u8_to_u32(msg: [u8; BLOCK_SIZE]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L38\nunconstrained fn build_msg_block_iter<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> ([u8; BLOCK_SIZE], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L59\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32,\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE: u32 = 64;\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L86-L116\n/**\n * Partially computes a SHA256 hash of a message but does not finalize\n * @notice can be used for post-partial hashing where client proves part of hash and relies on server to finish\n * \n *\n * @param N: the length of the message to hash.\n *  --- WARNING: N must be divisible by BLOCK_SIZE such that N % BLOCK_SIZE == 0 \n *      otherwise the remaining bytes will not be inputted when computing the initial hash\n * @param msg: the preimage to begin hashing\n * @return the intermediate hash state\n */\npub fn partial_sha256_var_start<let N: u32>(msg: [u8; N]) -> [u32; 8] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe { build_msg_block_iter(msg, N, msg_start) };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n/**\n * Given some state of a partially computed sha256 hash and part of the preimage, continue hashing\n * @notice used for complex/ recursive offloading of post-partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the preimage to hash\n * @param message_size - the actual length of the preimage to hash\n * @return the intermediate hash state after compressing in msg to h\n */\npub fn partial_sha256_var_interstitial<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u32,\n) -> [u32; 8] {\n    assert(message_size % BLOCK_SIZE == 0, \"Message size must be a multiple of the block size\");\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe { build_msg_block_iter(msg, N, msg_start) };\n        if msg_start < N {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, N, msg_block, msg_start);\n            if msg_start < N {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < N {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < N) & (msg_byte_ptr == BLOCK_SIZE) & (msg_start < message_size) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    h\n}\n\n// https://github.com/noir-lang/noir/blob/76eec710ff73e5e45fdddcd41ae2cd74e879cfa5/noir_stdlib/src/hash/sha256.nr#L85\n/**\n * Given some state of a partially computed sha256 hash and remaining preimage, complete the hash\n * @notice used for traditional partial hashing\n *\n * @param N - the maximum length of the message to hash\n * @param h - the intermediate hash state\n * @param msg - the remaining preimage to hash\n * @param message_size - the size of the remaining preimage\n * @param real_message_size -= the total size of the preimage\n * @return finalized sha256 hash\n */\npub fn partial_sha256_var_end<let N: u32>(\n    mut h: [u32; 8],\n    msg: [u8; N],\n    message_size: u64,\n    real_message_size: u64,\n) -> [u8; 32] {\n    let message_size = message_size as u32; // noir stdlib uses u64\n    let real_message_size = real_message_size as u32; // noir stdlib uses u64\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block_iter(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block_iter(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, real_message_size) };\n\n    if !is_unconstrained() {\n        for i in 0..56 {\n            if i < msg_byte_ptr {\n                assert_eq(msg_block[i], last_block[i]);\n            } else {\n                assert_eq(msg_block[i], zero);\n            }\n        }\n\n        let len = 8 * real_message_size;\n        let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n        for i in 56..64 {\n            assert_eq(msg_block[i], len_bytes[i - 56]);\n        }\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32,\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: [u8; BLOCK_SIZE],\n    mut msg_byte_ptr: u32,\n    message_size: u32,\n) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n","path":"/Users/unomasanori/nargo/github.com/saleel/noir-jwt/v0.4.4/src/partial_hash.nr"},"70":{"source":"unconstrained fn __boundary_check<let Range: u32>(limit: u32) -> [Field; Range] {\n    let mut r: [Field; Range] = [0; Range];\n    for i in limit..Range {\n        r[i] = 1;\n    }\n    r\n}\n\n/**\n * @brief Return a size-Range array of values that describe whether an index `i` is in the range `0<=i<limit`\n * @details When evaluating variable-length loops of size `limit`, it is neccessary to iterate over a maximum bound defined at compile-time\n *          Any constraints or evaluations that occur where `i >= limit` must be discarded.\n *          This is most efficiently performed by using predicate `Field` values, where `predicate[i] = 0` if `i < limit`, otherwise `predicate[i] = 1`.\n *          This method efficiently generates such predicate values more efficiently than querying whether `i <= limit` at every iteration.\n *          Gate cost is 3 * Range\n **/\npub fn boundary_check<let Range: u32>(limit: u32) -> [Field; Range] {\n    let r = unsafe {\n        //@safety r contains claims about whether `r[i] >= limit`. the rest of this function checks this claim is correct\n        __boundary_check(limit)\n    };\n\n    let mut transition_index = 0;\n    // **\n    // We have an array of Field elements `r` such that:\n    // if i < limit, `r = 0`\n    // if i >= limit, `r = 1`\n    // We validate the predicate list `r` is correct by checking:\n    // 1. every r[i] element is 0 or 1\n    // 2. if r[i] = 1, r[i+1] must also be 1\n    // 3. if r[i] = 0 and r[i+1] = 1, then i == limit\n    // we check point 3 by tracking a `transition_index` variable, where\n    // transition_index += (1 - r[i]) * (r[i+1]) * i\n    // i.e. if r[i] == 0 and r[i+1] == 1, transition_index += i\n    //      else transition_index += 0\n    // NOTE: total constraint cost is 3 gates per iteration\n    // **\n    if Range > 0 {\n        for i in 0..Range - 1 {\n            assert_eq(r[i] * r[i], r[i]);\n            assert_eq(r[i] * r[i + 1], r[i]);\n            let idx = (r[i + 1] * (1 - r[i])) * (i as Field + 1);\n            transition_index = transition_index + idx;\n            std::as_witness(transition_index);\n        }\n        assert_eq(r[Range - 1] * r[Range - 1], r[Range - 1]);\n        transition_index = transition_index + (1 - r[Range - 1]) * limit as Field;\n        assert(transition_index == limit as Field);\n        r\n    } else {\n        [0; Range]\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_base64/v0.4.0/src/boundary_check.nr"},"71":{"source":"use super::defaults::{\n    BASE64_ELEMENTS_PER_CHUNK, BASE64_PADDING_CHAR, BYTES_PER_CHUNK, INVALID_DECODE_VALUE,\n};\n\npub use crate::boundary_check::boundary_check;\nuse crate::tables::{\n    BASE64_DECODE_BE_TABLE, BASE64_DECODE_BE_URL_TABLE, BASE64_DECODE_BE_URL_VAR_TABLE,\n    BASE64_DECODE_BE_VAR_TABLE,\n};\n\n/// Decoder methods that use the standard Base64 Alphabet (base64) specified in RFC 4648\n/// (https://datatracker.ietf.org/doc/html/rfc4648#section-4)\npub mod Base64DecodeBE {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 1, 0>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 1, 0>(input)\n    }\n}\n\n/// Decoder methods that use the standard Base64 Alphabet (base64) specified in RFC 4648\n/// (https://datatracker.ietf.org/doc/html/rfc4648#section-4), but WITHOUT padding\npub mod Base64DecodeBENoPad {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 0, 0>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 0, 0>(input)\n    }\n}\n\n/// Decoder methods that use the URL and Filename Safe Alphabet specified in RFC 4648\n/// https://datatracker.ietf.org/doc/html/rfc4648#section-5\npub mod Base64DecodeBEUrlSafe {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 0, 1>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 0, 1>(input)\n    }\n}\n\n/// Decoder methods that use the URL and Filename Safe Alphabet specified in RFC 4648\n/// https://datatracker.ietf.org/doc/html/rfc4648#section-5, but WITH padding added\npub mod Base64DecodeBEUrlSafeWithPad {\n    pub fn decode<let InputBytes: u32, let OutputBytes: u32>(\n        input: [u8; InputBytes],\n    ) -> [u8; OutputBytes] {\n        crate::decoder::decode::<InputBytes, OutputBytes, 1, 1>(input)\n    }\n\n    pub fn decode_var<let MaxInputBytes: u32, let MaxOutputBytes: u32>(\n        input: BoundedVec<u8, MaxInputBytes>,\n    ) -> BoundedVec<u8, MaxOutputBytes> {\n        crate::decoder::decode_var::<MaxInputBytes, MaxOutputBytes, 1, 1>(input)\n    }\n}\n\n/**\n * @brief Return a human-readable error if the input is invalid Base64\n * @details We constrain the decoding to be correct by using a lookup table to decode Base64.\n *          Validation is performed by batch-checking that no lookups returned an error state.\n *          This produces unhelpful error messages so we put this sanitised check in an unconstrained fn\n **/\nunconstrained fn __validate_decoded(decoded: Field, input_byte: u8, offset: u32) {\n    assert(\n        decoded != INVALID_DECODE_VALUE,\n        f\"DecodeError: invalid symbol {input_byte}, offset {offset}.\",\n    );\n}\n\n/**\n * @brief Given a variable-sized number of Base64 encoded characters, return a *claim* about how many are padding chars\n * @note The returned value is only a claim and must be validated\n **/\nunconstrained fn __get_num_padding_chars_var<let InputElements: u32>(\n    input: BoundedVec<u8, InputElements>,\n) -> (bool, bool) {\n    let len = input.len();\n    let r1 = if len > 1 {\n        input.get(len - 2) == BASE64_PADDING_CHAR\n    } else {\n        false\n    };\n    let r2 = if len > 0 {\n        input.get(len - 1) == BASE64_PADDING_CHAR\n    } else {\n        false\n    };\n    (r1, r2)\n}\n\n/**\n * @brief Take an array of Base64 values and convert back into ASCII\n *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n **/\nfn decode<let InputElements: u32, let OutputBytes: u32, let Pad: u1, let UseURLTable: u1>(\n    input: [u8; InputElements],\n) -> [u8; OutputBytes] {\n    let rem = OutputBytes % 3;\n    // Calculate the number of padding characters and the length of the input without padding\n    let num_padding_chars = if rem == 1 {\n        2\n    } else if rem == 2 {\n        1\n    } else {\n        0\n    };\n\n    // Assert that the output length & input length are correct\n    // Every 3 output chars will be encoded as 4 base64 input chars\n    let encoded_length = (OutputBytes + 2) / 3 * 4; // ceil(input * 4 / 3)\n    if Pad != 0 {\n        assert(\n            encoded_length == InputElements,\n            f\"DecodeError: invalid input length for specified output length. Expected {encoded_length} input elements, but got {InputElements}.\",\n        );\n        // enforce Base64 padding is valid\n        if num_padding_chars == 2 {\n            let offset = InputElements - 1;\n            assert(\n                input[offset] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n            let offset = InputElements - 2;\n            assert(\n                input[offset] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n        } else if num_padding_chars == 1 {\n            let offset = InputElements - 1;\n            assert(\n                input[InputElements - 1] == BASE64_PADDING_CHAR,\n                f\"DecodeError: expected padding at offset {offset}.\",\n            );\n        }\n    } else {\n        let expected = encoded_length - num_padding_chars;\n        assert(\n            encoded_length - num_padding_chars == InputElements,\n            f\"DecodeError: invalid input length for specified output length. Expected {expected} input elements, but got {InputElements}.\",\n        );\n    }\n\n    let mut result: [u8; OutputBytes] = [0; OutputBytes];\n    let num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n        + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    // validity_check = accumulator value that we add every output from BASE64_DECODE_BE_TABLE into.\n    // Invalid error states will return a lookup value of -2^32 , which will cause `validity_check` to fail a 32-bit range check.\n    // This batch-validation technique is more efficient than asserting every returned token is valid.\n    let mut validity_check: Field = 0;\n    if num_chunks > 0 {\n        let final_chunk = num_chunks - 1;\n\n        for i in 0..final_chunk {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                let input_byte = input[offset];\n                let decoded = if UseURLTable == 1 {\n                    BASE64_DECODE_BE_URL_TABLE[input_byte]\n                } else {\n                    BASE64_DECODE_BE_TABLE[input_byte]\n                };\n                validity_check += decoded;\n                slice += decoded as Field;\n                unsafe {\n                    //@safety get a sensible error message out if the decoding is invalid.\n                    // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                    // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                    // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                    // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                    __validate_decoded(decoded, input_byte, offset);\n                }\n            }\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n\n        // process the final chunk, which may contain padding\n        let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n        let byte_offset = final_chunk * BYTES_PER_CHUNK;\n        let base64_elements_in_final_chunk = if Pad != 0 {\n            InputElements - base64_offset - num_padding_chars\n        } else {\n            InputElements - base64_offset\n        };\n\n        // pack the base64 values into the field element\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            let offset = base64_offset + j;\n            let input_byte = input[offset];\n            let decoded = if UseURLTable == 1 {\n                BASE64_DECODE_BE_URL_TABLE[input_byte]\n            } else {\n                BASE64_DECODE_BE_TABLE[input_byte]\n            };\n            validity_check += decoded;\n            slice += decoded as Field;\n            unsafe {\n                //@safety get a sensible error message out if the decoding is invalid.\n                // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                __validate_decoded(decoded, input_byte, offset);\n            }\n        }\n\n        // If any lookups returned an error state, this 32-bit range check will fail.\n        validity_check.assert_max_bit_size::<32>();\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n        for i in 0..num_bytes_in_final_chunk {\n            result[byte_offset + i] = slice_bytes[i];\n        }\n    }\n\n    result\n}\n\n/**\n * @brief Take a variable-length vector of Base64 values and convert back into ASCII\n *        Each Base64 value is 6 bits. This method will produce a byte array where data is concatenated so that there are no sparse bits\n *        (e.g. encoding 4 ASCII values produces 24 bits of Base64 data = 3 bytes of output data)\n **/\npub fn decode_var<let InputElements: u32, let OutputBytes: u32, let Pad: u1, let UseURLTable: u1>(\n    input: BoundedVec<u8, InputElements>,\n) -> BoundedVec<u8, OutputBytes> {\n    // We don't know how many padding bytes the input string contains - we use an unconstrained fn to return a *claim* that we will later validate\n    let (has_first_padding_byte_claim, has_second_padding_byte_claim) = if (Pad == 1) {\n        unsafe {\n            //@safety get claims about whether the bytes input[input.len() - 2] and input[input.len() - 1] are padding chars\n            // we validate this later on by requiring these characters equal BASE64_PADDING_CHAR by looking up BASE64_DECODE_BE_VAR_TABLE\n            crate::decoder::__get_num_padding_chars_var::<InputElements>(input)\n        }\n    } else {\n        (false, false)\n    };\n\n    // num_padding_chars is a claim that depends on has_first_padding_byte_claim and has_second_padding_byte_claim being correct\n    let num_padding_chars: u32 = if Pad == 1 {\n        has_first_padding_byte_claim as u32 + has_second_padding_byte_claim as u32\n    } else {\n        0\n    };\n\n    let input_length = input.len();\n    let input = input.storage();\n\n    // boundary_flags = array of Field elements.\n    // if `i < input_length, boundary_flags[i] = 0`\n    // if `i >= input_length, boundary_flags[i+1] = 1`\n    // used as cheap(ish) predicates when iterating over bounded vector elements\n    let boundary_flags: [Field; InputElements] = boundary_check(input_length);\n    let mut result: [u8; OutputBytes] = [0; OutputBytes];\n\n    let max_num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n        + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n    let mut validity_check: Field = 0;\n    // if statement should be known at compile time\n    if max_num_chunks > 0 {\n        let final_chunk: u32 = max_num_chunks - 1;\n\n        for i in 0..final_chunk {\n            let mut slice: Field = 0;\n            for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n                let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                let input_byte = input[offset];\n\n                let mut decode_index: Field = 0;\n                if Pad == 1 {\n                    let mut might_be_second_padding_char = 0;\n                    let mut might_be_first_padding_char = 0;\n                    // These if statements should not cost extra gates as the condition is known at compile time\n                    if (offset + 2 < InputElements) {\n                        might_be_first_padding_char = (1 - boundary_flags[offset])\n                            * (1 - boundary_flags[offset + 1])\n                            * boundary_flags[offset + 2];\n                        might_be_second_padding_char =\n                            (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                    } else if (offset + 1 < InputElements) {\n                        // might_be_second_padding_char = (1 - boundary_flags[offset]) + (boundary_flags[offset + 1]);\n                        might_be_first_padding_char =\n                            (1 - boundary_flags[offset]) * (1 - boundary_flags[offset + 1]);\n                        might_be_second_padding_char =\n                            (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                    } else // last character\n                    {\n                        might_be_first_padding_char = 0;\n                        might_be_second_padding_char = (1 - boundary_flags[offset]);\n                    }\n\n                    // Cases where we need to require a padding character is present:\n                    // Case 1: we are at byte position `input.len() - 2` and `has_first_padding_byte_claim = true`\n                    // Case 2: we are at byte position `input.len() - 1` and `has_second_padding_byte_claim = true`\n                    let require_padding = might_be_first_padding_char\n                        * has_first_padding_byte_claim as Field\n                        + (might_be_second_padding_char * has_second_padding_byte_claim as Field);\n\n                    // The `decode_index` is used to map the input Base64 character into an output decoded character.\n                    // We know `input_byte` is in the range 0-255 , so we use a size 768 lookup to handle the following 3 cases:\n                    // Case 1 (index range 0-255): No special cases. We decode the Base64 ASCII char into an ASCII char\n                    // Case 2 (index range 256-511): We have exceeded the length of the input. The only valid input is 0, which decodes to 0 (all other byte values return an error state)\n                    // Case 3 (index range 512-767): A claim has been made that a padding byte is present, and we are at the appropriate byte location to check this.\n                    //                               The only valid input is BASE64_PADDING_CHAR, which decodes to 0. All other inputs return an error state\n                    decode_index =\n                        input_byte as Field + boundary_flags[offset] * 256 + require_padding * 512;\n                } else {\n                    decode_index = input_byte as Field + boundary_flags[offset] * 256;\n                }\n                let decoded = if UseURLTable == 1 {\n                    BASE64_DECODE_BE_URL_VAR_TABLE[decode_index]\n                } else {\n                    BASE64_DECODE_BE_VAR_TABLE[decode_index]\n                };\n\n                validity_check += decoded;\n                slice += decoded;\n                unsafe {\n                    //@safety get a sensible error message out if the decoding is invalid.\n                    // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                    // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                    // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                    // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                    __validate_decoded(decoded, input_byte, offset);\n                }\n            }\n            // convert the decoded slice into bytes and populate result array\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            for j in 0..BYTES_PER_CHUNK {\n                result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n            }\n        }\n        // process the final chunk\n        let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n        let byte_offset = final_chunk * BYTES_PER_CHUNK;\n        // might include padding characters\n        let base64_elements_in_final_chunk = InputElements - base64_offset;\n\n        // pack the base64 values into the field element\n        let mut slice: Field = 0;\n        for j in 0..base64_elements_in_final_chunk {\n            slice *= 64;\n            let offset = base64_offset + j;\n            let input_byte = input[offset];\n\n            let mut decode_index: Field = 0;\n            if Pad == 1 {\n                let mut might_be_second_padding_char = 0;\n                let mut might_be_first_padding_char = 0;\n                // These if statements should not cost extra gates as the condition is known at compile time\n                if (offset + 2 < InputElements) {\n                    might_be_first_padding_char = (1 - boundary_flags[offset])\n                        * (1 - boundary_flags[offset + 1])\n                        * boundary_flags[offset + 2];\n                    might_be_second_padding_char =\n                        (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                } else if (offset + 1 < InputElements) {\n                    // might_be_second_padding_char = (1 - boundary_flags[offset]) + (boundary_flags[offset + 1]);\n                    might_be_first_padding_char =\n                        (1 - boundary_flags[offset]) * (1 - boundary_flags[offset + 1]);\n                    might_be_second_padding_char =\n                        (1 - boundary_flags[offset]) * (boundary_flags[offset + 1]);\n                } else // last character\n                {\n                    might_be_first_padding_char = 0;\n                    might_be_second_padding_char = (1 - boundary_flags[offset]);\n                }\n\n                let require_padding = might_be_first_padding_char\n                    * has_first_padding_byte_claim as Field\n                    + (might_be_second_padding_char * has_second_padding_byte_claim as Field);\n                decode_index =\n                    input_byte as Field + boundary_flags[offset] * 256 + require_padding * 512;\n            } else {\n                decode_index = input_byte as Field + boundary_flags[offset] * 256;\n            }\n            let decoded = if UseURLTable == 1 {\n                BASE64_DECODE_BE_URL_VAR_TABLE[decode_index]\n            } else {\n                BASE64_DECODE_BE_VAR_TABLE[decode_index]\n            };\n            unsafe {\n                //@safety get a sensible error message out if the decoding is invalid.\n                // Note that we *constrain* the encoding is correct by performing a range check on `validity_check`\n                // If the decoding is invalid, `decoded = -2^{32}`. We add up all `decoded` values and apply a 32-bit range check.\n                // Given all valid encodings are 8-bit, as long as the input length is less than 2^24 bytes, it is not possible to\n                // underflow validity_check with an invalid encoding, and then overflow again by adding up valid encodings\n                __validate_decoded(decoded, input_byte, offset);\n            }\n            validity_check += decoded;\n            slice += decoded as Field;\n        }\n\n        validity_check.assert_max_bit_size::<32>();\n\n        for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n            slice *= 64;\n        }\n\n        let slice_bytes: [u8; 30] = slice.to_be_bytes();\n        let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n        for i in 0..num_bytes_in_final_chunk {\n            result[byte_offset + i] = slice_bytes[i];\n        }\n    }\n\n    if Pad == 1 {\n        assert(input_length % 4 == 0, \"base64 encoded strings must be a multiple of 4 bytes\");\n    }\n\n    assert_eq(\n        has_first_padding_byte_claim,\n        has_second_padding_byte_claim * has_first_padding_byte_claim,\n        \"if first byte contains padding so must the second\",\n    );\n    let output_length = ((input_length * 3) / 4) - num_padding_chars;\n    BoundedVec::from_parts_unchecked(result, output_length)\n}\n\n#[test]\nfn test_decode_empty() {\n    let input: [u8; 0] = [];\n    let expected: [u8; 0] = [];\n    let result = Base64DecodeBE::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_padding() {\n    // f\n    let input: [u8; 4] = [90, 103, 61, 61];\n    let expected: [u8; 1] = [102];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 4] = [90, 109, 56, 61];\n    let expected: [u8; 2] = [102, 111];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard_no_pad() {\n    // f\n    let input: [u8; 2] = [90, 103];\n    let expected: [u8; 1] = [102];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 3] = [90, 109, 56];\n    let expected: [u8; 2] = [102, 111];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = Base64DecodeBENoPad::decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_max_byte() {\n    let expected: [u8; 1] = [255];\n\n    let input: [u8; 4] = [47, 119, 61, 61]; // \"/w==\"\n    let result: [u8; 1] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [47, 119]; // \"/w\"\n    let result: [u8; 1] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 4] = [95, 119, 61, 61]; // \"_w==\"\n    let result: [u8; 1] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [95, 119]; // \"_w\"\n    let result: [u8; 1] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 255, offset 0\")]\nfn test_decode_invalid() {\n    let input: [u8; 2] = [255, 255];\n    let _: [u8; 1] = Base64DecodeBENoPad::decode(input);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_standard_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBE::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 95, offset 0\")]\nfn test_decode_underscore_with_standard() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let _: [u8; 2] = Base64DecodeBE::decode(input);\n}\n\n#[test]\nfn test_decode_url_safe_with_pad() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafeWithPad::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 47, offset 0\")]\nfn test_decode_slash_with_url_safe() {\n    // test decoding / and +\n    let input: [u8; 3] = [47, 43, 65];\n    let _: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n}\n\n#[test]\nfn test_decode_url_safe() {\n    // test decoding _ and -\n    let input: [u8; 3] = [95, 45, 65];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_url_safe_no_pad_fail_with_padding() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_ascii() {\n    // base64: SGVsbG8gV29ybGQh\n    let input: [u8; 16] = [83, 71, 86, 115, 98, 71, 56, 103, 86, 50, 57, 121, 98, 71, 81, 104];\n    // \"Hello World!\"\n    let expected: [u8; 12] = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];\n\n    // all configurations should decode the same way\n    let result: [u8; 12] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_utf8() {\n    // base64: 44GT44KT44Gr44Gh44Gv44CB5LiW55WM77yB\n    let input: [u8; 36] = [\n        52, 52, 71, 84, 52, 52, 75, 84, 52, 52, 71, 114, 52, 52, 71, 104, 52, 52, 71, 118, 52, 52,\n        67, 66, 53, 76, 105, 87, 53, 53, 87, 77, 55, 55, 121, 66,\n    ];\n    // non-ascii utf-8: \"Hello, World!\" in Japanese\n    let expected: [u8; 27] = [\n        227, 129, 147, 227, 130, 147, 227, 129, 171, 227, 129, 161, 227, 129, 175, 227, 128, 129,\n        228, 184, 150, 231, 149, 140, 239, 188, 129,\n    ];\n\n    // all configurations should decode the same way\n    let result: [u8; 27] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBEUrlSafeWithPad::decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = Base64DecodeBEUrlSafe::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_multi_chunks() {\n    // \"The quick brown fox jumps over the lazy dog.\"\n    let expected: [u8; 44] = [\n        84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32,\n        106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121,\n        32, 100, 111, 103, 46,\n    ];\n\n    let input: [u8; 60] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52, 61,\n    ];\n    let result: [u8; 44] = Base64DecodeBE::decode(input);\n    assert(result == expected);\n\n    let input: [u8; 59] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52,\n    ];\n    let result = Base64DecodeBENoPad::decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_with_padding() {\n    // Raw bh: GxMlgwLiypnVrE2C0Sf4yzhcWTkAhSZ5+WERhKhXtlU=\n    // Translated directly to ASCII\n    let input: [u8; 44] = [\n        71, 120, 77, 108, 103, 119, 76, 105, 121, 112, 110, 86, 114, 69, 50, 67, 48, 83, 102, 52,\n        121, 122, 104, 99, 87, 84, 107, 65, 104, 83, 90, 53, 43, 87, 69, 82, 104, 75, 104, 88, 116,\n        108, 85, 61,\n    ];\n\n    let result: [u8; 32] = Base64DecodeBE::decode(input);\n    let expected: [u8; 32] = [\n        27, 19, 37, 131, 2, 226, 202, 153, 213, 172, 77, 130, 209, 39, 248, 203, 56, 92, 89, 57, 0,\n        133, 38, 121, 249, 97, 17, 132, 168, 87, 182, 85,\n    ];\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_empty() {\n    let input: BoundedVec<u8, 0> = BoundedVec::new();\n    let expected: BoundedVec<u8, 0> = BoundedVec::new();\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_padding() {\n    // f\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 103, 61, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102]);\n    let result = Base64DecodeBE::decode_var(input);\n    println(f\"result {result}\");\n    println(f\"expected {expected}\");\n\n    assert(result == expected);\n\n    // fo\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 56, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111]);\n    let result = Base64DecodeBE::decode_var(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: BoundedVec<u8, 8> = BoundedVec::from_array([90, 109, 57, 118]);\n    let expected: BoundedVec<u8, 6> = BoundedVec::from_array([102, 111, 111]);\n    let result = Base64DecodeBE::decode_var(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_standard_no_pad() {\n    // f\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 103]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    // fo\n    println(f\"result {result}, expected {expected}\");\n\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 56]);\n\n    assert(result == expected);\n\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([90, 109, 57, 118]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([102, 111, 111]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 61, offset 3\")]\nfn test_decode_var_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: BoundedVec<u8, 4> = BoundedVec::from_array([47, 43, 65, 61]);\n    let expected: BoundedVec<u8, 3> = BoundedVec::from_array([255, 224]);\n    let result = Base64DecodeBENoPad::decode_var(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var() {\n    // base64: \"SGVsbG8sIFdvcmxkIQ==\"\n    let input: BoundedVec<u8, 24> = BoundedVec::from_array([\n        83, 71, 86, 115, 98, 71, 56, 115, 73, 70, 100, 118, 99, 109, 120, 107, 73, 81, 61, 61,\n    ]);\n    // base64: \"SGVsbG8sIFdvcmxkIQ\"\n    let input_no_pad: BoundedVec<u8, 24> = BoundedVec::from_array([\n        83, 71, 86, 115, 98, 71, 56, 115, 73, 70, 100, 118, 99, 109, 120, 107, 73, 81,\n    ]);\n    // \"Hello, World!\"\n    let expected: BoundedVec<u8, 16> =\n        BoundedVec::from_array([72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]);\n\n    // all configurations should decode the same way\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBENoPad::decode_var(input_no_pad);\n    println(f\"result {result}, expected {expected}\");\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafeWithPad::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafe::decode_var(input_no_pad);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_var_multi_chunks() {\n    // base64: \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"\n    let input: BoundedVec<u8, 64> = BoundedVec::from_array([\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52, 61,\n    ]);\n    // base64: \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4=\"\n    let input_no_pad: BoundedVec<u8, 64> = BoundedVec::from_array([\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 52,\n    ]);\n    // \"The quick brown fox jumps over the lazy dog.\"\n    let expected: BoundedVec<u8, 48> = BoundedVec::from_array([\n        84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32,\n        106, 117, 109, 112, 115, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121,\n        32, 100, 111, 103, 46,\n    ]);\n\n    // all configurations should give the same encoding\n    let result = Base64DecodeBE::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBENoPad::decode_var(input_no_pad);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafeWithPad::decode_var(input);\n    assert(result == expected);\n    let result = Base64DecodeBEUrlSafe::decode_var(input_no_pad);\n    assert(result == expected);\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_base64/v0.4.0/src/decoder.nr"},"109":{"source":"use crate::constants::TWO_POW_120;\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> Field {\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0] as Field\n    } else if N == 2 {\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n        (limbs[0] + limbs[1] * TWO_POW_120) as Field\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        (\n            limbs[0] as Field\n                + limbs[1] as Field * TWO_POW_120 as Field\n                + limbs[2] as Field * TWO_POW_120 as Field * TWO_POW_120 as Field\n        )\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(field: Field) -> [u128; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result: [u128; N] = unsafe { __from_field::<N>(field) };\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<_, N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let TWO_POW_120_FIELD = TWO_POW_120 as Field;\n        let field_val = if N < 2 {\n            result[0] as Field\n        } else if N == 2 {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field + result[1] as Field * TWO_POW_120_FIELD\n        } else {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field\n                + result[1] as Field * TWO_POW_120_FIELD\n                + result[2] as Field * TWO_POW_120_FIELD * TWO_POW_120_FIELD\n        };\n        assert_eq(field_val, field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\n\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[u128; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [u128; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: u128 = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as u128 + (1 - need_more_bytes as u128));\n                limb += byte as u128 * need_more_bytes as u128;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [u128; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, _, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [u128; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        // result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n    predicate: bool,\n) -> [u128; N] {\n    let mut result: [u128; N] = lhs;\n    for i in 0..N {\n        // (lhs[i] - rhs[i]) * predicate + rhs[i]\n        // in case lhs < rhs, this will underflow so we have to do one extra multiplication to prevent it\n        result[i] = lhs[i] * predicate as u128 + rhs[i] * (1 - predicate as u128);\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120 as Field;\n        r *= TWO_POW_120 as Field;\n        modulus_mod_n *= TWO_POW_120 as Field;\n        l += lhs[N - i - 1] as Field;\n        r += rhs[N - i - 1] as Field;\n        modulus_mod_n += params.modulus[N - i - 1] as Field;\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [u128; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [u128; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = (modulus[i] as Field - val[i] as Field);\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += (borrow_flags[0] as Field * TWO_POW_120 as Field);\n    for i in 1..N - 1 {\n        p_minus_self[i] +=\n            (borrow_flags[i] as Field * TWO_POW_120 as Field - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= (borrow_flags[N - 2] as Field);\n    validate_in_range::<_, _, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<T, let N: u32, let MOD_BITS: u32>(limbs: [T; N])\nwhere\n    T: Into<Field>,\n{\n    for i in 0..(N - 1) {\n        limbs[i].into().assert_max_bit_size::<120>();\n    }\n\n    limbs[N - 1].into().assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [u128; N]) {\n    for i in 0..(N) {\n        (limbs[i] as Field).assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    (limbs[N - 1] as Field).assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [u128; N], rhs: [u128; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, _, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] as Field - rhs[0] as Field + addend[0] - result[0] as Field - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120 as Field;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] as Field - rhs[i] as Field + addend[i]\n            - result[i] as Field\n            - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] as Field - rhs[N - 1] as Field + addend[N - 1]\n        - result[N - 1] as Field\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb = modulus[0] + (borrow_flags[0] as u128 * TWO_POW_120) - val[0] - result[0];\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] + (borrow_flags[i] as u128 * TWO_POW_120)\n                - val[i]\n                - result[i]\n                - borrow_flags[i - 1] as u128;\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as u128;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            // __add_u128(params, lhs, rhs)\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [u128; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] as Field + rhs[0] as Field\n            - subtrahend[0] as Field\n            - result[0] as Field\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] as Field + rhs[i] as Field\n                - subtrahend[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120 as Field;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = lhs[N - 1] as Field + rhs[N - 1] as Field\n            - subtrahend[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [u128; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n            + addend[0] as Field\n            + lhs[0] as Field\n            - rhs[0] as Field\n            - result[0] as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n                + addend[i] as Field\n                + lhs[i] as Field\n                - rhs[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = addend[N - 1] as Field + lhs[N - 1] as Field\n            - rhs[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/constrained_ops.nr"},"110":{"source":"use crate::utils::split_bits;\n\nuse crate::constants::{TWO_POW_120, TWO_POW_126, TWO_POW_246};\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\n\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, MOD_BITS, params.modulus);\n    assert(remainder == [0; N]);\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] as Field * params.modulus[j] as Field;\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = TWO_POW_246; // 2^{246}\n    let borrow_carry: Field = TWO_POW_126; // 2^{246 - 120} = 2^{126}\n    let downshift: Field = 1 / (TWO_POW_120 as Field);\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits =\n        (mulout_p[0] - mulout_n[0] + (borrow_flags[0] as Field * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n    flags: [bool; M],\n) -> ([u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [u128; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [u128; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + (modulus2[j] as Field - x[i][j] as Field) as u128;\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [u128; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] as Field * rhs[k][j] as Field);\n            }\n        }\n        mulout[i] += add[i] as Field;\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout: [Field; (N * 2)] = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, k, params.modulus);\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([u128; N], [u128; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [u128; N] = params.double_modulus;\n\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i] as Field;\n                    t0[k][i] += double_modulus[i] as Field;\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i] as Field;\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i] as Field;\n                    t1[k][i] += double_modulus[i] as Field;\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i] as Field;\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i] as Field;\n                t4[i] += double_modulus[i] as Field;\n            } else {\n                t4[i] += linear_terms[j][i] as Field;\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term =\n                        t0[k][i] * t1[k][j] - quotient[i] as Field * params.modulus[j] as Field;\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j] as Field;\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] as Field * params.modulus[j] as Field;\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] as Field * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/expressions.nr"},"112":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [u128; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result: [u128; N] = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: u128 = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as u128;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: u128 = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as u128;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [u128; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = (val[i] as Field).to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = (val[N - 1] as Field).to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/serialization.nr"},"113":{"source":"use crate::constants::{TWO_POW_119, TWO_POW_120, TWO_POW_60};\nuse crate::fns::unconstrained_ops::{__add, __gte, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\nuse crate::utils::msb::get_msb64;\nuse crate::utils::split_bits::__normalize_limbs;\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [u128; N] {\n    let mut x = field;\n    let x_first_u128 = (x as u128);\n    let first: u128 = x_first_u128 % TWO_POW_120;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_120 as Field);\n    let x_second_u128 = (x as u128);\n    let second = x_second_u128 % TWO_POW_120;\n    x = (x - (second as Field)) / (TWO_POW_120 as Field);\n    let x_third_u128 = (x as u128);\n    let third = x_third_u128 % TWO_POW_120;\n    let mut result: [u128; N] = [0; N];\n    if N > 2 {\n        result[0] = first;\n        result[1] = second;\n        result[2] = third;\n    }\n    if N == 2 {\n        result[0] = first;\n        result[1] = second;\n    }\n    if N == 1 {\n        result[0] = first;\n    }\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [u128; N] = params.modulus;\n    flags[0] = modulus[0] < val[0];\n    for i in 1..N - 1 {\n        flags[i] = modulus[i] < val[i] + flags[i - 1] as u128;\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N]) {\n    let mut a = lhs;\n    let mut b = rhs;\n    let underflow = !__gte(lhs, rhs);\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 1;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = a[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = b[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = (borrow * TWO_POW_120 + add_term - sub_term);\n\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> ([u128; N], [bool; N]) {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow_in: u128 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let sub_term = val[i] + borrow_in;\n        let borrow = (sub_term > params.modulus[i]) as u128;\n        result[i] = borrow * TWO_POW_120 + params.modulus[i] - sub_term;\n\n        borrow_in = borrow;\n        borrow_flags[i] = borrow as bool;\n    }\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N], bool) {\n    let add_res = __helper_add(lhs, rhs);\n    let overflow = __gte(add_res, params.modulus);\n\n    let mut subtrahend: [u128; N] = [0; N];\n    let mut result: [u128; N] = [0; N];\n\n    if overflow {\n        subtrahend = params.modulus;\n    }\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term = lhs[i] + rhs[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry as u128;\n\n        let sub_term = subtrahend[i] + borrow_in;\n\n        let mut borrow: u128 = (sub_term > add_term) as u128;\n        result[i] = borrow * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow as u128;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N], bool) {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let underflow = !__gte(lhs, rhs);\n    let addend: [u128; N] = if underflow { params.modulus } else { [0; N] };\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = lhs[i] + addend[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = rhs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = borrow as u128 * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [u128; 2 * N],\n    redc_param: [u128; N],\n    k: u32,\n    modulus: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mulout_field: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout_field[i + j] += x[i] as Field * redc_param[j] as Field;\n        }\n    }\n\n    let mulout: [u128; 3 * N] = __normalize_limbs(mulout_field, 3 * N - 1);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient = __shr(mulout, (k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n    // the quotient has bunch of zero limbs now, so we can just take the first N limbs as a result\n    let mut smaller_quotient = [0; N];\n    for i in 0..N {\n        smaller_quotient[i] = quotient[i] as u128;\n    }\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = __into_field_array(quotient);\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] +=\n                partial_quotient_full[i] * modulus[j] as Field;\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    let long_quotient_mul_modulus_normalized: [u128; 2 * N] =\n        __normalize_limbs(quotient_mul_modulus_normalized, 2 * N);\n    let mut quotient_mul_modulus_normalized: [u128; N] = [0; N];\n    for i in 0..N {\n        quotient_mul_modulus_normalized[i] = long_quotient_mul_modulus_normalized[i];\n    }\n\n    let mut long_remainder = __helper_sub(x, long_quotient_mul_modulus_normalized);\n    // ugly but have to remove a bunch of zeros from this\n    let mut remainder = [0; N];\n    for i in 0..N {\n        remainder[i] = long_remainder[i];\n    }\n    // barrett reduction is quirky so might need to remove a few modulus from the remainder\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n\n    (smaller_quotient, remainder)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let mut target = __helper_sub(params.modulus, one);\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target = __shr1(target);\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [u128; N],\n    p_minus_one_over_two: [u128; N],\n) -> (bool, [u128; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [u128; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = exped == neg_one;\n    let mut result: (bool, [u128; N]) = (found, target);\n    if (!found) {\n        let _target: [u128; N] = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [u128; N] {\n    let mut target: [u128; N] = __one();\n    let p_minus_one_over_two = __shr1(__helper_sub(params.modulus, __one()));\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [u128; N],\n    i: u32,\n) -> u32 {\n    let one: [u128; N] = __one();\n    let is_one = t2m == one;\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n\npub(crate) unconstrained fn __increment<let N: u32>(val: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 1;\n    for i in 0..N {\n        let mut add_term = (val[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift = (120 - limb_shift) as u8;\n    let mask: u128 = (((1 as u128) << limb_shift) - 1) << remainder_shift;\n    result[0] = (input[0 + num_shifted_limbs] >> limb_shift);\n    for i in 1..(N - num_shifted_limbs) {\n        let value = input[i + num_shifted_limbs];\n        result[i] = value >> limb_shift;\n        let remainder: u128 = (value << remainder_shift) & mask;\n        result[i - 1] = result[i - 1] + remainder;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shl<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift: u8 = 120 - limb_shift as u8;\n\n    // 83\n    // limb shift = 1\n    // inside shift = 19 bits to the left\n    // meaning we have 19 carry bits and 41 remainder bits\n    let mask: u128 = (1 as u128 << 120) - 1;\n    //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n    let value = input[0];\n\n    let mut remainder = (value >> remainder_shift);\n    result[num_shifted_limbs] = (value << limb_shift) & mask;\n\n    // shift 84. num shifted = 1\n    for i in 1..((N) - num_shifted_limbs) {\n        let value = input[i];\n        let upshift = ((value << limb_shift) + remainder) & mask;\n        result[i + num_shifted_limbs] = upshift;\n        remainder = (value >> remainder_shift);\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_sub<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    for i in 0..N {\n        borrow = ((rhs[i] + borrow_in) > lhs[i]) as u128;\n        let sub = (borrow << 120) + lhs[i] as u128 - rhs[i] as u128 - borrow_in;\n        result[i] = sub;\n        borrow_in = borrow;\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_add<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr1<let N: u32>(mut input: [u128; N]) -> [u128; N] {\n    let value = input[N - 1];\n    input[N - 1] = value >> 1;\n\n    let mut remainder = (value & 1) << 119;\n\n    for i in 1..N {\n        let value = input[N - 1 - i];\n        input[N - 1 - i] = (value >> 1) + remainder;\n        remainder = (value << 119) & TWO_POW_119;\n    }\n    input\n}\n\npub(crate) unconstrained fn __get_msb<let N: u32>(val: [u128; N]) -> u32 {\n    let mut count = 0;\n    for i in 0..N {\n        let v = val[((N) - 1 - i)];\n        let v_low = v as u64 % TWO_POW_60 as u64;\n        let v_high = ((v - v_low as u128) / TWO_POW_60) as u64;\n        if (v_high > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2)) + get_msb64(v_high);\n            break;\n        }\n        if (v_low > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2 + 1)) + get_msb64(v_low);\n            break;\n        }\n    }\n    count\n}\n\npub(crate) fn __get_bit<let N: u32>(input: [u128; N], bit: u32) -> bool {\n    let segment_index: u32 = bit / 120;\n    let uint_index = bit % 120;\n    let limb: u128 = input[segment_index];\n    let value = (limb >> uint_index as u8) & 1;\n    value == 1\n}\n\npub(crate) fn __into_field_array<let N: u32>(input: [u128; N]) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        result[i] = input[i] as Field;\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/unconstrained_helpers.nr"},"114":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __get_bit, __get_msb, __helper_add, __helper_sub, __increment,\n    __multiplicative_generator, __primitive_root_log_size, __shl, __shr,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse super::unconstrained_helpers::__shr1;\n\npub(crate) unconstrained fn __one<let N: u32>() -> [u128; N] {\n    let mut limbs: [u128; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [u128; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> [u128; N] {\n    let f: [u128; N] = limbs;\n    __helper_sub(params.modulus, f)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    // check if the result is greater than the modulus\n    if __gte(result, params.modulus) {\n        __helper_sub(result, params.modulus)\n    } else {\n        result\n    }\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += (lhs[i] as Field * rhs[j] as Field);\n        }\n    }\n    let to_reduce: [u128; (N * 2)] = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(to_reduce, params.redc_param, MOD_BITS, params.modulus);\n    // ([0; N], [0; N])\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    let inv_divisor: [u128; N] = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut quotient: [u128; N] = [0; N];\n    let mut remainder: [u128; N] = numerator;\n\n    let b = divisor;\n    let numerator_msb = __get_msb(numerator);\n    let divisor_msb = __get_msb(divisor);\n    if divisor_msb > numerator_msb {\n        ([0; N], numerator)\n    } else {\n        let mut bit_difference = __get_msb(remainder) - __get_msb(divisor);\n        let mut accumulator: [u128; N] = __one();\n        let mut divisor = __shl(divisor, bit_difference);\n        accumulator = __shl(accumulator, bit_difference);\n\n        if (__gte(divisor, __increment(remainder))) {\n            divisor = __shr1(divisor);\n            accumulator = __shr1(accumulator);\n        }\n\n        for _ in 0..(N * 120) {\n            if (__gte(remainder, b) == false) {\n                break;\n            }\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (__gte(remainder, divisor)) {\n                remainder = __helper_sub(remainder, divisor);\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient = __helper_add(quotient, accumulator);\n            }\n            divisor = __shr1(divisor); // >>= 1;\n            accumulator = __shr1(accumulator); //  >>= 1;\n        }\n\n        (quotient, remainder)\n    }\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    let one = __one();\n    let exp = __helper_sub(params.modulus, __helper_add(one, one));\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n    exponent: [u128; N],\n) -> [u128; N] {\n    let x = exponent;\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [u128; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if __get_bit(x, num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n) -> [[u128; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]; M] = std::mem::zeroed();\n\n    for i in 0..M {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]; M] = [[0; N]; M];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..M {\n        let idx = M - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]],\n) -> [[u128; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]] = [];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result = result.push_front(T0);\n        } else {\n            result = result.push_front([0; N]);\n        };\n    }\n\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [u128; N],\n) -> std::option::Option<[u128; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one = __one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let Q = __shr(\n        __helper_sub(params.modulus, one),\n        primitive_root_log_size - 1,\n    );\n    let two = __helper_add(one, one);\n    let Q_minus_one_over_two = __shr(__helper_sub(Q, two), 2);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [u128; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __gte<let N: u32, let MOD_BITS: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let mut result = false;\n    let mut early_exit = false;\n    for i in 0..(N) {\n        let idx = (N) - 1 - i;\n        if (rhs[idx] == lhs[idx]) {\n            continue;\n        }\n\n        result = rhs[idx] < lhs[idx];\n        early_exit = true;\n        break;\n    }\n    if early_exit {\n        result\n    } else {\n        lhs[0] == rhs[0]\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/unconstrained_ops.nr"},"116":{"source":"pub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [u128; N],\n\n    // @brief double_modulus: used when performing negations and subtractions\n    // @note we borrow 1 from the last limb. This is for easing up the operations that might underflow\n    pub double_modulus: [u128; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [u128; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [u128; N],\n        redc_param: [u128; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [u128; N]) -> [u128; N] {\n    let TWO_POW_120: u128 = 0x1000000000000000000000000000000;\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (modulus[i] + modulus[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/params.nr"},"117":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::Neg;\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [u128; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {\n\n    pub fn zero(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [u128; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::zero(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [u128]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [u128; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    pub fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    pub fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    pub fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    pub fn get_limbs(self) -> [u128; N] {\n        self.limbs\n    }\n\n    pub fn get_limb(self, idx: u32) -> u128 {\n        self.limbs[idx]\n    }\n\n    pub fn set_limb(&mut self, idx: u32, value: u128) {\n        self.limbs[idx] = value;\n    }\n\n    pub unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    pub unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    pub unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    pub fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    pub fn validate_in_range(self) {\n        validate_in_range::<_, _, MOD_BITS>(self.limbs);\n    }\n\n    pub fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    pub fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    pub fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    pub fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/runtime_bignum.nr"},"124":{"source":"use crate::constants::TWO_POW_120;\n\nunconstrained fn split_120_bits(mut x: Field) -> (u128, u128) {\n    // Here we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low = (x as u128) % TWO_POW_120;\n    let high = ((x - low as Field) / TWO_POW_120 as Field) as u128;\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [u128; N] {\n    let mut normalized: [u128; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n        normalized[i] = lo as u128;\n        next = input[i + 1] + hi as Field;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo as u128;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/utils/split_bits.nr"},"135":{"source":"use dep::bignum::RuntimeBigNum;\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\nmod tests {\n\n    use crate::types::RBN2048;\n    use super::verify_sha256_pkcs1v15;\n    use bignum::params::BigNumParams;\n    use bignum::RuntimeBigNum;\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_1024() {\n        // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170, 193,\n            96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n        ];\n\n        let params: BigNumParams<9, 1024> = BigNumParams::new(\n            false,\n            [\n                0xab238ad9cb37979a43aefbf10be8fb,\n                0x31347febe45fe8c2dac1dd30900704,\n                0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n                0x5eac6390f7873fe97ff9bb14a173ea,\n                0xbc41f700c91fd733a2c63177bbdbd4,\n                0x41442bd58769a3595b659a2ec9c6be,\n                0x4ddc91395f330382aa2e2d3fbe147,\n                0x3d008ff255a0bc71c7887f5728ba1,\n                0xb640c3a8f511c64e,\n            ],\n            [\n                0x5d53d2634c6a0918266043968ce263,\n                0x5dd4be3dce0323a492ee9340aec4db,\n                0xf82d0e2e5c8319f01a460c72c01854,\n                0x236e6fc6e62e8a1d522acda5fb3892,\n                0xdaf755619d66e580901aa224d03174,\n                0x8366291616480e7e1f202dbcedda87,\n                0x40ba1202537d1e94561ccc05265586,\n                0x69b993d857ba89ea5de9822aeb4b93,\n                0x167968c0000761a273,\n            ],\n        );\n\n        let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xc3850e84ea02da3f028ff422f4d6a9,\n                0x9761f0bd9021f76d45c60df0670a19,\n                0xc1ede421a43607ab623ed4d5a17fc8,\n                0x86197b4315206f4d53200b42555831,\n                0xe95783b69db28c26a83706f39d04cd,\n                0x18b178dc1a9ec76fb22b57e4dfa703,\n                0xdd0e19cd5a09ab48e7af4d0e3470e3,\n                0x10004dfab1cf91304e80e6baa4dfc7,\n                0x241c3fd77b90adef,\n            ],\n        };\n\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n    }\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_2048() {\n        // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131, 166,\n            79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n        ];\n\n        let params: BigNumParams<18, 2048> = BigNumParams::new(\n            false,\n            [\n                0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n                0xbfb937fc4d3cf02cc0af780f3cab44,\n                0xd20637ef7adcf5d238ee87bccc9bca,\n                0xb9db4f2663108e2f8b673f7612ae8b,\n                0x85f894ef669b36bfd3d86b0a28873,\n                0xdcc70e1884e38b8229cce3b884121d,\n                0x35488d1138e0b03e1676f7f5d8a5b3,\n                0xe1a97820e7dcbb4eab35c9b71bb273,\n                0x97d19eb3c63249ddbfcff915863f54,\n                0x3a78c7af6da0f6af0d67b1ca4b6065,\n                0xd7a3c433c020f624821e5e678c7d69,\n                0x52d5b53240feae82ffea3d2a3d9b09,\n                0xb8aad5e19e2163f68997c6fdd71906,\n                0x5db432d06e8b0bf59511100c7894e2,\n                0xadc0bbc4c54da10d1cc88438ea3127,\n                0xece1cf6a1501109cd2734d5893c8d9,\n                0x7196b90acdf06c31b1288064fd0c27,\n                0xc8,\n            ],\n            [\n                0x1b1deccf4dbde852c34a5d6908a0f,\n                0xbc9e5bdab22f023fbcca58692bccf5,\n                0x1f65439685623e45396ff55751c3bf,\n                0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n                0x5ca2e8e3048243c16c708a8030ab0d,\n                0x30079bfeb1fa51e5501581173ca19c,\n                0xff8d5f6bea485fdcc2716327f69ab4,\n                0x36b599d81589416b5b5f037986b999,\n                0x75612e34a4ff29f0a19a7823512f58,\n                0x288b6897929b54c3b26a5faa07c00f,\n                0x4b5675fa13ab7444f1f047d3eb1bbe,\n                0x6ba0ac610ef9f267ab30fe25bb1c84,\n                0xa386b48ee03168d5cea3ecb9dc901f,\n                0xacf1a01f7dba44e050c976142fb1f6,\n                0x97a63b5cb7efc60d3502946aec63cf,\n                0x12cc1d5cab10a1e9e2398d29b9e3ef,\n                0x4635cf25c66e76bba8034df46204fb,\n                0x146f,\n            ],\n        );\n\n        let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xad29e07d16a278de49a371b9760a27,\n                0x86311920cc0e17a3c20cdff4c56dbb,\n                0x863556c6c5247dd83668dd825716ae,\n                0xc247c960945f4485b46c33b87425ca,\n                0x7326463c5c4cd5b08e21b938d9ed9a,\n                0x4f89fe0c82da08a0259eddb34d0da1,\n                0x43a74e76d4e1bd2666f1591889af0d,\n                0x240f7b80f0ff29f4253ee3019f832d,\n                0xc6edd131fbaaf725fd423dac52b362,\n                0x85f9732679242163e8afff44f6104d,\n                0xd3c3bbcb1757013fd6fb80f31dd9a6,\n                0x9008633f15df440e6df6d21ee585a2,\n                0x324df3425ed256e283be5b6b761741,\n                0xc60c1302929bd0e07caa4aeff4e8fd,\n                0x600d804ff13ba8d0e1bc9508714212,\n                0x50f7e75e5751d7edd61167027926be,\n                0x0db41d39442023e1420a8a84fe81d9,\n                0xab,\n            ],\n        };\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n    }\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n        // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132, 239,\n            227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n        ];\n\n        let params: BigNumParams<18, 2048> = BigNumParams::new(\n            false,\n            [\n                0xe40ee47801326543c8e84b85d567c1,\n                0x5b54ea87f0ce29de1995697b0696fd,\n                0x457078f8fdce68b437cac0970b2452,\n                0x473ec776fee3731b6ab06e35875ddc,\n                0x62dedd594e5f12c80c3ccb5791a6cd,\n                0xecb934b9d8272c5e3a418145345499,\n                0xd1af643b3d785470ed0c6cd633f706,\n                0xb58a57b9e96eccbdfc7c17f0333d4,\n                0x2ebd34b5039fc596504927c282c60d,\n                0x3a44928a74f25fc1043bb37ce4dfa8,\n                0x91448459f9617fac33a2816162ac9e,\n                0x70cb910d9f3e1a78864640ec6c8240,\n                0x9aed33f6b31f1c9de67248a98c180,\n                0x7f1416e032c79488c94b311e87bd9c,\n                0x7191b4ebb1b3fffa949fa48ed01e5,\n                0x350a75cbaeca6bfdd71ca83cdbcae9,\n                0xfb1d274fa207457c6814d42c09f9cf,\n                0xd4,\n            ],\n            [\n                0x803bf4d38110a7d37fdd05f590dee9,\n                0xa68d317c933f37cab5ab4e7c00a3b9,\n                0x476a05a536bf5f2aa1b8850146cba7,\n                0xca297ea8b5528d91d4836ff27c30ab,\n                0x75cf2eaab76eefa12bbd570f1aea9f,\n                0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n                0xd497db1f6ebe83decacaa647fabea6,\n                0x686b27ca330e25e7a7cf197f6433ef,\n                0xfde04d2225c8308b07580af0058a0f,\n                0xa29fb69777c0e916976243b2b09855,\n                0xf983592285852e7e1c2cb3ae968323,\n                0x673608017f9f5acf67a01b73728d70,\n                0xeeff82521c0bc432a05f4b7444fac0,\n                0x85a89c4d229f60aaa3aa7ac7dac1e2,\n                0xcfecff93bc9fbfe0d6dff6091f2db8,\n                0xf20f047dcb224b4447bd098c07f8c2,\n                0x554bb53cadeb3eaab911a189f90227,\n                0x133b,\n            ],\n        );\n\n        let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xa250eff812c63eaaeaa3f04641c05f,\n                0xecc09613cb8b289c1f37c8f92e6a05,\n                0x2c0a0510058360c07af65d46f594fd,\n                0x943d67513363d3de430c94a1dafe7c,\n                0x511ec8e9b10bc6c6ff0d6c232ccf92,\n                0x50ffd07b3c093b3f5fc027de847731,\n                0xc268e1489449943fdafdf89ff168c3,\n                0x0b8b7f9f49b492f78fda58d252f23a,\n                0x491c6c4ef836a6a8730b7bf81e865e,\n                0x8746c75fb079d014e419543f56d7f0,\n                0x65804c417d6168a8bc0025d255cebf,\n                0xf695e91b77890b8e3fd775fa56e627,\n                0x5e90001c0218550f4083ae28025a2f,\n                0x526bd4eff34f25f62a698f0470e0a6,\n                0x7f224306a7d9daf536b1559434c6c6,\n                0x88809f16fe1fcea3c87511d9319735,\n                0x7694685fee0bfab4a9196b92ec6f2e,\n                0xa7,\n            ],\n        };\n\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n    }\n\n    #[test]\n    fn smoke_test() {\n        // Output of `cargo run -- --msg \"hello world\"` in the `signature_gen` directory\n        // Create runtime params:\n        let modulus_limbs = [\n            0x65af46d235241cf0e8fbe8cff4abb7,\n            0xeead39ba3f377ddd5ccb2ef2085190,\n            0xe483f94c0a98e8b618d92fb926f596,\n            0x1fa8c1b2c62cca6db090cd74a29db2,\n            0xc38e22042fcb74585a7e535301f50f,\n            0xcbc4378e5212752743ae78a75a44a9,\n            0xf5acc41788d9a346a0f75630a8b2b6,\n            0xf7a741bb3ecf1aadd5a327f362abd8,\n            0x4d5f24e815db43a1b2cc2ba40f8715,\n            0xe501f1a01305cb198475a4bff0da2e,\n            0xd541b78cfbc2b314083c340840c82c,\n            0xa0ab069c26b2a0458f4c642bf72526,\n            0x2ccb676d8f22517116fee0d2340533,\n            0x7cf2a7cf772025c0a83747bbc18228,\n            0xf9475f17988a56f17b3bdf88dc72dc,\n            0x4ff228bee24415fae7a7c05771e830,\n            0x55acd96b485515c38906106cf0d189,\n            0xb9,\n        ];\n        let redc_limbs = [\n            0x172c8f156f020ad88d30fa3ba47f03,\n            0x1740a43a67cb9a7be1ac1422d77246,\n            0x2d967be1edf369834317e04856e591,\n            0x65d9fa0de5fdab598c04d9a515156a,\n            0xc6791a661ea7621db7e6c4ec48f466,\n            0xa4a1a7c06d3e8a0bcbc540c6af6788,\n            0xdcaffeb149f5bf646caa00d7355715,\n            0xb75471630a9d0fefb5cb61e66991a1,\n            0x97c041a0fc30fdff3d5ed16997da02,\n            0xbfbe7d217694b269e1ed37819c2f17,\n            0x1b44ffc3180531e2ab8bdf7848a3a9,\n            0x9f004af11132cb68bb55998ed7616a,\n            0x1b15dbbb96ce80f479724bbd768a0c,\n            0x59ba1419093ae6ed2592ffb3065867,\n            0xa35b69affa3bb3f4713f315e50b584,\n            0xa873210f83a6de0d8cbb816af3e37,\n            0xbe4fe7cf98da87ec87638030797e92,\n            0x1619,\n        ];\n\n        let signature_limbs = [\n            0x2f397c4611d4a4271453e1e50e1578,\n            0xe506a7f47c721a4943783e8ad459e6,\n            0x6cc4ae1d91cb381cba9673470999fb,\n            0x1e127364d07f94e58227f50fbf5687,\n            0xf64a2579c7189f882d68832d16faa4,\n            0x3b014b74c6c6f76f2f8af170fa0fe4,\n            0x7df41e68c86815a6fdc33968c66b67,\n            0x6a57ac06282527242fddb6ed08dbdc,\n            0xac40d37b819c4b6193f90a634e4fc7,\n            0x96606ed166a7f032d858cd40ac73a5,\n            0x8eb7d4351159a46733f92610d5c597,\n            0xc8e8e9faa9738e82dbe774a3f5cf07,\n            0x89ca84fd54ee3d5cca87c9f178375e,\n            0xdb7a1465fc76507ea498a351af70dd,\n            0x6ac6fe14f51c711f983125c776f712,\n            0x3254c17fef51bf4194a8a1674634e3,\n            0xee38c83c77c6e1ff7b70a5d9d1dd0f,\n            0x26,\n        ];\n\n        let hash: [u8; 32] = [\n            0xb9, 0x4d, 0x27, 0xb9, 0x93, 0x4d, 0x3e, 0x08, 0xa5, 0x2e, 0x52, 0xd7, 0xda, 0x7d,\n            0xab, 0xfa, 0xc4, 0x84, 0xef, 0xe3, 0x7a, 0x53, 0x80, 0xee, 0x90, 0x88, 0xf7, 0xac,\n            0xe2, 0xef, 0xcd, 0xe9,\n        ];\n\n        let has_multiplicative_inverse = false;\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(has_multiplicative_inverse, modulus_limbs, redc_limbs);\n\n        let signature: RBN2048 = RBN2048::from_array(params, signature_limbs);\n\n        assert(verify_sha256_pkcs1v15(hash, signature, 65537));\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_rsa/v0.7.0/src/rsa.nr"},"141":{"source":"mod utils;\n\npub use utils::{conditional_select, DebugRandomEngine, lt_f};\nuse std::collections::bounded_vec::BoundedVec;\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"haystack\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @details the \"body\" parameter contains some input bytes, zero-padded to the nearest multiple of 31\n *          We pack \"bytes\" into 31-byte \"chunks\", as this is the maximum number of bytes we can fit\n *          into a field element without overflowing.\n *          TODO: once we can derive generics via arithmetic on other generics, we want this \"31\" parameter\n *          to be defined by the backend being used instead of being hardcoded to 31\n *\n * @note We perform this 31-byte packing because it dramatically reduces the number of constraints required for substring matching. See (chicken)\n *\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunks: the number of 31-byte chunks needed to represent MaxPaddedBytes\n **/\npub struct StringBody<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    chunks: [Field; PaddedChunks],\n    pub byte_length: u32,\n}\n\n/**\n * @brief represents a byte-array of up to MaxBytes, that is used as a \"needle\" array,\n *        where we want to validate a substring \"needle\" is present in the \"haystack\"\n * @tparam MaxBytes: the maximum number of bytes that StringBody can contain\n * @tparam MaxPaddedBytes: the maximum number of bytes after zero-padding to the nearest multiple of 31\n * @tparam PaddedChunksMinusOne: the number of 31-byte chunks needed to represent MaxPaddedBytes minus one!\n *\n * @note PaddedChunksMinusOne is because we are going to do the following:\n *                            1. align the SubString bytes according to the StringBody bytes being matched against\n *                            2. split the aligned bytes into 31-byte chunks. The 1st and last chunks might contain\n *                               fewer than 31 bytes due to the above alignment\n *                            3. validate the aligned-byte-chunks match the StringBody byte chunks\n *       To account for the fact that the 1st and last chunks might have fewer bytes we treat those separately\n *       The param PaddedChunksMinusOne is the number of 31-byte chunks required to represent SubString *EXCLUDING* the initial and final chunks\n */\npub struct SubString<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> {\n    pub body: [u8; MaxPaddedBytes],\n    pub byte_length: u32,\n}\n\npub type StringBody32 = StringBody<62, 2, 32>;\npub type StringBody64 = StringBody<93, 3, 64>;\npub type StringBody128 = StringBody<155, 5, 128>;\npub type StringBody256 = StringBody<279, 9, 256>;\npub type StringBody512 = StringBody<527, 17, 512>;\npub type StringBody1024 = StringBody<1054, 34, 1024>;\npub type StringBody2048 = StringBody<2077, 67, 2048>;\npub type StringBody4096 = StringBody<4123, 133, 4096>;\npub type StringBody8192 = StringBody<8215, 265, 8192>;\npub type StringBody16384 = StringBody<16399, 529, 16384>;\n\npub type SubString32 = SubString<62, 1, 32>;\npub type SubString64 = SubString<93, 2, 64>;\npub type SubString128 = SubString<155, 4, 128>;\npub type SubString256 = SubString<279, 8, 256>;\npub type SubString512 = SubString<527, 16, 512>;\npub type SubString1024 = SubString<1054, 33, 1024>;\n\npub trait SubStringTrait {\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        num_bytes_in_first_chunk: Field,\n        body_chunk_offset: Field,\n        num_full_chunks: Field,\n    );\n\n    fn len(self) -> u32;\n    fn get(self, idx: Field) -> u8;\n    fn get_body(self) -> [u8];\n}\n\n// ######################################################\n// S U B S T R I N G\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    /**\n     * @brief construct a SubString object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    pub fn new<let InputBytes: u32>(input: [u8; InputBytes], input_length: u32) -> Self {\n        assert(MaxBytes <= MaxPaddedBytes);\n        assert(input_length <= MaxBytes);\n        assert(InputBytes <= MaxBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = input[i];\n        }\n        SubString { body, byte_length: input_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together\n     * @details each SubString can have different MaxBytes sizes, however we need OtherBytes <= MaxBytes\n     *          (use concat_into for cases where this is not the case)\n     **/\n    pub fn concat<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> Self {\n        assert(\n            OtherPaddedBytes <= MaxPaddedBytes,\n            \"SubString::concat. SubString being concatted has larger max length. Try calling concat_into\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= MaxPaddedBytes,\n            \"SubString::concat, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body = self.body;\n        let offset: u32 = self.byte_length;\n        for i in 0..MaxPaddedBytes {\n            if (i + offset < MaxPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n\n    /**\n     * @brief concatenate two SubString objects together. Return type has OtherPaddedBytes max bytes\n     * @details each SubString can have different MaxBytes sizes, however we need MaxBytes <= OtherBytes\n     *          (use concat for cases where this is not the case)\n     **/\n    pub fn concat_into<let OtherPaddedBytes: u32, let OtherPaddedChunks: u32, let OtherMaxBytes: u32>(\n        self,\n        other: SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes>,\n    ) -> SubString<OtherPaddedBytes, OtherPaddedChunks, OtherMaxBytes> {\n        assert(\n            MaxPaddedBytes <= OtherPaddedBytes,\n            \"SubString::concat_into. SubString being concat has larger max length. Try calling concat\",\n        );\n        assert(\n            self.byte_length + other.byte_length <= OtherPaddedBytes,\n            \"SubString::concat_into, concatenated string exceeds MaxPaddedBytes\",\n        );\n        let mut body: [u8; OtherPaddedBytes] = [0; OtherPaddedBytes];\n        for i in 0..MaxBytes {\n            body[i] = self.body[i];\n        }\n\n        let offset: u32 = self.byte_length;\n        for i in 0..OtherPaddedBytes {\n            if (i + offset < OtherPaddedBytes) {\n                body[i + offset] = other.body[i];\n            }\n        }\n        SubString { body, byte_length: self.byte_length + other.byte_length }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> SubStringTrait for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n\n    fn len(self) -> u32 {\n        self.byte_length\n    }\n    fn get(self, idx: Field) -> u8 {\n        self.body[idx as u32]\n    }\n    fn get_body(self) -> [u8] {\n        let x = self.body.as_slice();\n        x\n    }\n\n    /**\n     * @brief given some `haystack` 31-byte chunks, validate that there exist `num_full_chunks`\n     *        in the SubString, starting at byte position `starting_needle_byte`.\n     *        The selected chunks must be equal to the haystack chunks starting at `starting_haystack_chunk`\n     **/\n    fn match_chunks<let HaystackChunks: u32>(\n        self,\n        haystack: [Field; HaystackChunks],\n        starting_needle_byte: Field,\n        starting_haystack_chunk: Field,\n        num_full_chunks: Field,\n    ) {\n        let mut substring_chunks: [Field; PaddedChunksMinusOne] = [0; PaddedChunksMinusOne];\n        // pack the substring into 31 byte chunks.\n        // This is fairly expensive as we need a ROM table to access the SubString.body\n        // which is 2 gates per byte\n        for i in 0..PaddedChunksMinusOne {\n            let mut slice: Field = 0;\n            for j in 0..31 {\n                slice *= 256;\n                let substring_idx = starting_needle_byte as Field + (i as Field * 31) + j as Field;\n                let mut byte = self.body[substring_idx];\n                slice += byte as Field;\n            }\n            std::as_witness(slice);\n            substring_chunks[i] = slice;\n        }\n        // iterate over the needle chunks and validate they match the haystack chunks\n        for i in 0..PaddedChunksMinusOne {\n            let predicate: Field = lt_f(i as Field, num_full_chunks) as Field;\n            let lhs = substring_chunks[i];\n            let rhs = haystack[predicate as Field * (i as Field + starting_haystack_chunk)];\n            assert(predicate * (lhs - rhs) == 0);\n        }\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> From<BoundedVec<u8, MaxBytes>> for SubString<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n    fn from(input: BoundedVec<u8, MaxBytes>) -> Self {\n        Self::new(input.storage(), input.len() as u32)\n    }\n}\n\n// ######################################################\n// S T R I N G   B O D Y\n// ######################################################\nimpl<let MaxPaddedBytes: u32, let PaddedChunks: u32, let MaxBytes: u32> StringBody<MaxPaddedBytes, PaddedChunks, MaxBytes> {\n\n    /**\n     * @brief construct a StringBody object from an input byte array\n     * @details the input byte array must have a number of bytes less than or equal to MaxBytes\n     **/\n    pub fn new<let InputBytes: u32>(data: [u8; InputBytes], length: u32) -> Self {\n        assert(length <= MaxBytes);\n        assert(length <= InputBytes);\n        let mut body: [u8; MaxPaddedBytes] = [0; MaxPaddedBytes];\n        for i in 0..InputBytes {\n            body[i] = data[i];\n        }\n        StringBody { body, chunks: compute_chunks(body), byte_length: length }\n    }\n\n    /**\n     * @brief Validate a substring exists in the StringBody. Returns a success flag and the position within the StringBody that the match was found\n     **/\n    pub fn substring_match<NeedleSubString>(self, substring: NeedleSubString) -> (bool, u32)\n    where\n        NeedleSubString: SubStringTrait,\n    {\n        // use unconstrained function to determine:\n        // a: is the substring present in the body text\n        // b: the position of the first match in the body text\n        let position: u32 = unsafe {\n            // Safety: The rest of this function checks this.\n            utils::search(\n                self.body,\n                substring.get_body(),\n                self.byte_length,\n                substring.len(),\n            )\n        };\n\n        assert(\n            position + substring.len() <= self.byte_length,\n            \"substring not present in main text (match found if a padding text included. is main text correctly formatted?)\",\n        );\n        let substring_length = substring.len();\n\n        // chunk_index = which 31-byte haystack chunk does the needle begin in?\n        let chunk_index: u32 = position / 31;\n        // chunk_offset = how many haystack bytes are present in the 1st haystack chunk?\n        let chunk_offset: u32 = position % 31;\n        // how many needle bytes are in 1st haystack chunk?\n        let num_bytes_in_first_chunk: u32 = 31 - chunk_offset;\n        let mut starting_needle_byte_index_of_final_chunk: Field = 0;\n        let mut chunk_index_of_final_haystack_chunk_with_matching_needle_bytes: Field = 0;\n        let mut num_full_chunks = 0;\n\n        // is there only one haystack chunk that contains needle bytes?\n        let merge_initial_final_needle_chunks =\n            lt_f(substring_length as Field, num_bytes_in_first_chunk as Field);\n\n        // if the above is false...\n        if (!merge_initial_final_needle_chunks) {\n            // compute how many full 31-byte haystack chunks contain 31 needle bytes\n            num_full_chunks = (substring_length - num_bytes_in_first_chunk) / 31;\n            // for the final haystack chunk that contains needle bytes, where in the needle does this chunk begin?\n            starting_needle_byte_index_of_final_chunk =\n                num_full_chunks as Field * 31 + num_bytes_in_first_chunk as Field;\n\n            // what is the index of the final haystack chunk that contains needle bytes?\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes =\n                num_full_chunks as Field + chunk_index as Field + 1;\n        } else {\n            starting_needle_byte_index_of_final_chunk = 0;\n            // if the needle bytes does NOT span more than 1 haystack chunk,\n            // the final haystack index will be the same as the initial haystack index\n            chunk_index_of_final_haystack_chunk_with_matching_needle_bytes = chunk_index as Field;\n        }\n\n        // To minimize the number of comparisons between the haystack bytes and the needle bytes,\n        // we pack both the haystack bytes and needle bytes into 31-byte Field \"chunks\" and compare chunks.\n        // To do this correctly, we need to align the needle chunks with the haystack chunks\n        /*\n            e.g. consider a toy example where we pack 3 bytes into a chunk\n            haystack: [VWXZYABCDEQRSTU]\n            needle: [ABCDE]\n        when constructing needle chunks, we need to align according to where the needle is located in the haystack\n            haystack chunks:   [VWX] [ZYA] [BCD] [EQR] [STU]\n                                      _..   ...   .__\n            processed needle chunks: [ZYA] [BCD] [EQR]\n        a \"_\" symbole means that a chunk byte has been sourced from the haystack bytes,\n            a \".\" symbol means a byte is sourced from the needle bytes\n        Both the initial and final chunks of the processed needle are \"composite\" constructions.\n            If chunk byte index < `position` or is > `position + needle length\", byte is sourced from haystack, otherwise byte is sourced from needle\n        The way we execute this in code is to define an \"initial\" needle chunk and a \"final\" needle chunk.\n            Num needle bytes in initial chunk = position % 31\n            Num needle bytes in final chunk = (needle_length - (position % 31)) % 31\n        If needle_length < 31 then the \"initial\" and \"final\" chunks\n            are actually the *same* chunk and we must perform a merge operation\n            (see later in algo for comments)\n        */\n        // instead of directly reading haystack bytes, we derive the bytes from the haystack chunks.\n        // This way we don't have to instantiate the haystack bytes as a ROM table, which would cost 2 * haystack.length gates\n        let offset_to_first_needle_byte_in_chunk: Field = chunk_offset as Field;\n        let initial_haystack_chunk = self.chunks[chunk_index];\n        let final_haystack_chunk =\n            self.chunks[chunk_index_of_final_haystack_chunk_with_matching_needle_bytes];\n\n        let initial_body_bytes: [u8; 31] = initial_haystack_chunk.to_be_bytes();\n        let final_body_bytes: [u8; 31] = final_haystack_chunk.to_be_bytes();\n\n        // When defining the initial chunk bytes, we can represent as Field elements as we are deriving values from known bytes.\n        // This saves us a few gates\n        let mut initial_chunk: [Field; 31] = [0; 31];\n        let mut final_chunk: [Field; 31] = [0; 31];\n        for i in 0..31 {\n            // if i < offset_to_first_needle_byte_in_chunk, we read from the haystack\n            // otherwise we read from the needle\n            // n.b. this can be done with an if statement, but the following code produces fewer constraints\n            let idx: Field = i as Field;\n            let predicate: Field = lt_f(i as Field, offset_to_first_needle_byte_in_chunk) as Field;\n            let lhs: Field = initial_body_bytes[i] as Field;\n            // if i < offset_to_first_needle_byte_in_chunk then `idx - offset_to_first_needle_byte_in_chunk` is negative\n            // to ensure we access array correctly we need to set the lookup index to 0 if predicate = 0\n            let substring_idx = (1 - predicate) * (idx - offset_to_first_needle_byte_in_chunk);\n            let rhs: Field = substring.get(substring_idx) as Field;\n            let byte: Field = predicate * (lhs - rhs) + rhs;\n            initial_chunk[i] = byte;\n        }\n\n        // If `merge_initial_final_needle_chunks = true`, `final_chunk` will contain the full needle data,\n        // this requires some complex logic to determine where we are sourcing the needle bytes from.\n        // Either they come from the `initial_chunk`, the haystack bytes or the substring bytes.\n        for i in 0..31 {\n            let mut lhs_index: Field =\n                starting_needle_byte_index_of_final_chunk as Field + i as Field;\n            let predicate = lt_f(lhs_index, substring_length as Field);\n            /*\n                | merge_initial_final_needle_chunks | predicate | byte_source              |\n                | false                             | false     | body_bytes[i]            |\n                | false                             | true      | substring[lhs_idx]       |\n                | true                              | false     | body_bytes[i]            |\n                | true                              | true      | initial_chunk[lhs_index] |\n            NOTE: if `merge = true` and `predicate = true`, we read from `initial_chunk` to short-circuit some extra logic.\n                      if `initial_chunk` did not exist, then we would need to validate whether `i < offset_to_first_needle_byte_in_chunk`.\n                      if true, the byte source would be body_bytes, otherwise the source would be substring bytes\n            */\n            let substring_idx = (predicate as Field) * lhs_index;\n            let byte_from_substring = substring.get(substring_idx) as Field;\n            let byte_from_initial_chunk = initial_chunk[i] as Field;\n            let byte_from_haystack = final_body_bytes[i] as Field;\n\n            // TODO: find out why this cuts 1 gate per iteration\n            std::as_witness(byte_from_initial_chunk);\n\n            let p = predicate as Field;\n            let m = merge_initial_final_needle_chunks as Field;\n            // p * (m * (a - b) + (b - c)) + c\n            let ab = byte_from_initial_chunk - byte_from_substring;\n            std::as_witness(ab);\n            let bc = byte_from_substring - byte_from_haystack;\n            let t0 = m * ab + bc;\n            let destination_byte = p * t0 + byte_from_haystack;\n\n            final_chunk[i] = destination_byte;\n        }\n\n        // TODO: moving this above the previous code block adds 31 gates. find out why? :/\n        let mut initial_needle_chunk: Field = 0;\n        let mut final_needle_chunk: Field = 0;\n\n        // Construct the initial and final needle chunks from the byte arrays we previously built.\n        // Validate they match the initial and final haystack chunks\n        for i in 0..31 {\n            initial_needle_chunk *= 256;\n            initial_needle_chunk += initial_chunk[i];\n            final_needle_chunk *= 256;\n            final_needle_chunk += final_chunk[i];\n        }\n\n        std::as_witness(initial_needle_chunk);\n        std::as_witness(final_needle_chunk);\n\n        initial_needle_chunk = merge_initial_final_needle_chunks as Field\n            * (final_needle_chunk - initial_needle_chunk)\n            + initial_needle_chunk;\n        assert(initial_needle_chunk == initial_haystack_chunk);\n        assert(final_needle_chunk == final_haystack_chunk);\n\n        // Step 3: Construct needle chunks (for all but the 1st and last chunks) and validate they match the haystack chunks.\n        //         This part is much simpler as we know that all bytes in the chunk are sourced from the needle chunk.\n        // NOTE:   If we chose to not pack bytes into 31-byte chunks, the string matching algorithm would be simpler but more expensive.\n        //         Instead of matching chunks with each other, we would match individual byte values.\n        //         i.e. the number of iterations in this loop would be 31x greater\n        //         each loop iteration would also require a predicate, to check whether the byte index was within the needle range or not\n        //         Combined these two operations would add about 10 gates per loop iteration,\n        //         combined with a 31x iteration length would make this algorithm much more costly than the chunked variant\n        let body_chunk_offset: Field = chunk_index as Field + 1;\n        substring.match_chunks(\n            self.chunks,\n            num_bytes_in_first_chunk as Field,\n            body_chunk_offset,\n            num_full_chunks as Field,\n        );\n        (true, position)\n    }\n}\n\nimpl<let MaxPaddedBytes: u32, let PaddedChunksMinusOne: u32, let MaxBytes: u32> From<BoundedVec<u8, MaxBytes>> for StringBody<MaxPaddedBytes, PaddedChunksMinusOne, MaxBytes> {\n    fn from(input: BoundedVec<u8, MaxBytes>) -> Self {\n        Self::new(input.storage(), input.len() as u32)\n    }\n}\n\n/// Given an input byte array, convert into 31-byte chunks\n///\n/// Cost: ~0.5 gates per byte\nfn compute_chunks<let MaxPaddedBytes: u32, let PaddedChunks: u32>(\n    body: [u8; MaxPaddedBytes],\n) -> [Field; PaddedChunks] {\n    let mut chunks: [Field; PaddedChunks] = [0; PaddedChunks];\n    for i in 0..PaddedChunks {\n        let mut limb: Field = 0;\n        for j in 0..31 {\n            limb *= 256;\n            limb += body[i * 31 + j] as Field;\n        }\n        chunks[i] = limb;\n        std::as_witness(chunks[i]);\n    }\n    chunks\n}\n\n#[test]\nfn test() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_small_needle() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \"olor\".as_bytes();\n    let mut haystack: StringBody512 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString32 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_aligned_on_byte_boundary() {\n    let haystack_text = \"the quick brown fox jumped over the lazy dog\".as_bytes();\n    let needle_text = \" the lazy dog\".as_bytes();\n\n    let mut haystack: StringBody256 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString256 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_needle_haystack_equal_size() {\n    let haystack_text =\n        \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n    let needle_text = \"the quick brown fox jumped over the lazy dog lorem ipsum blahhhh\".as_bytes();\n\n    let mut haystack: StringBody64 = StringBody::new(haystack_text, haystack_text.len());\n    let mut needle: SubString64 = SubString::new(needle_text, needle_text.len());\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_concat() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString128 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nfn test_concat_into() {\n    let email_text = \"account recovery for Bartholomew Fibblesworth\".as_bytes();\n    let username = \"Bartholomew Fibblesworth\".as_bytes();\n    let mut padded_email_text: [u8; 256] = [0; 256];\n    let mut padded_username: [u8; 100] = [0; 100];\n    for i in 0..username.len() {\n        padded_username[i] = username[i];\n    }\n    for i in 0..email_text.len() {\n        padded_email_text[i] = email_text[i];\n    }\n    let needle_text_init = \"account recovery for \".as_bytes();\n\n    let needle_start: SubString32 = SubString::new(needle_text_init, needle_text_init.len());\n    let needle_end: SubString128 = SubString::new(padded_username, username.len());\n    let needle = needle_start.concat_into(needle_end);\n\n    for i in 0..45 {\n        assert(needle.body[i] == email_text[i]);\n    }\n\n    let haystack: StringBody256 = StringBody::new(padded_email_text, 200);\n    let (result, _): (bool, u32) = haystack.substring_match(needle);\n    assert(result == true);\n}\n\n#[test]\nunconstrained fn test_partial_match() {\n    let mut Engine = DebugRandomEngine { seed: 0 };\n    let mut foo: [u8; 1024] = Engine.get_random_bytes();\n    let mut bar: [u8; 128] = [0; 128];\n    for i in 0..128 {\n        bar[i] = foo[i + 123];\n    }\n    let position = utils::search(foo, bar.as_slice(), 1024, 128);\n\n    assert(position == 123);\n}\n\n#[test]\nfn test_substring_from_bounded_vec() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n\n    let mut haystack: StringBody512 = BoundedVec::from(haystack_text).into();\n    let mut needle: SubString64 = BoundedVec::from(needle_text).into();\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn test_string_body_from_bounded_vec() {\n    let haystack_text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n        .as_bytes();\n\n    let mut haystack: StringBody512 = BoundedVec::from(haystack_text).into();\n    let needle_text = \" dolor in reprehenderit in voluptate velit esse\".as_bytes();\n    let mut needle: SubString64 = BoundedVec::from(needle_text).into();\n\n    let result = haystack.substring_match(needle);\n    assert(result.0 == true);\n}\n\n#[test]\nfn regression_20() {\n    let haystack: [u8; 128] = [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x92, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x6e, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n\n    let needle: [u8; 32] = [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let needle_len: u32 = 0x20;\n    let id_haystack: StringBody128 = StringBody::new(haystack, 128);\n    let pk_needle: SubString32 = SubString::new(needle, needle_len);\n    let (result, _): (bool, u32) = id_haystack.substring_match(pk_needle);\n    assert(result);\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_string_search/v0.3.2/src/lib.nr"},"142":{"source":"pub unconstrained fn search<let N: u32>(\n    haystack: [u8; N],\n    needle: [u8],\n    haystack_length: u32,\n    needle_length: u32,\n) -> u32 {\n    assert(needle_length > 0, \"needle length of size 0 not supported\");\n    assert(haystack_length > 0, \"haystack length of size 0 not supported\");\n    let mut found = false;\n    let mut found_index: u32 = 0;\n    for i in 0..haystack_length - needle_length + 1 {\n        if (found == true) {\n            break;\n        }\n        for j in 0..needle_length {\n            if haystack[i + j] != needle[j] {\n                break;\n            } else if (j == needle_length - 1) {\n                found = true;\n            }\n            if (found == true) {\n                found_index = i;\n                break;\n            }\n        }\n    }\n    assert(found == true, \"utils::search could not find needle in haystack\");\n    found_index\n}\n\nunconstrained fn __conditional_select(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    if (predicate) {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn conditional_select<T>(lhs: u8, rhs: u8, predicate: bool) -> u8 {\n    // Safety: This is all just a very verbose `if (predicate) { lhs } else { rhs }`\n    // formulated as `rhs + (lhs - rhs) * predicate`\n    unsafe {\n        let result = __conditional_select(lhs, rhs, predicate);\n        let result_f = result as Field;\n        let lhs_f = lhs as Field;\n        let rhs_f = rhs as Field;\n\n        let diff = lhs_f - rhs_f;\n        std::as_witness(diff);\n        assert_eq((predicate as Field) * diff + rhs_f, result_f);\n        result\n    }\n}\n\npub unconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    a < b\n}\n\npub fn lt_f(x: Field, y: Field) -> bool {\n    // Safety: As `x` and `y` are known to be valid `u32`s, this function reimplements the\n    // compiler's internal implementation of `lt`\n    unsafe {\n        let predicate = get_lt_predicate_f(x, y);\n        let delta = y as Field - x as Field;\n        let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n        lt_parameter.assert_max_bit_size::<32>();\n\n        predicate\n    }\n}\n\npub struct DebugRandomEngine {\n    pub seed: Field,\n}\n\nimpl DebugRandomEngine {\n    unconstrained fn get_random_32_bytes(&mut self) -> [u8; 32] {\n        self.seed += 1;\n        let input: [u8; 32] = self.seed.to_be_bytes();\n        let hash: [u8; 32] = std::hash::blake3(input);\n        hash\n    }\n    unconstrained fn get_random_field(&mut self) -> Field {\n        let hash = self.get_random_32_bytes();\n        let mut result: Field = 0;\n        for i in 0..32 {\n            result *= 256;\n            result += hash[i] as Field;\n        }\n        result\n    }\n\n    pub unconstrained fn get_random_bytes<let NBytes: u32>(&mut self) -> [u8; NBytes] {\n        let num_chunks = (NBytes / 32) + ((NBytes % 32) != 0) as u32;\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..num_chunks - 1 {\n            let bytes = self.get_random_32_bytes();\n            for j in 0..32 {\n                result[i * 32 + j] = bytes[j];\n            }\n        }\n\n        let bytes = self.get_random_32_bytes();\n        for j in 0..(NBytes - (num_chunks - 1) * 32) {\n            result[(num_chunks - 1) * 32 + j] = bytes[j];\n        }\n        result\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_string_search/v0.3.2/src/utils.nr"},"143":{"source":"use crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, RSA_EXPONENT};\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse rsa::{rsa::verify_sha256_pkcs1v15, types::{RBN1024, RBN2048}};\nuse std::hash::{pedersen_hash, sha256_var};\n\npub struct RSAPubkey<let KEY_LIMBS: u32> {\n    modulus: [Field; KEY_LIMBS],\n    redc: [Field; KEY_LIMBS],\n}\n\nimpl<let KEY_LIMBS: u32> RSAPubkey<KEY_LIMBS> {\n\n    pub fn new(modulus: [Field; KEY_LIMBS], redc: [Field; KEY_LIMBS]) -> Self {\n        let pubkey = Self { modulus, redc };\n        pubkey\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_1024> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_1024],\n    ) -> [u8; 32] {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_1024, 1024> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN1024 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n\n        header_hash\n    }\n\n    pub fn hash(self) -> Field {\n        // validate\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 9];\n        // compose first 4 limbs of modulus and redc\n        for i in 0..4 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 4] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // compose last two elements of redc and modulus together\n        let modulus_hi = self.modulus[8] * 2.pow_32(120);\n        dkim_preimage[8] = modulus_hi + self.redc[8];\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_1024 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_1024 - 1].assert_max_bit_size::<1024 - ((KEY_LIMBS_1024 - 1) * 120)>();\n        self.redc[KEY_LIMBS_1024 - 1].assert_max_bit_size::<120>();\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_2048> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_2048],\n    ) -> [u8; 32] {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_2048, 2048> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN2048 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n\n        header_hash\n    }\n\n    pub fn hash(self) -> Field {\n        // validate range\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 18];\n        // compose limbs\n        for i in 0..9 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 9] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_2048 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_2048 - 1].assert_max_bit_size::<2048 - ((KEY_LIMBS_2048 - 1) * 120)>();\n        self.redc[KEY_LIMBS_2048 - 1].assert_max_bit_size::<120>(); // we get 2053 sometimes?\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/zkemail/zkemail.nr/v0.4.3/lib/src/dkim.nr"},"190":{"source":"use crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_120: Field = 0x1000000000000000000000000000000;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> Field {\n    let TWO_POW_120 = 0x1000000000000000000000000000000;\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0]\n    } else if N == 2 {\n        validate_in_range::<N, MOD_BITS>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        limbs[0] + limbs[1] * TWO_POW_120 + limbs[2] * TWO_POW_120 * TWO_POW_120\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    field: Field,\n) -> [Field; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result = unsafe { __from_field::<N>(field) };\n\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        let TWO_POW_120 = 0x1000000000000000000000000000000;\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let field_val = if N < 2 {\n            result[0]\n        } else if N == 2 {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120\n        } else {\n            validate_in_range::<N, MOD_BITS>(result);\n            result[0] + result[1] * TWO_POW_120 + result[2] * TWO_POW_120 * TWO_POW_120\n        };\n        assert(field_val == field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120;\n        r *= TWO_POW_120;\n        modulus_mod_n *= TWO_POW_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += params.modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [Field; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += borrow_flags[0] as Field * TWO_POW_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * TWO_POW_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    validate_in_range::<_, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb =\n            modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * TWO_POW_120);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * TWO_POW_120);\n            assert(result_limb == 0);\n        }\n        let result_limb =\n            modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb =\n            lhs[0] + rhs[0] - subtrahend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] + rhs[N - 1] - subtrahend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] + borrow_sub_carry * TWO_POW_120;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb =\n            lhs[N - 1] - rhs[N - 1] + addend[N - 1] - result[N - 1] - borrow_sub_carry;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/constrained_ops.nr"},"191":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/expressions.nr"},"193":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/serialization.nr"},"194":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [Field; N] {\n    // cast the field to a u60 representation\n    let res_u60: U60Repr<N, 2> = U60Repr::from_field(field);\n    let result: [Field; N] = U60Repr::into(res_u60);\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = From::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = From::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = From::from(lhs);\n    let b_u60: U60Repr<N, 2> = From::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                let idx = (i - 1) / 2;\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            // Only set `borrow` and `carry` if they differ\n            if (carry != borrow) {\n                carry_flags[i / 2] = carry as bool;\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quirky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target.shr1();\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_helpers.nr"},"195":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..N {\n        let idx = N - 1 - i;\n        if (!__is_zero(x[idx])) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]] = [[0; N]];\n    let mut temporaries: [[Field; N]; N] = std::mem::zeroed();\n    for i in 0..N {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n        result = result.push_back([0; N]);\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = U60Repr::one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/fns/unconstrained_ops.nr"},"197":{"source":"use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    pub fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/params.nr"},"198":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    pub fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self;\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    pub fn modulus(self) -> Self;\n    pub fn modulus_bits() -> u32;\n    pub fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    pub fn get_limbs(self) -> [Field; N];\n    pub fn get_limb(self, idx: u32) -> Field;\n    pub fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    pub fn __neg(self) -> Self;\n    // unconstrained\n    pub fn __add(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __div(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    pub fn __invmod(self) -> Self;\n    // unconstrained\n    pub fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    pub fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    pub fn assert_is_not_equal(self, other: Self);\n    pub fn validate_in_field(self);\n    pub fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    pub fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    pub fn udiv(numerator: Self, divisor: Self) -> Self;\n    pub fn umod(numerator: Self, divisor: Self) -> Self;\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    pub fn is_zero(self) -> bool;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/runtime_bignum.nr"},"205":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\npub(crate) global TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n//fields to u60rep conversion\n// field elements are 254 bits\n// so there will be 5 limbs\npub(crate) unconstrained fn field_to_u60rep(mut x: Field) -> (u64, u64, u64, u64, u64) {\n    // get the first 60 bits by casting to u64 and then taking the lower 60 bits\n    // we use the fact that this casting drops everything above 64 bits\n    let x_first_u64 = (x as u64);\n    let first: u64 = x_first_u64 % TWO_POW_60;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_60 as Field);\n    let x_second_u64 = (x as u64);\n    let second = x_second_u64 % TWO_POW_60;\n    x = (x - (second as Field)) / (TWO_POW_60 as Field);\n    let x_third_u64 = (x as u64);\n    let third = x_third_u64 % TWO_POW_60;\n    x = (x - (third as Field)) / (TWO_POW_60 as Field);\n    let x_fourth_u64 = (x as u64);\n    let fourth = x_fourth_u64 % TWO_POW_60;\n    x = (x - (fourth as Field)) / (TWO_POW_60 as Field);\n    let x_fifth_u64 = (x as u64);\n    let fifth = x_fifth_u64 % TWO_POW_60;\n    (first, second, third, fourth, fifth)\n}\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\nunconstrained fn __split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\n/// Decomposes a single field into two 60 bit fields\n///\n/// Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\npub fn split_60_bits(x: Field) -> (u64, u64) {\n    // We assert that the two returned limbs fit within 60 bits each\n    // and reconstruct `x` when added together.\n    let (lo, hi) = unsafe { __split_60_bits(x) };\n    if !std::runtime::is_unconstrained() {\n        let lo_field = lo as Field;\n        let hi_field = hi as Field;\n        lo_field.assert_max_bit_size::<60>();\n        hi_field.assert_max_bit_size::<60>();\n        assert_eq(lo_field + (TWO_POW_60 as Field) * hi_field, x);\n    }\n\n    (lo, hi)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n\n        normalized[i] = lo;\n        next = input[i + 1] + hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/split_bits.nr"},"206":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\nuse crate::utils::split_bits::{field_to_u60rep, TWO_POW_60};\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..N {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\n// impl<let N: u32, let NumSegments: u32> std::convert::From<Field> for U60Repr<N, NumSegments> {\n//     fn from(input: Field) -> Self {\n//        let (low, mid, high) =  unsafe { field_to_u60rep(input) } ;\n//         let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n//         let N_u60: u32 = N * NumSegments;\n//         assert(N_u60 >=1, \"N must be at least 1\");\n//         if N_u60 == 1 {\n//             assert((mid ==0) & (high == 0), \"input field is too large to fit in a single limb\");\n//             result.limbs[0] = low;\n//         }\n//         else if N_u60 == 2{\n//             assert(high == 0, \"input field is too large to fit in two limbs\");\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//         }else{\n//             result.limbs[0] = low;\n//             result.limbs[1] = mid;\n//             result.limbs[2] = high;\n//         }\n//         result\n//     }\n// }\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn from_field(input: Field) -> Self {\n        let (first, second, third, fourth, fifth) = field_to_u60rep(input);\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        let N_u60: u32 = N * NumSegments;\n        assert(N_u60 >= 1, \"N must be at least 1\");\n        if N_u60 == 1 {\n            assert(\n                (second == 0) & (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in a single limb\",\n            );\n            result.limbs[0] = first;\n        } else if N_u60 == 2 {\n            assert(\n                (third == 0) & (fourth == 0) & (fifth == 0),\n                \"input field is too large to fit in two limbs\",\n            );\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n        } else if N_u60 == 3 {\n            assert((fourth == 0) & (fifth == 0), \"input field is too large to fit in three limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n        } else if N_u60 == 4 {\n            assert((fifth == 0), \"input field is too large to fit in four limbs\");\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n        } else {\n            result.limbs[0] = first;\n            result.limbs[1] = second;\n            result.limbs[2] = third;\n            result.limbs[3] = fourth;\n            result.limbs[4] = fifth;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        for i in 0..(N * NumSegments / 2) {\n            result[i] =\n                x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * TWO_POW_60 as Field);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            let idx = (N * NumSegments) - 1 - i;\n            if (b.limbs[idx] == self.limbs[idx]) {\n                continue;\n            }\n\n            result = b.limbs[idx] < self.limbs[idx];\n            early_exit = true;\n            break;\n        }\n        if early_exit {\n            result\n        } else {\n            self.limbs[0] == b.limbs[0]\n        }\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift = (60 - limb_shift) as u8;\n        let mask: u64 = (((1 as u64) << limb_shift) - 1) << remainder_shift;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = value >> limb_shift;\n            let remainder: u64 = (value << remainder_shift) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << limb_shift) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << limb_shift) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir-bignum/v0.5.2/src/utils/u60_representation.nr"},"209":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n","path":"/Users/unomasanori/nargo/github.com/noir-lang/noir_rsa/v0.5.1/lib/src/rsa.nr"}},"names":["main"],"brillig_names":["build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","__mul","__compute_quadratic_expression_with_borrow_flags","extract_claim_unconstrained","__boundary_check","__validate_decoded","search","get_lt_predicate_f","extract_claim_unconstrained","get_domain_start_index_in_email","build_msg_block","attach_len_to_msg_block","__split_60_bits","__mul","__compute_quadratic_expression_with_borrow_flags","decompose_hint","is_position_found_in_email_body","is_salary_found_in_email_body","directive_integer_quotient","directive_invert","directive_to_radix"]}