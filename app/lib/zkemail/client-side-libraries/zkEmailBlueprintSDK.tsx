import zkeSDK, { Proof } from "@zk-email/sdk";  /// @dev - Import the zkEmail Blueprint SDK


/**
 * @notice - Generate a ZK Proof from the raw email, which is extracted from an EML file. 
 * @notice - The ZK proof is generated by using the zkEmail SDK.
 * @param rawEmail - The raw email text, which is extracted from an eml file.
 */
export async function generateProofFromEmlFile(
    rawEmail: string,
    blueprintSlug: string,
): Promise<{ proof: Proof }> {
    // Initialize the SDK
    const sdk = zkeSDK()

    // Get the blueprint
    const blueprint = await sdk.getBlueprint(blueprintSlug);
    console.log(`blueprint: ${JSON.stringify(blueprint, null, 2)}`);

    // Create a prover
    const prover = blueprint.createProver();
    console.log(`prover: ${JSON.stringify(prover, null, 2)}`);
      
    // Generate the proof
    const proof = await prover.generateProof(rawEmail);
    console.log(`proof: ${JSON.stringify(proof, null, 2)}`);// Verify the proof

    // Verify the proof
    const isProofValid = await verifyProofOfEmlFile(blueprint, proof);
    console.log(`isProofValid: ${JSON.stringify(isProofValid, null, 2)}`);

    return { proof };
}


/**
 * @notice - Verify a ZK Proof of the raw email, which is extracted from an EML file. 
 */
export async function verifyProofOfEmlFile(
    blueprint: any,
    proof: Proof
): Promise<{ isProofValid: boolean }> {
    // Verify the proof on chain
    const isProofValidOnChain = await blueprint.verifyProofOnChain(proof);
    console.log(`isProofValidOnChain: ${JSON.stringify(isProofValidOnChain, null, 2)}`);

    // Verify the proof off chain
    const isProofValidOffChain = await blueprint.verifyProof(proof);
    console.log(`isProofValidOffChain: ${JSON.stringify(isProofValidOffChain, null, 2)}`);

    if (!isProofValidOnChain) {
        throw new Error("Proof is not valid on chain");
    }
    if (!isProofValidOffChain) {
        throw new Error("Proof is not valid off chain");
    }

    return { isProofValid: true };
}